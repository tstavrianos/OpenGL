using System;
using System.Text;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace OpenGL {
    public static partial class Wrappers {
        private static string PtrToStringUTF8(IntPtr ptr) {
            if (ptr == IntPtr.Zero) return null;
            var buff = new List<byte>();
            var offset = 0;
            for (; ; offset++) {
                var currentByte = Marshal.ReadByte(ptr, offset);
                if (currentByte == 0) break;
                buff.Add(currentByte);
            }
            return Encoding.UTF8.GetString(buff.ToArray());
        }
        
        public unsafe static void glAccum(int op, float value) {
            Pointers.glAccum(op, value);
        }
        
        public unsafe static void glAccumxOES(int op, IntPtr value) {
            Pointers.glAccumxOES(op, value);
        }
        
        public unsafe static void glActiveProgramEXT(uint program) {
            Pointers.glActiveProgramEXT(program);
        }
        
        public unsafe static void glActiveShaderProgram(uint pipeline, uint program) {
            Pointers.glActiveShaderProgram(pipeline, program);
        }
        
        public unsafe static void glActiveShaderProgramEXT(uint pipeline, uint program) {
            Pointers.glActiveShaderProgramEXT(pipeline, program);
        }
        
        public unsafe static void glActiveStencilFaceEXT(int face) {
            Pointers.glActiveStencilFaceEXT(face);
        }
        
        public unsafe static void glActiveTexture(int texture) {
            Pointers.glActiveTexture(texture);
        }
        
        public unsafe static void glActiveTextureARB(int texture) {
            Pointers.glActiveTextureARB(texture);
        }
        
        public unsafe static void glActiveVaryingNV(uint program, string name) {
            Pointers.glActiveVaryingNV(program, name);
        }
        
        public unsafe static void glAlphaFragmentOp1ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod) {
            Pointers.glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        public unsafe static void glAlphaFragmentOp2ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod) {
            Pointers.glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        public unsafe static void glAlphaFragmentOp3ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod) {
            Pointers.glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        public unsafe static void glAlphaFunc(int func, float _ref) {
            Pointers.glAlphaFunc(func, _ref);
        }
        
        public unsafe static void glAlphaFuncQCOM(int func, float _ref) {
            Pointers.glAlphaFuncQCOM(func, _ref);
        }
        
        public unsafe static void glAlphaFuncx(int func, IntPtr _ref) {
            Pointers.glAlphaFuncx(func, _ref);
        }
        
        public unsafe static void glAlphaFuncxOES(int func, IntPtr _ref) {
            Pointers.glAlphaFuncxOES(func, _ref);
        }
        
        public unsafe static void glAlphaToCoverageDitherControlNV(int mode) {
            Pointers.glAlphaToCoverageDitherControlNV(mode);
        }
        
        public unsafe static void glApplyFramebufferAttachmentCMAAINTEL() {
            Pointers.glApplyFramebufferAttachmentCMAAINTEL();
        }
        
        public unsafe static void glApplyTextureEXT(int mode) {
            Pointers.glApplyTextureEXT(mode);
        }
        
        public unsafe static bool glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout) {
            return Pointers.glAcquireKeyedMutexWin32EXT(memory, key, timeout);
        }
        
        public unsafe static bool glAreProgramsResidentNV(int n, uint* programs, bool* residences) {
            return Pointers.glAreProgramsResidentNV(n, programs, residences);
        }
        
        public unsafe static bool glAreProgramsResidentNV(int n, uint* programs, bool[] residences) {
            fixed(bool* residences_ = &residences[0])
                return Pointers.glAreProgramsResidentNV(n, programs, residences_);
        }
        
        public unsafe static bool glAreProgramsResidentNV(int n, uint[] programs, bool* residences) {
            fixed(uint* programs_ = &programs[0])
                return Pointers.glAreProgramsResidentNV(n, programs_, residences);
        }
        
        public unsafe static bool glAreProgramsResidentNV(int n, uint[] programs, bool[] residences) {
            fixed(uint* programs_ = &programs[0])
            fixed(bool* residences_ = &residences[0])
                return Pointers.glAreProgramsResidentNV(n, programs_, residences_);
        }
        
        public unsafe static bool glAreTexturesResident(int n, uint* textures, bool* residences) {
            return Pointers.glAreTexturesResident(n, textures, residences);
        }
        
        public unsafe static bool glAreTexturesResident(int n, uint* textures, bool[] residences) {
            fixed(bool* residences_ = &residences[0])
                return Pointers.glAreTexturesResident(n, textures, residences_);
        }
        
        public unsafe static bool glAreTexturesResident(int n, uint[] textures, bool* residences) {
            fixed(uint* textures_ = &textures[0])
                return Pointers.glAreTexturesResident(n, textures_, residences);
        }
        
        public unsafe static bool glAreTexturesResident(int n, uint[] textures, bool[] residences) {
            fixed(uint* textures_ = &textures[0])
            fixed(bool* residences_ = &residences[0])
                return Pointers.glAreTexturesResident(n, textures_, residences_);
        }
        
        public unsafe static bool glAreTexturesResidentEXT(int n, uint* textures, bool* residences) {
            return Pointers.glAreTexturesResidentEXT(n, textures, residences);
        }
        
        public unsafe static bool glAreTexturesResidentEXT(int n, uint* textures, bool[] residences) {
            fixed(bool* residences_ = &residences[0])
                return Pointers.glAreTexturesResidentEXT(n, textures, residences_);
        }
        
        public unsafe static bool glAreTexturesResidentEXT(int n, uint[] textures, bool* residences) {
            fixed(uint* textures_ = &textures[0])
                return Pointers.glAreTexturesResidentEXT(n, textures_, residences);
        }
        
        public unsafe static bool glAreTexturesResidentEXT(int n, uint[] textures, bool[] residences) {
            fixed(uint* textures_ = &textures[0])
            fixed(bool* residences_ = &residences[0])
                return Pointers.glAreTexturesResidentEXT(n, textures_, residences_);
        }
        
        public unsafe static void glArrayElement(int i) {
            Pointers.glArrayElement(i);
        }
        
        public unsafe static void glArrayElementEXT(int i) {
            Pointers.glArrayElementEXT(i);
        }
        
        public unsafe static void glArrayObjectATI(int array, int size, int type, int stride, uint buffer, uint offset) {
            Pointers.glArrayObjectATI(array, size, type, stride, buffer, offset);
        }
        
        public unsafe static void glAsyncMarkerSGIX(uint marker) {
            Pointers.glAsyncMarkerSGIX(marker);
        }
        
        public unsafe static void glAttachObjectARB(uint containerObj, uint obj) {
            Pointers.glAttachObjectARB(containerObj, obj);
        }
        
        public unsafe static void glAttachShader(uint program, uint shader) {
            Pointers.glAttachShader(program, shader);
        }
        
        public unsafe static void glBegin(int mode) {
            Pointers.glBegin(mode);
        }
        
        public unsafe static void glBeginConditionalRender(uint id, int mode) {
            Pointers.glBeginConditionalRender(id, mode);
        }
        
        public unsafe static void glBeginConditionalRenderNV(uint id, int mode) {
            Pointers.glBeginConditionalRenderNV(id, mode);
        }
        
        public unsafe static void glBeginConditionalRenderNVX(uint id) {
            Pointers.glBeginConditionalRenderNVX(id);
        }
        
        public unsafe static void glBeginFragmentShaderATI() {
            Pointers.glBeginFragmentShaderATI();
        }
        
        public unsafe static void glBeginOcclusionQueryNV(uint id) {
            Pointers.glBeginOcclusionQueryNV(id);
        }
        
        public unsafe static void glBeginPerfMonitorAMD(uint monitor) {
            Pointers.glBeginPerfMonitorAMD(monitor);
        }
        
        public unsafe static void glBeginPerfQueryINTEL(uint queryHandle) {
            Pointers.glBeginPerfQueryINTEL(queryHandle);
        }
        
        public unsafe static void glBeginQuery(int target, uint id) {
            Pointers.glBeginQuery(target, id);
        }
        
        public unsafe static void glBeginQueryARB(int target, uint id) {
            Pointers.glBeginQueryARB(target, id);
        }
        
        public unsafe static void glBeginQueryEXT(int target, uint id) {
            Pointers.glBeginQueryEXT(target, id);
        }
        
        public unsafe static void glBeginQueryIndexed(int target, uint index, uint id) {
            Pointers.glBeginQueryIndexed(target, index, id);
        }
        
        public unsafe static void glBeginTransformFeedback(int primitiveMode) {
            Pointers.glBeginTransformFeedback(primitiveMode);
        }
        
        public unsafe static void glBeginTransformFeedbackEXT(int primitiveMode) {
            Pointers.glBeginTransformFeedbackEXT(primitiveMode);
        }
        
        public unsafe static void glBeginTransformFeedbackNV(int primitiveMode) {
            Pointers.glBeginTransformFeedbackNV(primitiveMode);
        }
        
        public unsafe static void glBeginVertexShaderEXT() {
            Pointers.glBeginVertexShaderEXT();
        }
        
        public unsafe static void glBeginVideoCaptureNV(uint video_capture_slot) {
            Pointers.glBeginVideoCaptureNV(video_capture_slot);
        }
        
        public unsafe static void glBindAttribLocation(uint program, uint index, string name) {
            Pointers.glBindAttribLocation(program, index, name);
        }
        
        public unsafe static void glBindAttribLocationARB(uint programObj, uint index, string name) {
            Pointers.glBindAttribLocationARB(programObj, index, name);
        }
        
        public unsafe static void glBindBuffer(int target, uint buffer) {
            Pointers.glBindBuffer(target, buffer);
        }
        
        public unsafe static void glBindBufferARB(int target, uint buffer) {
            Pointers.glBindBufferARB(target, buffer);
        }
        
        public unsafe static void glBindBufferBase(int target, uint index, uint buffer) {
            Pointers.glBindBufferBase(target, index, buffer);
        }
        
        public unsafe static void glBindBufferBaseEXT(int target, uint index, uint buffer) {
            Pointers.glBindBufferBaseEXT(target, index, buffer);
        }
        
        public unsafe static void glBindBufferBaseNV(int target, uint index, uint buffer) {
            Pointers.glBindBufferBaseNV(target, index, buffer);
        }
        
        public unsafe static void glBindBufferOffsetEXT(int target, uint index, uint buffer, uint offset) {
            Pointers.glBindBufferOffsetEXT(target, index, buffer, offset);
        }
        
        public unsafe static void glBindBufferOffsetNV(int target, uint index, uint buffer, uint offset) {
            Pointers.glBindBufferOffsetNV(target, index, buffer, offset);
        }
        
        public unsafe static void glBindBufferRange(int target, uint index, uint buffer, uint offset, uint size) {
            Pointers.glBindBufferRange(target, index, buffer, offset, size);
        }
        
        public unsafe static void glBindBufferRangeEXT(int target, uint index, uint buffer, uint offset, uint size) {
            Pointers.glBindBufferRangeEXT(target, index, buffer, offset, size);
        }
        
        public unsafe static void glBindBufferRangeNV(int target, uint index, uint buffer, uint offset, uint size) {
            Pointers.glBindBufferRangeNV(target, index, buffer, offset, size);
        }
        
        public unsafe static void glBindBuffersBase(int target, uint first, int count, uint* buffers) {
            Pointers.glBindBuffersBase(target, first, count, buffers);
        }
        
        public unsafe static void glBindBuffersBase(int target, uint first, int count, uint[] buffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glBindBuffersBase(target, first, count, buffers_);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint* buffers, uint* offsets, uint* sizes) {
            Pointers.glBindBuffersRange(target, first, count, buffers, offsets, sizes);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint* buffers, uint* offsets, uint[] sizes) {
            fixed(uint* sizes_ = &sizes[0])
                Pointers.glBindBuffersRange(target, first, count, buffers, offsets, sizes_);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint* buffers, uint[] offsets, uint* sizes) {
            fixed(uint* offsets_ = &offsets[0])
                Pointers.glBindBuffersRange(target, first, count, buffers, offsets_, sizes);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint* buffers, uint[] offsets, uint[] sizes) {
            fixed(uint* offsets_ = &offsets[0])
            fixed(uint* sizes_ = &sizes[0])
                Pointers.glBindBuffersRange(target, first, count, buffers, offsets_, sizes_);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint[] buffers, uint* offsets, uint* sizes) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glBindBuffersRange(target, first, count, buffers_, offsets, sizes);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint[] buffers, uint* offsets, uint[] sizes) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* sizes_ = &sizes[0])
                Pointers.glBindBuffersRange(target, first, count, buffers_, offsets, sizes_);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint[] buffers, uint[] offsets, uint* sizes) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* offsets_ = &offsets[0])
                Pointers.glBindBuffersRange(target, first, count, buffers_, offsets_, sizes);
        }
        
        public unsafe static void glBindBuffersRange(int target, uint first, int count, uint[] buffers, uint[] offsets, uint[] sizes) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* offsets_ = &offsets[0])
            fixed(uint* sizes_ = &sizes[0])
                Pointers.glBindBuffersRange(target, first, count, buffers_, offsets_, sizes_);
        }
        
        public unsafe static void glBindFragDataLocation(uint program, uint color, string name) {
            Pointers.glBindFragDataLocation(program, color, name);
        }
        
        public unsafe static void glBindFragDataLocationEXT(uint program, uint color, string name) {
            Pointers.glBindFragDataLocationEXT(program, color, name);
        }
        
        public unsafe static void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name) {
            Pointers.glBindFragDataLocationIndexed(program, colorNumber, index, name);
        }
        
        public unsafe static void glBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, string name) {
            Pointers.glBindFragDataLocationIndexedEXT(program, colorNumber, index, name);
        }
        
        public unsafe static void glBindFragmentShaderATI(uint id) {
            Pointers.glBindFragmentShaderATI(id);
        }
        
        public unsafe static void glBindFramebuffer(int target, uint framebuffer) {
            Pointers.glBindFramebuffer(target, framebuffer);
        }
        
        public unsafe static void glBindFramebufferEXT(int target, uint framebuffer) {
            Pointers.glBindFramebufferEXT(target, framebuffer);
        }
        
        public unsafe static void glBindFramebufferOES(int target, uint framebuffer) {
            Pointers.glBindFramebufferOES(target, framebuffer);
        }
        
        public unsafe static void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, int access, int format) {
            Pointers.glBindImageTexture(unit, texture, level, layered, layer, access, format);
        }
        
        public unsafe static void glBindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, int access, int format) {
            Pointers.glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
        }
        
        public unsafe static void glBindImageTextures(uint first, int count, uint* textures) {
            Pointers.glBindImageTextures(first, count, textures);
        }
        
        public unsafe static void glBindImageTextures(uint first, int count, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glBindImageTextures(first, count, textures_);
        }
        
        public unsafe static uint glBindLightParameterEXT(int light, int value) {
            return Pointers.glBindLightParameterEXT(light, value);
        }
        
        public unsafe static uint glBindMaterialParameterEXT(int face, int value) {
            return Pointers.glBindMaterialParameterEXT(face, value);
        }
        
        public unsafe static void glBindMultiTextureEXT(int texunit, int target, uint texture) {
            Pointers.glBindMultiTextureEXT(texunit, target, texture);
        }
        
        public unsafe static uint glBindParameterEXT(int value) {
            return Pointers.glBindParameterEXT(value);
        }
        
        public unsafe static void glBindProgramARB(int target, uint program) {
            Pointers.glBindProgramARB(target, program);
        }
        
        public unsafe static void glBindProgramNV(int target, uint id) {
            Pointers.glBindProgramNV(target, id);
        }
        
        public unsafe static void glBindProgramPipeline(uint pipeline) {
            Pointers.glBindProgramPipeline(pipeline);
        }
        
        public unsafe static void glBindProgramPipelineEXT(uint pipeline) {
            Pointers.glBindProgramPipelineEXT(pipeline);
        }
        
        public unsafe static void glBindRenderbuffer(int target, uint renderbuffer) {
            Pointers.glBindRenderbuffer(target, renderbuffer);
        }
        
        public unsafe static void glBindRenderbufferEXT(int target, uint renderbuffer) {
            Pointers.glBindRenderbufferEXT(target, renderbuffer);
        }
        
        public unsafe static void glBindRenderbufferOES(int target, uint renderbuffer) {
            Pointers.glBindRenderbufferOES(target, renderbuffer);
        }
        
        public unsafe static void glBindSampler(uint unit, uint sampler) {
            Pointers.glBindSampler(unit, sampler);
        }
        
        public unsafe static void glBindSamplers(uint first, int count, uint* samplers) {
            Pointers.glBindSamplers(first, count, samplers);
        }
        
        public unsafe static void glBindSamplers(uint first, int count, uint[] samplers) {
            fixed(uint* samplers_ = &samplers[0])
                Pointers.glBindSamplers(first, count, samplers_);
        }
        
        public unsafe static uint glBindTexGenParameterEXT(int unit, int coord, int value) {
            return Pointers.glBindTexGenParameterEXT(unit, coord, value);
        }
        
        public unsafe static void glBindTexture(int target, uint texture) {
            Pointers.glBindTexture(target, texture);
        }
        
        public unsafe static void glBindTextureEXT(int target, uint texture) {
            Pointers.glBindTextureEXT(target, texture);
        }
        
        public unsafe static void glBindTextureUnit(uint unit, uint texture) {
            Pointers.glBindTextureUnit(unit, texture);
        }
        
        public unsafe static uint glBindTextureUnitParameterEXT(int unit, int value) {
            return Pointers.glBindTextureUnitParameterEXT(unit, value);
        }
        
        public unsafe static void glBindTextures(uint first, int count, uint* textures) {
            Pointers.glBindTextures(first, count, textures);
        }
        
        public unsafe static void glBindTextures(uint first, int count, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glBindTextures(first, count, textures_);
        }
        
        public unsafe static void glBindTransformFeedback(int target, uint id) {
            Pointers.glBindTransformFeedback(target, id);
        }
        
        public unsafe static void glBindTransformFeedbackNV(int target, uint id) {
            Pointers.glBindTransformFeedbackNV(target, id);
        }
        
        public unsafe static void glBindVertexArray(uint array) {
            Pointers.glBindVertexArray(array);
        }
        
        public unsafe static void glBindVertexArrayAPPLE(uint array) {
            Pointers.glBindVertexArrayAPPLE(array);
        }
        
        public unsafe static void glBindVertexArrayOES(uint array) {
            Pointers.glBindVertexArrayOES(array);
        }
        
        public unsafe static void glBindVertexBuffer(uint bindingindex, uint buffer, uint offset, int stride) {
            Pointers.glBindVertexBuffer(bindingindex, buffer, offset, stride);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint* buffers, uint* offsets, int* strides) {
            Pointers.glBindVertexBuffers(first, count, buffers, offsets, strides);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint* buffers, uint* offsets, int[] strides) {
            fixed(int* strides_ = &strides[0])
                Pointers.glBindVertexBuffers(first, count, buffers, offsets, strides_);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint* buffers, uint[] offsets, int* strides) {
            fixed(uint* offsets_ = &offsets[0])
                Pointers.glBindVertexBuffers(first, count, buffers, offsets_, strides);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint* buffers, uint[] offsets, int[] strides) {
            fixed(uint* offsets_ = &offsets[0])
            fixed(int* strides_ = &strides[0])
                Pointers.glBindVertexBuffers(first, count, buffers, offsets_, strides_);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint[] buffers, uint* offsets, int* strides) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glBindVertexBuffers(first, count, buffers_, offsets, strides);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint[] buffers, uint* offsets, int[] strides) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(int* strides_ = &strides[0])
                Pointers.glBindVertexBuffers(first, count, buffers_, offsets, strides_);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint[] buffers, uint[] offsets, int* strides) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* offsets_ = &offsets[0])
                Pointers.glBindVertexBuffers(first, count, buffers_, offsets_, strides);
        }
        
        public unsafe static void glBindVertexBuffers(uint first, int count, uint[] buffers, uint[] offsets, int[] strides) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* offsets_ = &offsets[0])
            fixed(int* strides_ = &strides[0])
                Pointers.glBindVertexBuffers(first, count, buffers_, offsets_, strides_);
        }
        
        public unsafe static void glBindVertexShaderEXT(uint id) {
            Pointers.glBindVertexShaderEXT(id);
        }
        
        public unsafe static void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, IntPtr offset) {
            Pointers.glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
        }
        
        public unsafe static void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture) {
            Pointers.glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
        }
        
        public unsafe static void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz) {
            Pointers.glBinormal3bEXT(bx, by, bz);
        }
        
        public unsafe static void glBinormal3bvEXT(sbyte* v) {
            Pointers.glBinormal3bvEXT(v);
        }
        
        public unsafe static void glBinormal3bvEXT(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glBinormal3bvEXT(v_);
        }
        
        public unsafe static void glBinormal3dEXT(double bx, double by, double bz) {
            Pointers.glBinormal3dEXT(bx, by, bz);
        }
        
        public unsafe static void glBinormal3dvEXT(double* v) {
            Pointers.glBinormal3dvEXT(v);
        }
        
        public unsafe static void glBinormal3dvEXT(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glBinormal3dvEXT(v_);
        }
        
        public unsafe static void glBinormal3fEXT(float bx, float by, float bz) {
            Pointers.glBinormal3fEXT(bx, by, bz);
        }
        
        public unsafe static void glBinormal3fvEXT(float* v) {
            Pointers.glBinormal3fvEXT(v);
        }
        
        public unsafe static void glBinormal3fvEXT(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glBinormal3fvEXT(v_);
        }
        
        public unsafe static void glBinormal3iEXT(int bx, int by, int bz) {
            Pointers.glBinormal3iEXT(bx, by, bz);
        }
        
        public unsafe static void glBinormal3ivEXT(int* v) {
            Pointers.glBinormal3ivEXT(v);
        }
        
        public unsafe static void glBinormal3ivEXT(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glBinormal3ivEXT(v_);
        }
        
        public unsafe static void glBinormal3sEXT(short bx, short by, short bz) {
            Pointers.glBinormal3sEXT(bx, by, bz);
        }
        
        public unsafe static void glBinormal3svEXT(short* v) {
            Pointers.glBinormal3svEXT(v);
        }
        
        public unsafe static void glBinormal3svEXT(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glBinormal3svEXT(v_);
        }
        
        public unsafe static void glBinormalPointerEXT(int type, int stride, IntPtr pointer) {
            Pointers.glBinormalPointerEXT(type, stride, pointer);
        }
        
        public unsafe static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap) {
            Pointers.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        public unsafe static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap) {
            fixed(byte* bitmap_ = &bitmap[0])
                Pointers.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap_);
        }
        
        public unsafe static void glBitmapxOES(int width, int height, IntPtr xorig, IntPtr yorig, IntPtr xmove, IntPtr ymove, byte* bitmap) {
            Pointers.glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        public unsafe static void glBitmapxOES(int width, int height, IntPtr xorig, IntPtr yorig, IntPtr xmove, IntPtr ymove, byte[] bitmap) {
            fixed(byte* bitmap_ = &bitmap[0])
                Pointers.glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_);
        }
        
        public unsafe static void glBlendBarrier() {
            Pointers.glBlendBarrier();
        }
        
        public unsafe static void glBlendBarrierKHR() {
            Pointers.glBlendBarrierKHR();
        }
        
        public unsafe static void glBlendBarrierNV() {
            Pointers.glBlendBarrierNV();
        }
        
        public unsafe static void glBlendColor(float red, float green, float blue, float alpha) {
            Pointers.glBlendColor(red, green, blue, alpha);
        }
        
        public unsafe static void glBlendColorEXT(float red, float green, float blue, float alpha) {
            Pointers.glBlendColorEXT(red, green, blue, alpha);
        }
        
        public unsafe static void glBlendColorxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha) {
            Pointers.glBlendColorxOES(red, green, blue, alpha);
        }
        
        public unsafe static void glBlendEquation(int mode) {
            Pointers.glBlendEquation(mode);
        }
        
        public unsafe static void glBlendEquationEXT(int mode) {
            Pointers.glBlendEquationEXT(mode);
        }
        
        public unsafe static void glBlendEquationIndexedAMD(uint buf, int mode) {
            Pointers.glBlendEquationIndexedAMD(buf, mode);
        }
        
        public unsafe static void glBlendEquationOES(int mode) {
            Pointers.glBlendEquationOES(mode);
        }
        
        public unsafe static void glBlendEquationSeparate(int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparate(modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparateEXT(modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparateIndexedAMD(uint buf, int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparateOES(int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparateOES(modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparatei(uint buf, int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparateiARB(uint buf, int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparateiEXT(uint buf, int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationSeparateiOES(uint buf, int modeRGB, int modeAlpha) {
            Pointers.glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha);
        }
        
        public unsafe static void glBlendEquationi(uint buf, int mode) {
            Pointers.glBlendEquationi(buf, mode);
        }
        
        public unsafe static void glBlendEquationiARB(uint buf, int mode) {
            Pointers.glBlendEquationiARB(buf, mode);
        }
        
        public unsafe static void glBlendEquationiEXT(uint buf, int mode) {
            Pointers.glBlendEquationiEXT(buf, mode);
        }
        
        public unsafe static void glBlendEquationiOES(uint buf, int mode) {
            Pointers.glBlendEquationiOES(buf, mode);
        }
        
        public unsafe static void glBlendFunc(int sfactor, int dfactor) {
            Pointers.glBlendFunc(sfactor, dfactor);
        }
        
        public unsafe static void glBlendFuncIndexedAMD(uint buf, int src, int dst) {
            Pointers.glBlendFuncIndexedAMD(buf, src, dst);
        }
        
        public unsafe static void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
            Pointers.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
            Pointers.glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
            Pointers.glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateIndexedAMD(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
            Pointers.glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateOES(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
            Pointers.glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public unsafe static void glBlendFuncSeparatei(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
            Pointers.glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateiARB(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
            Pointers.glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateiEXT(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
            Pointers.glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public unsafe static void glBlendFuncSeparateiOES(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
            Pointers.glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public unsafe static void glBlendFunci(uint buf, int src, int dst) {
            Pointers.glBlendFunci(buf, src, dst);
        }
        
        public unsafe static void glBlendFunciARB(uint buf, int src, int dst) {
            Pointers.glBlendFunciARB(buf, src, dst);
        }
        
        public unsafe static void glBlendFunciEXT(uint buf, int src, int dst) {
            Pointers.glBlendFunciEXT(buf, src, dst);
        }
        
        public unsafe static void glBlendFunciOES(uint buf, int src, int dst) {
            Pointers.glBlendFunciOES(buf, src, dst);
        }
        
        public unsafe static void glBlendParameteriNV(int pname, int value) {
            Pointers.glBlendParameteriNV(pname, value);
        }
        
        public unsafe static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) {
            Pointers.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public unsafe static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, Enums.ClearBufferMask mask, int filter) {
            Pointers.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
        }
        
        public unsafe static void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) {
            Pointers.glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public unsafe static void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, Enums.ClearBufferMask mask, int filter) {
            Pointers.glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
        }
        
        public unsafe static void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) {
            Pointers.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public unsafe static void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, Enums.ClearBufferMask mask, int filter) {
            Pointers.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
        }
        
        public unsafe static void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) {
            Pointers.glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public unsafe static void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, Enums.ClearBufferMask mask, int filter) {
            Pointers.glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
        }
        
        public unsafe static void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) {
            Pointers.glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public unsafe static void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, Enums.ClearBufferMask mask, int filter) {
            Pointers.glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
        }
        
        public unsafe static void glBufferAddressRangeNV(int pname, uint index, ulong address, uint length) {
            Pointers.glBufferAddressRangeNV(pname, index, address, length);
        }
        
        public unsafe static void glBufferData(int target, uint size, IntPtr data, int usage) {
            Pointers.glBufferData(target, size, data, usage);
        }
        
        public unsafe static void glBufferDataARB(int target, uint size, IntPtr data, int usage) {
            Pointers.glBufferDataARB(target, size, data, usage);
        }
        
        public unsafe static void glBufferPageCommitmentARB(int target, uint offset, uint size, bool commit) {
            Pointers.glBufferPageCommitmentARB(target, offset, size, commit);
        }
        
        public unsafe static void glBufferParameteriAPPLE(int target, int pname, int param) {
            Pointers.glBufferParameteriAPPLE(target, pname, param);
        }
        
        public unsafe static void glBufferStorage(int target, uint size, IntPtr data, uint flags) {
            Pointers.glBufferStorage(target, size, data, flags);
        }
        
        public unsafe static void glBufferStorage(int target, uint size, IntPtr data, Enums.MapBufferUsageMask flags) {
            Pointers.glBufferStorage(target, size, data, (uint)flags);
        }
        
        public unsafe static void glBufferStorageEXT(int target, uint size, IntPtr data, uint flags) {
            Pointers.glBufferStorageEXT(target, size, data, flags);
        }
        
        public unsafe static void glBufferStorageEXT(int target, uint size, IntPtr data, Enums.MapBufferUsageMask flags) {
            Pointers.glBufferStorageEXT(target, size, data, (uint)flags);
        }
        
        public unsafe static void glBufferStorageExternalEXT(int target, uint offset, uint size, IntPtr clientBuffer, uint flags) {
            Pointers.glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
        }
        
        public unsafe static void glBufferStorageExternalEXT(int target, uint offset, uint size, IntPtr clientBuffer, Enums.MapBufferUsageMask flags) {
            Pointers.glBufferStorageExternalEXT(target, offset, size, clientBuffer, (uint)flags);
        }
        
        public unsafe static void glBufferStorageMemEXT(int target, uint size, uint memory, ulong offset) {
            Pointers.glBufferStorageMemEXT(target, size, memory, offset);
        }
        
        public unsafe static void glBufferSubData(int target, uint offset, uint size, IntPtr data) {
            Pointers.glBufferSubData(target, offset, size, data);
        }
        
        public unsafe static void glBufferSubDataARB(int target, IntPtr offset, uint size, IntPtr data) {
            Pointers.glBufferSubDataARB(target, offset, size, data);
        }
        
        public unsafe static void glCallCommandListNV(uint list) {
            Pointers.glCallCommandListNV(list);
        }
        
        public unsafe static void glCallList(uint list) {
            Pointers.glCallList(list);
        }
        
        public unsafe static void glCallLists(int n, int type, IntPtr lists) {
            Pointers.glCallLists(n, type, lists);
        }
        
        public unsafe static int glCheckFramebufferStatus(int target) {
            return Pointers.glCheckFramebufferStatus(target);
        }
        
        public unsafe static int glCheckFramebufferStatusEXT(int target) {
            return Pointers.glCheckFramebufferStatusEXT(target);
        }
        
        public unsafe static int glCheckFramebufferStatusOES(int target) {
            return Pointers.glCheckFramebufferStatusOES(target);
        }
        
        public unsafe static int glCheckNamedFramebufferStatus(uint framebuffer, int target) {
            return Pointers.glCheckNamedFramebufferStatus(framebuffer, target);
        }
        
        public unsafe static int glCheckNamedFramebufferStatusEXT(uint framebuffer, int target) {
            return Pointers.glCheckNamedFramebufferStatusEXT(framebuffer, target);
        }
        
        public unsafe static void glClampColor(int target, int clamp) {
            Pointers.glClampColor(target, clamp);
        }
        
        public unsafe static void glClampColorARB(int target, int clamp) {
            Pointers.glClampColorARB(target, clamp);
        }
        
        public unsafe static void glClear(uint mask) {
            Pointers.glClear(mask);
        }
        
        public unsafe static void glClear(Enums.ClearBufferMask mask) {
            Pointers.glClear((uint)mask);
        }
        
        public unsafe static void glClearAccum(float red, float green, float blue, float alpha) {
            Pointers.glClearAccum(red, green, blue, alpha);
        }
        
        public unsafe static void glClearAccumxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha) {
            Pointers.glClearAccumxOES(red, green, blue, alpha);
        }
        
        public unsafe static void glClearBufferData(int target, int internalformat, int format, int type, IntPtr data) {
            Pointers.glClearBufferData(target, internalformat, format, type, data);
        }
        
        public unsafe static void glClearBufferSubData(int target, int internalformat, uint offset, uint size, int format, int type, IntPtr data) {
            Pointers.glClearBufferSubData(target, internalformat, offset, size, format, type, data);
        }
        
        public unsafe static void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil) {
            Pointers.glClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        
        public unsafe static void glClearBufferfv(int buffer, int drawbuffer, float* value) {
            Pointers.glClearBufferfv(buffer, drawbuffer, value);
        }
        
        public unsafe static void glClearBufferfv(int buffer, int drawbuffer, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glClearBufferfv(buffer, drawbuffer, value_);
        }
        
        public unsafe static void glClearBufferiv(int buffer, int drawbuffer, int* value) {
            Pointers.glClearBufferiv(buffer, drawbuffer, value);
        }
        
        public unsafe static void glClearBufferiv(int buffer, int drawbuffer, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glClearBufferiv(buffer, drawbuffer, value_);
        }
        
        public unsafe static void glClearBufferuiv(int buffer, int drawbuffer, uint* value) {
            Pointers.glClearBufferuiv(buffer, drawbuffer, value);
        }
        
        public unsafe static void glClearBufferuiv(int buffer, int drawbuffer, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glClearBufferuiv(buffer, drawbuffer, value_);
        }
        
        public unsafe static void glClearColor(float red, float green, float blue, float alpha) {
            Pointers.glClearColor(red, green, blue, alpha);
        }
        
        public unsafe static void glClearColorIiEXT(int red, int green, int blue, int alpha) {
            Pointers.glClearColorIiEXT(red, green, blue, alpha);
        }
        
        public unsafe static void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha) {
            Pointers.glClearColorIuiEXT(red, green, blue, alpha);
        }
        
        public unsafe static void glClearColorx(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha) {
            Pointers.glClearColorx(red, green, blue, alpha);
        }
        
        public unsafe static void glClearColorxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha) {
            Pointers.glClearColorxOES(red, green, blue, alpha);
        }
        
        public unsafe static void glClearDepth(double depth) {
            Pointers.glClearDepth(depth);
        }
        
        public unsafe static void glClearDepthdNV(double depth) {
            Pointers.glClearDepthdNV(depth);
        }
        
        public unsafe static void glClearDepthf(float d) {
            Pointers.glClearDepthf(d);
        }
        
        public unsafe static void glClearDepthfOES(float depth) {
            Pointers.glClearDepthfOES(depth);
        }
        
        public unsafe static void glClearDepthx(IntPtr depth) {
            Pointers.glClearDepthx(depth);
        }
        
        public unsafe static void glClearDepthxOES(IntPtr depth) {
            Pointers.glClearDepthxOES(depth);
        }
        
        public unsafe static void glClearIndex(float c) {
            Pointers.glClearIndex(c);
        }
        
        public unsafe static void glClearNamedBufferData(uint buffer, int internalformat, int format, int type, IntPtr data) {
            Pointers.glClearNamedBufferData(buffer, internalformat, format, type, data);
        }
        
        public unsafe static void glClearNamedBufferDataEXT(uint buffer, int internalformat, int format, int type, IntPtr data) {
            Pointers.glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
        }
        
        public unsafe static void glClearNamedBufferSubData(uint buffer, int internalformat, uint offset, uint size, int format, int type, IntPtr data) {
            Pointers.glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
        }
        
        public unsafe static void glClearNamedBufferSubDataEXT(uint buffer, int internalformat, uint offset, uint size, int format, int type, IntPtr data) {
            Pointers.glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
        }
        
        public unsafe static void glClearNamedFramebufferfi(uint framebuffer, int buffer, int drawbuffer, float depth, int stencil) {
            Pointers.glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        
        public unsafe static void glClearNamedFramebufferfv(uint framebuffer, int buffer, int drawbuffer, float* value) {
            Pointers.glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
        }
        
        public unsafe static void glClearNamedFramebufferfv(uint framebuffer, int buffer, int drawbuffer, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_);
        }
        
        public unsafe static void glClearNamedFramebufferiv(uint framebuffer, int buffer, int drawbuffer, int* value) {
            Pointers.glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
        }
        
        public unsafe static void glClearNamedFramebufferiv(uint framebuffer, int buffer, int drawbuffer, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_);
        }
        
        public unsafe static void glClearNamedFramebufferuiv(uint framebuffer, int buffer, int drawbuffer, uint* value) {
            Pointers.glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
        }
        
        public unsafe static void glClearNamedFramebufferuiv(uint framebuffer, int buffer, int drawbuffer, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_);
        }
        
        public unsafe static void glClearPixelLocalStorageuiEXT(int offset, int n, uint* values) {
            Pointers.glClearPixelLocalStorageuiEXT(offset, n, values);
        }
        
        public unsafe static void glClearPixelLocalStorageuiEXT(int offset, int n, uint[] values) {
            fixed(uint* values_ = &values[0])
                Pointers.glClearPixelLocalStorageuiEXT(offset, n, values_);
        }
        
        public unsafe static void glClearStencil(int s) {
            Pointers.glClearStencil(s);
        }
        
        public unsafe static void glClearTexImage(uint texture, int level, int format, int type, IntPtr data) {
            Pointers.glClearTexImage(texture, level, format, type, data);
        }
        
        public unsafe static void glClearTexImageEXT(uint texture, int level, int format, int type, IntPtr data) {
            Pointers.glClearTexImageEXT(texture, level, format, type, data);
        }
        
        public unsafe static void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr data) {
            Pointers.glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        public unsafe static void glClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr data) {
            Pointers.glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        public unsafe static void glClientActiveTexture(int texture) {
            Pointers.glClientActiveTexture(texture);
        }
        
        public unsafe static void glClientActiveTextureARB(int texture) {
            Pointers.glClientActiveTextureARB(texture);
        }
        
        public unsafe static void glClientActiveVertexStreamATI(int stream) {
            Pointers.glClientActiveVertexStreamATI(stream);
        }
        
        public unsafe static void glClientAttribDefaultEXT(uint mask) {
            Pointers.glClientAttribDefaultEXT(mask);
        }
        
        public unsafe static void glClientAttribDefaultEXT(Enums.ClientAttribMask mask) {
            Pointers.glClientAttribDefaultEXT((uint)mask);
        }
        
        public unsafe static int glClientWaitSync(IntPtr sync, uint flags, ulong timeout) {
            return Pointers.glClientWaitSync(sync, flags, timeout);
        }
        
        public unsafe static int glClientWaitSync(IntPtr sync, Enums.SyncObjectMask flags, ulong timeout) {
            return Pointers.glClientWaitSync(sync, (uint)flags, timeout);
        }
        
        public unsafe static int glClientWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout) {
            return Pointers.glClientWaitSyncAPPLE(sync, flags, timeout);
        }
        
        public unsafe static int glClientWaitSyncAPPLE(IntPtr sync, Enums.SyncObjectMask flags, ulong timeout) {
            return Pointers.glClientWaitSyncAPPLE(sync, (uint)flags, timeout);
        }
        
        public unsafe static void glClipControl(int origin, int depth) {
            Pointers.glClipControl(origin, depth);
        }
        
        public unsafe static void glClipControlEXT(int origin, int depth) {
            Pointers.glClipControlEXT(origin, depth);
        }
        
        public unsafe static void glClipPlane(int plane, double* equation) {
            Pointers.glClipPlane(plane, equation);
        }
        
        public unsafe static void glClipPlane(int plane, double[] equation) {
            fixed(double* equation_ = &equation[0])
                Pointers.glClipPlane(plane, equation_);
        }
        
        public unsafe static void glClipPlanef(int p, float* eqn) {
            Pointers.glClipPlanef(p, eqn);
        }
        
        public unsafe static void glClipPlanef(int p, float[] eqn) {
            fixed(float* eqn_ = &eqn[0])
                Pointers.glClipPlanef(p, eqn_);
        }
        
        public unsafe static void glClipPlanefIMG(int p, float* eqn) {
            Pointers.glClipPlanefIMG(p, eqn);
        }
        
        public unsafe static void glClipPlanefIMG(int p, float[] eqn) {
            fixed(float* eqn_ = &eqn[0])
                Pointers.glClipPlanefIMG(p, eqn_);
        }
        
        public unsafe static void glClipPlanefOES(int plane, float* equation) {
            Pointers.glClipPlanefOES(plane, equation);
        }
        
        public unsafe static void glClipPlanefOES(int plane, float[] equation) {
            fixed(float* equation_ = &equation[0])
                Pointers.glClipPlanefOES(plane, equation_);
        }
        
        public unsafe static void glClipPlanex(int plane, IntPtr* equation) {
            Pointers.glClipPlanex(plane, equation);
        }
        
        public unsafe static void glClipPlanex(int plane, IntPtr[] equation) {
            fixed(IntPtr* equation_ = &equation[0])
                Pointers.glClipPlanex(plane, equation_);
        }
        
        public unsafe static void glClipPlanexIMG(int p, IntPtr* eqn) {
            Pointers.glClipPlanexIMG(p, eqn);
        }
        
        public unsafe static void glClipPlanexIMG(int p, IntPtr[] eqn) {
            fixed(IntPtr* eqn_ = &eqn[0])
                Pointers.glClipPlanexIMG(p, eqn_);
        }
        
        public unsafe static void glClipPlanexOES(int plane, IntPtr* equation) {
            Pointers.glClipPlanexOES(plane, equation);
        }
        
        public unsafe static void glClipPlanexOES(int plane, IntPtr[] equation) {
            fixed(IntPtr* equation_ = &equation[0])
                Pointers.glClipPlanexOES(plane, equation_);
        }
        
        public unsafe static void glColor3b(sbyte red, sbyte green, sbyte blue) {
            Pointers.glColor3b(red, green, blue);
        }
        
        public unsafe static void glColor3bv(sbyte* v) {
            Pointers.glColor3bv(v);
        }
        
        public unsafe static void glColor3bv(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glColor3bv(v_);
        }
        
        public unsafe static void glColor3d(double red, double green, double blue) {
            Pointers.glColor3d(red, green, blue);
        }
        
        public unsafe static void glColor3dv(double* v) {
            Pointers.glColor3dv(v);
        }
        
        public unsafe static void glColor3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glColor3dv(v_);
        }
        
        public unsafe static void glColor3f(float red, float green, float blue) {
            Pointers.glColor3f(red, green, blue);
        }
        
        public unsafe static void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z) {
            Pointers.glColor3fVertex3fSUN(r, g, b, x, y, z);
        }
        
        public unsafe static void glColor3fVertex3fvSUN(float* c, float* v) {
            Pointers.glColor3fVertex3fvSUN(c, v);
        }
        
        public unsafe static void glColor3fVertex3fvSUN(float* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glColor3fVertex3fvSUN(c, v_);
        }
        
        public unsafe static void glColor3fVertex3fvSUN(float[] c, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glColor3fVertex3fvSUN(c_, v);
        }
        
        public unsafe static void glColor3fVertex3fvSUN(float[] c, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glColor3fVertex3fvSUN(c_, v_);
        }
        
        public unsafe static void glColor3fv(float* v) {
            Pointers.glColor3fv(v);
        }
        
        public unsafe static void glColor3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glColor3fv(v_);
        }
        
        public unsafe static void glColor3hNV(short red, short green, short blue) {
            Pointers.glColor3hNV(red, green, blue);
        }
        
        public unsafe static void glColor3hvNV(short* v) {
            Pointers.glColor3hvNV(v);
        }
        
        public unsafe static void glColor3hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glColor3hvNV(v_);
        }
        
        public unsafe static void glColor3i(int red, int green, int blue) {
            Pointers.glColor3i(red, green, blue);
        }
        
        public unsafe static void glColor3iv(int* v) {
            Pointers.glColor3iv(v);
        }
        
        public unsafe static void glColor3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glColor3iv(v_);
        }
        
        public unsafe static void glColor3s(short red, short green, short blue) {
            Pointers.glColor3s(red, green, blue);
        }
        
        public unsafe static void glColor3sv(short* v) {
            Pointers.glColor3sv(v);
        }
        
        public unsafe static void glColor3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glColor3sv(v_);
        }
        
        public unsafe static void glColor3ub(byte red, byte green, byte blue) {
            Pointers.glColor3ub(red, green, blue);
        }
        
        public unsafe static void glColor3ubv(byte* v) {
            Pointers.glColor3ubv(v);
        }
        
        public unsafe static void glColor3ubv(byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glColor3ubv(v_);
        }
        
        public unsafe static void glColor3ui(uint red, uint green, uint blue) {
            Pointers.glColor3ui(red, green, blue);
        }
        
        public unsafe static void glColor3uiv(uint* v) {
            Pointers.glColor3uiv(v);
        }
        
        public unsafe static void glColor3uiv(uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glColor3uiv(v_);
        }
        
        public unsafe static void glColor3us(ushort red, ushort green, ushort blue) {
            Pointers.glColor3us(red, green, blue);
        }
        
        public unsafe static void glColor3usv(ushort* v) {
            Pointers.glColor3usv(v);
        }
        
        public unsafe static void glColor3usv(ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glColor3usv(v_);
        }
        
        public unsafe static void glColor3xOES(IntPtr red, IntPtr green, IntPtr blue) {
            Pointers.glColor3xOES(red, green, blue);
        }
        
        public unsafe static void glColor3xvOES(IntPtr* components) {
            Pointers.glColor3xvOES(components);
        }
        
        public unsafe static void glColor3xvOES(IntPtr[] components) {
            fixed(IntPtr* components_ = &components[0])
                Pointers.glColor3xvOES(components_);
        }
        
        public unsafe static void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha) {
            Pointers.glColor4b(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4bv(sbyte* v) {
            Pointers.glColor4bv(v);
        }
        
        public unsafe static void glColor4bv(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glColor4bv(v_);
        }
        
        public unsafe static void glColor4d(double red, double green, double blue, double alpha) {
            Pointers.glColor4d(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4dv(double* v) {
            Pointers.glColor4dv(v);
        }
        
        public unsafe static void glColor4dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glColor4dv(v_);
        }
        
        public unsafe static void glColor4f(float red, float green, float blue, float alpha) {
            Pointers.glColor4f(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v) {
            Pointers.glColor4fNormal3fVertex3fvSUN(c, n, v);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c, n, v_);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float* c, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c, n_, v);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float* c, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c, n_, v_);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float[] c, float* n, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c_, n, v);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float[] c, float* n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c_, n, v_);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float[] c, float[] n, float* v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c_, n_, v);
        }
        
        public unsafe static void glColor4fNormal3fVertex3fvSUN(float[] c, float[] n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glColor4fNormal3fVertex3fvSUN(c_, n_, v_);
        }
        
        public unsafe static void glColor4fv(float* v) {
            Pointers.glColor4fv(v);
        }
        
        public unsafe static void glColor4fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glColor4fv(v_);
        }
        
        public unsafe static void glColor4hNV(short red, short green, short blue, short alpha) {
            Pointers.glColor4hNV(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4hvNV(short* v) {
            Pointers.glColor4hvNV(v);
        }
        
        public unsafe static void glColor4hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glColor4hvNV(v_);
        }
        
        public unsafe static void glColor4i(int red, int green, int blue, int alpha) {
            Pointers.glColor4i(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4iv(int* v) {
            Pointers.glColor4iv(v);
        }
        
        public unsafe static void glColor4iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glColor4iv(v_);
        }
        
        public unsafe static void glColor4s(short red, short green, short blue, short alpha) {
            Pointers.glColor4s(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4sv(short* v) {
            Pointers.glColor4sv(v);
        }
        
        public unsafe static void glColor4sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glColor4sv(v_);
        }
        
        public unsafe static void glColor4ub(byte red, byte green, byte blue, byte alpha) {
            Pointers.glColor4ub(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y) {
            Pointers.glColor4ubVertex2fSUN(r, g, b, a, x, y);
        }
        
        public unsafe static void glColor4ubVertex2fvSUN(byte* c, float* v) {
            Pointers.glColor4ubVertex2fvSUN(c, v);
        }
        
        public unsafe static void glColor4ubVertex2fvSUN(byte* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glColor4ubVertex2fvSUN(c, v_);
        }
        
        public unsafe static void glColor4ubVertex2fvSUN(byte[] c, float* v) {
            fixed(byte* c_ = &c[0])
                Pointers.glColor4ubVertex2fvSUN(c_, v);
        }
        
        public unsafe static void glColor4ubVertex2fvSUN(byte[] c, float[] v) {
            fixed(byte* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glColor4ubVertex2fvSUN(c_, v_);
        }
        
        public unsafe static void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z) {
            Pointers.glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
        }
        
        public unsafe static void glColor4ubVertex3fvSUN(byte* c, float* v) {
            Pointers.glColor4ubVertex3fvSUN(c, v);
        }
        
        public unsafe static void glColor4ubVertex3fvSUN(byte* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glColor4ubVertex3fvSUN(c, v_);
        }
        
        public unsafe static void glColor4ubVertex3fvSUN(byte[] c, float* v) {
            fixed(byte* c_ = &c[0])
                Pointers.glColor4ubVertex3fvSUN(c_, v);
        }
        
        public unsafe static void glColor4ubVertex3fvSUN(byte[] c, float[] v) {
            fixed(byte* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glColor4ubVertex3fvSUN(c_, v_);
        }
        
        public unsafe static void glColor4ubv(byte* v) {
            Pointers.glColor4ubv(v);
        }
        
        public unsafe static void glColor4ubv(byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glColor4ubv(v_);
        }
        
        public unsafe static void glColor4ui(uint red, uint green, uint blue, uint alpha) {
            Pointers.glColor4ui(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4uiv(uint* v) {
            Pointers.glColor4uiv(v);
        }
        
        public unsafe static void glColor4uiv(uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glColor4uiv(v_);
        }
        
        public unsafe static void glColor4us(ushort red, ushort green, ushort blue, ushort alpha) {
            Pointers.glColor4us(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4usv(ushort* v) {
            Pointers.glColor4usv(v);
        }
        
        public unsafe static void glColor4usv(ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glColor4usv(v_);
        }
        
        public unsafe static void glColor4x(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha) {
            Pointers.glColor4x(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4xOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha) {
            Pointers.glColor4xOES(red, green, blue, alpha);
        }
        
        public unsafe static void glColor4xvOES(IntPtr* components) {
            Pointers.glColor4xvOES(components);
        }
        
        public unsafe static void glColor4xvOES(IntPtr[] components) {
            fixed(IntPtr* components_ = &components[0])
                Pointers.glColor4xvOES(components_);
        }
        
        public unsafe static void glColorFormatNV(int size, int type, int stride) {
            Pointers.glColorFormatNV(size, type, stride);
        }
        
        public unsafe static void glColorFragmentOp1ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod) {
            Pointers.glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        public unsafe static void glColorFragmentOp2ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod) {
            Pointers.glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        public unsafe static void glColorFragmentOp3ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod) {
            Pointers.glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        public unsafe static void glColorMask(bool red, bool green, bool blue, bool alpha) {
            Pointers.glColorMask(red, green, blue, alpha);
        }
        
        public unsafe static void glColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a) {
            Pointers.glColorMaskIndexedEXT(index, r, g, b, a);
        }
        
        public unsafe static void glColorMaski(uint index, bool r, bool g, bool b, bool a) {
            Pointers.glColorMaski(index, r, g, b, a);
        }
        
        public unsafe static void glColorMaskiEXT(uint index, bool r, bool g, bool b, bool a) {
            Pointers.glColorMaskiEXT(index, r, g, b, a);
        }
        
        public unsafe static void glColorMaskiOES(uint index, bool r, bool g, bool b, bool a) {
            Pointers.glColorMaskiOES(index, r, g, b, a);
        }
        
        public unsafe static void glColorMaterial(int face, int mode) {
            Pointers.glColorMaterial(face, mode);
        }
        
        public unsafe static void glColorP3ui(int type, uint color) {
            Pointers.glColorP3ui(type, color);
        }
        
        public unsafe static void glColorP3uiv(int type, uint* color) {
            Pointers.glColorP3uiv(type, color);
        }
        
        public unsafe static void glColorP3uiv(int type, out uint color) {
            fixed(uint* color_ = &color)
                Pointers.glColorP3uiv(type, color_);
        }
        
        public unsafe static void glColorP4ui(int type, uint color) {
            Pointers.glColorP4ui(type, color);
        }
        
        public unsafe static void glColorP4uiv(int type, uint* color) {
            Pointers.glColorP4uiv(type, color);
        }
        
        public unsafe static void glColorP4uiv(int type, out uint color) {
            fixed(uint* color_ = &color)
                Pointers.glColorP4uiv(type, color_);
        }
        
        public unsafe static void glColorPointer(int size, int type, int stride, IntPtr pointer) {
            Pointers.glColorPointer(size, type, stride, pointer);
        }
        
        public unsafe static void glColorPointerEXT(int size, int type, int stride, int count, IntPtr pointer) {
            Pointers.glColorPointerEXT(size, type, stride, count, pointer);
        }
        
        public unsafe static void glColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glColorPointerListIBM(int size, int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glColorPointerListIBM(size, type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glColorPointervINTEL(int size, int type, IntPtr* pointer) {
            Pointers.glColorPointervINTEL(size, type, pointer);
        }
        
        public unsafe static void glColorPointervINTEL(int size, int type, IntPtr[] pointer) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glColorPointervINTEL(size, type, pointer_);
        }
        
        public unsafe static void glColorSubTable(int target, int start, int count, int format, int type, IntPtr data) {
            Pointers.glColorSubTable(target, start, count, format, type, data);
        }
        
        public unsafe static void glColorSubTableEXT(int target, int start, int count, int format, int type, IntPtr data) {
            Pointers.glColorSubTableEXT(target, start, count, format, type, data);
        }
        
        public unsafe static void glColorTable(int target, int internalformat, int width, int format, int type, IntPtr table) {
            Pointers.glColorTable(target, internalformat, width, format, type, table);
        }
        
        public unsafe static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, IntPtr table) {
            Pointers.glColorTableEXT(target, internalFormat, width, format, type, table);
        }
        
        public unsafe static void glColorTableParameterfv(int target, int pname, float* _params) {
            Pointers.glColorTableParameterfv(target, pname, _params);
        }
        
        public unsafe static void glColorTableParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glColorTableParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glColorTableParameterfvSGI(int target, int pname, float* _params) {
            Pointers.glColorTableParameterfvSGI(target, pname, _params);
        }
        
        public unsafe static void glColorTableParameterfvSGI(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glColorTableParameterfvSGI(target, pname, _params_);
        }
        
        public unsafe static void glColorTableParameteriv(int target, int pname, int* _params) {
            Pointers.glColorTableParameteriv(target, pname, _params);
        }
        
        public unsafe static void glColorTableParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glColorTableParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glColorTableParameterivSGI(int target, int pname, int* _params) {
            Pointers.glColorTableParameterivSGI(target, pname, _params);
        }
        
        public unsafe static void glColorTableParameterivSGI(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glColorTableParameterivSGI(target, pname, _params_);
        }
        
        public unsafe static void glColorTableSGI(int target, int internalformat, int width, int format, int type, IntPtr table) {
            Pointers.glColorTableSGI(target, internalformat, width, format, type, table);
        }
        
        public unsafe static void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage) {
            Pointers.glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
        }
        
        public unsafe static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, bool muxSum) {
            Pointers.glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }
        
        public unsafe static void glCombinerParameterfNV(int pname, float param) {
            Pointers.glCombinerParameterfNV(pname, param);
        }
        
        public unsafe static void glCombinerParameterfvNV(int pname, float* _params) {
            Pointers.glCombinerParameterfvNV(pname, _params);
        }
        
        public unsafe static void glCombinerParameterfvNV(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glCombinerParameterfvNV(pname, _params_);
        }
        
        public unsafe static void glCombinerParameteriNV(int pname, int param) {
            Pointers.glCombinerParameteriNV(pname, param);
        }
        
        public unsafe static void glCombinerParameterivNV(int pname, int* _params) {
            Pointers.glCombinerParameterivNV(pname, _params);
        }
        
        public unsafe static void glCombinerParameterivNV(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glCombinerParameterivNV(pname, _params_);
        }
        
        public unsafe static void glCombinerStageParameterfvNV(int stage, int pname, float* _params) {
            Pointers.glCombinerStageParameterfvNV(stage, pname, _params);
        }
        
        public unsafe static void glCombinerStageParameterfvNV(int stage, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glCombinerStageParameterfvNV(stage, pname, _params_);
        }
        
        public unsafe static void glCommandListSegmentsNV(uint list, uint segments) {
            Pointers.glCommandListSegmentsNV(list, segments);
        }
        
        public unsafe static void glCompileCommandListNV(uint list) {
            Pointers.glCompileCommandListNV(list);
        }
        
        public unsafe static void glCompileShader(uint shader) {
            Pointers.glCompileShader(shader);
        }
        
        public unsafe static void glCompileShaderARB(uint shaderObj) {
            Pointers.glCompileShaderARB(shaderObj);
        }
        
        public unsafe static void glCompileShaderIncludeARB(uint shader, int count, string[] path, int* length) {
            Pointers.glCompileShaderIncludeARB(shader, count, path, length);
        }
        
        public unsafe static void glCompileShaderIncludeARB(uint shader, int count, string[] path, int[] length) {
            fixed(int* length_ = &length[0])
                Pointers.glCompileShaderIncludeARB(shader, count, path, length_);
        }
        
        public unsafe static void glCompressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr bits) {
            Pointers.glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
        }
        
        public unsafe static void glCompressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr bits) {
            Pointers.glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        }
        
        public unsafe static void glCompressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits) {
            Pointers.glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        }
        
        public unsafe static void glCompressedMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr bits) {
            Pointers.glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
        }
        
        public unsafe static void glCompressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr bits) {
            Pointers.glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        }
        
        public unsafe static void glCompressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr bits) {
            Pointers.glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        }
        
        public unsafe static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) {
            Pointers.glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr bits) {
            Pointers.glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
        }
        
        public unsafe static void glCompressedTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr bits) {
            Pointers.glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
        }
        
        public unsafe static void glCompressedTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits) {
            Pointers.glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        }
        
        public unsafe static void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr bits) {
            Pointers.glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
        }
        
        public unsafe static void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr bits) {
            Pointers.glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        }
        
        public unsafe static void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) {
            Pointers.glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        public unsafe static void glCompressedTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr bits) {
            Pointers.glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        }
        
        public unsafe static void glConservativeRasterParameterfNV(int pname, float value) {
            Pointers.glConservativeRasterParameterfNV(pname, value);
        }
        
        public unsafe static void glConservativeRasterParameteriNV(int pname, int param) {
            Pointers.glConservativeRasterParameteriNV(pname, param);
        }
        
        public unsafe static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, IntPtr image) {
            Pointers.glConvolutionFilter1D(target, internalformat, width, format, type, image);
        }
        
        public unsafe static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, IntPtr image) {
            Pointers.glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
        }
        
        public unsafe static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr image) {
            Pointers.glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
        }
        
        public unsafe static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr image) {
            Pointers.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
        }
        
        public unsafe static void glConvolutionParameterf(int target, int pname, float _params) {
            Pointers.glConvolutionParameterf(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameterfEXT(int target, int pname, float _params) {
            Pointers.glConvolutionParameterfEXT(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameterfv(int target, int pname, float* _params) {
            Pointers.glConvolutionParameterfv(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glConvolutionParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glConvolutionParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glConvolutionParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameterfvEXT(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glConvolutionParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glConvolutionParameteri(int target, int pname, int _params) {
            Pointers.glConvolutionParameteri(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameteriEXT(int target, int pname, int _params) {
            Pointers.glConvolutionParameteriEXT(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameteriv(int target, int pname, int* _params) {
            Pointers.glConvolutionParameteriv(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glConvolutionParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glConvolutionParameterivEXT(int target, int pname, int* _params) {
            Pointers.glConvolutionParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glConvolutionParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glConvolutionParameterxOES(int target, int pname, IntPtr param) {
            Pointers.glConvolutionParameterxOES(target, pname, param);
        }
        
        public unsafe static void glConvolutionParameterxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glConvolutionParameterxvOES(target, pname, _params);
        }
        
        public unsafe static void glConvolutionParameterxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glConvolutionParameterxvOES(target, pname, _params_);
        }
        
        public unsafe static void glCopyBufferSubData(int readTarget, int writeTarget, uint readOffset, uint writeOffset, uint size) {
            Pointers.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        public unsafe static void glCopyBufferSubDataNV(int readTarget, int writeTarget, uint readOffset, uint writeOffset, uint size) {
            Pointers.glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        public unsafe static void glCopyColorSubTable(int target, int start, int x, int y, int width) {
            Pointers.glCopyColorSubTable(target, start, x, y, width);
        }
        
        public unsafe static void glCopyColorSubTableEXT(int target, int start, int x, int y, int width) {
            Pointers.glCopyColorSubTableEXT(target, start, x, y, width);
        }
        
        public unsafe static void glCopyColorTable(int target, int internalformat, int x, int y, int width) {
            Pointers.glCopyColorTable(target, internalformat, x, y, width);
        }
        
        public unsafe static void glCopyColorTableSGI(int target, int internalformat, int x, int y, int width) {
            Pointers.glCopyColorTableSGI(target, internalformat, x, y, width);
        }
        
        public unsafe static void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width) {
            Pointers.glCopyConvolutionFilter1D(target, internalformat, x, y, width);
        }
        
        public unsafe static void glCopyConvolutionFilter1DEXT(int target, int internalformat, int x, int y, int width) {
            Pointers.glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
        }
        
        public unsafe static void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height) {
            Pointers.glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
        }
        
        public unsafe static void glCopyConvolutionFilter2DEXT(int target, int internalformat, int x, int y, int width, int height) {
            Pointers.glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
        }
        
        public unsafe static void glCopyImageSubData(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
            Pointers.glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public unsafe static void glCopyImageSubDataEXT(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
            Pointers.glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public unsafe static void glCopyImageSubDataNV(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) {
            Pointers.glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        public unsafe static void glCopyImageSubDataOES(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
            Pointers.glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public unsafe static void glCopyMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int border) {
            Pointers.glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
        }
        
        public unsafe static void glCopyMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border) {
            Pointers.glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
        }
        
        public unsafe static void glCopyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width) {
            Pointers.glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
        }
        
        public unsafe static void glCopyMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            Pointers.glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            Pointers.glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size) {
            Pointers.glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public unsafe static void glCopyPathNV(uint resultPath, uint srcPath) {
            Pointers.glCopyPathNV(resultPath, srcPath);
        }
        
        public unsafe static void glCopyPixels(int x, int y, int width, int height, int type) {
            Pointers.glCopyPixels(x, y, width, height, type);
        }
        
        public unsafe static void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border) {
            Pointers.glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }
        
        public unsafe static void glCopyTexImage1DEXT(int target, int level, int internalformat, int x, int y, int width, int border) {
            Pointers.glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
        }
        
        public unsafe static void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border) {
            Pointers.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }
        
        public unsafe static void glCopyTexImage2DEXT(int target, int level, int internalformat, int x, int y, int width, int height, int border) {
            Pointers.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
        }
        
        public unsafe static void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width) {
            Pointers.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }
        
        public unsafe static void glCopyTexSubImage1DEXT(int target, int level, int xoffset, int x, int y, int width) {
            Pointers.glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
        }
        
        public unsafe static void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            Pointers.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            Pointers.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            Pointers.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            Pointers.glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            Pointers.glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTextureImage1DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int border) {
            Pointers.glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
        }
        
        public unsafe static void glCopyTextureImage2DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int height, int border) {
            Pointers.glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
        }
        
        public unsafe static void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount) {
            Pointers.glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        }
        
        public unsafe static void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width) {
            Pointers.glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
        }
        
        public unsafe static void glCopyTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int x, int y, int width) {
            Pointers.glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
        }
        
        public unsafe static void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            Pointers.glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            Pointers.glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            Pointers.glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public unsafe static void glCopyTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            Pointers.glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public unsafe static void glCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues) {
            Pointers.glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        }
        
        public unsafe static void glCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues_);
        }
        
        public unsafe static void glCoverFillPathNV(uint path, int coverMode) {
            Pointers.glCoverFillPathNV(path, coverMode);
        }
        
        public unsafe static void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues) {
            Pointers.glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        }
        
        public unsafe static void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues_);
        }
        
        public unsafe static void glCoverStrokePathNV(uint path, int coverMode) {
            Pointers.glCoverStrokePathNV(path, coverMode);
        }
        
        public unsafe static void glCoverageMaskNV(bool mask) {
            Pointers.glCoverageMaskNV(mask);
        }
        
        public unsafe static void glCoverageModulationNV(int components) {
            Pointers.glCoverageModulationNV(components);
        }
        
        public unsafe static void glCoverageModulationTableNV(int n, float* v) {
            Pointers.glCoverageModulationTableNV(n, v);
        }
        
        public unsafe static void glCoverageModulationTableNV(int n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glCoverageModulationTableNV(n, v_);
        }
        
        public unsafe static void glCoverageOperationNV(int operation) {
            Pointers.glCoverageOperationNV(operation);
        }
        
        public unsafe static void glCreateBuffers(int n, uint* buffers) {
            Pointers.glCreateBuffers(n, buffers);
        }
        
        public unsafe static void glCreateBuffers(int n, uint[] buffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glCreateBuffers(n, buffers_);
        }
        
        public static uint glCreateBuffer() {
            var buffers_ = new uint[1];
            glCreateBuffers(1, buffers_);
            return buffers_[0];
        }
        
        public unsafe static void glCreateCommandListsNV(int n, uint* lists) {
            Pointers.glCreateCommandListsNV(n, lists);
        }
        
        public unsafe static void glCreateCommandListsNV(int n, uint[] lists) {
            fixed(uint* lists_ = &lists[0])
                Pointers.glCreateCommandListsNV(n, lists_);
        }
        
        public static uint glCreateCommandListsNV() {
            var lists_ = new uint[1];
            glCreateCommandListsNV(1, lists_);
            return lists_[0];
        }
        
        public unsafe static void glCreateFramebuffers(int n, uint* framebuffers) {
            Pointers.glCreateFramebuffers(n, framebuffers);
        }
        
        public unsafe static void glCreateFramebuffers(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glCreateFramebuffers(n, framebuffers_);
        }
        
        public static uint glCreateFramebuffer() {
            var framebuffers_ = new uint[1];
            glCreateFramebuffers(1, framebuffers_);
            return framebuffers_[0];
        }
        
        public unsafe static void glCreateMemoryObjectsEXT(int n, uint* memoryObjects) {
            Pointers.glCreateMemoryObjectsEXT(n, memoryObjects);
        }
        
        public unsafe static void glCreateMemoryObjectsEXT(int n, uint[] memoryObjects) {
            fixed(uint* memoryObjects_ = &memoryObjects[0])
                Pointers.glCreateMemoryObjectsEXT(n, memoryObjects_);
        }
        
        public unsafe static void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle) {
            Pointers.glCreatePerfQueryINTEL(queryId, queryHandle);
        }
        
        public unsafe static void glCreatePerfQueryINTEL(uint queryId, uint[] queryHandle) {
            fixed(uint* queryHandle_ = &queryHandle[0])
                Pointers.glCreatePerfQueryINTEL(queryId, queryHandle_);
        }
        
        public unsafe static uint glCreateProgram() {
            return Pointers.glCreateProgram();
        }
        
        public unsafe static uint glCreateProgramObjectARB() {
            return Pointers.glCreateProgramObjectARB();
        }
        
        public unsafe static void glCreateProgramPipelines(int n, uint* pipelines) {
            Pointers.glCreateProgramPipelines(n, pipelines);
        }
        
        public unsafe static void glCreateProgramPipelines(int n, uint[] pipelines) {
            fixed(uint* pipelines_ = &pipelines[0])
                Pointers.glCreateProgramPipelines(n, pipelines_);
        }
        
        public static uint glCreateProgramPipeline() {
            var pipelines_ = new uint[1];
            glCreateProgramPipelines(1, pipelines_);
            return pipelines_[0];
        }
        
        public unsafe static void glCreateQueries(int target, int n, uint* ids) {
            Pointers.glCreateQueries(target, n, ids);
        }
        
        public unsafe static void glCreateQueries(int target, int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glCreateQueries(target, n, ids_);
        }
        
        public unsafe static void glCreateRenderbuffers(int n, uint* renderbuffers) {
            Pointers.glCreateRenderbuffers(n, renderbuffers);
        }
        
        public unsafe static void glCreateRenderbuffers(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glCreateRenderbuffers(n, renderbuffers_);
        }
        
        public static uint glCreateRenderbuffer() {
            var renderbuffers_ = new uint[1];
            glCreateRenderbuffers(1, renderbuffers_);
            return renderbuffers_[0];
        }
        
        public unsafe static void glCreateSamplers(int n, uint* samplers) {
            Pointers.glCreateSamplers(n, samplers);
        }
        
        public unsafe static void glCreateSamplers(int n, uint[] samplers) {
            fixed(uint* samplers_ = &samplers[0])
                Pointers.glCreateSamplers(n, samplers_);
        }
        
        public static uint glCreateSampler() {
            var samplers_ = new uint[1];
            glCreateSamplers(1, samplers_);
            return samplers_[0];
        }
        
        public unsafe static uint glCreateShader(int type) {
            return Pointers.glCreateShader(type);
        }
        
        public unsafe static uint glCreateShader(Enums.ShaderType type) {
            return Pointers.glCreateShader((int)type);
        }
        
        public unsafe static uint glCreateShaderObjectARB(int shaderType) {
            return Pointers.glCreateShaderObjectARB(shaderType);
        }
        
        public unsafe static uint glCreateShaderObjectARB(Enums.ShaderType shaderType) {
            return Pointers.glCreateShaderObjectARB((int)shaderType);
        }
        
        public unsafe static uint glCreateShaderProgramEXT(int type, string _string) {
            return Pointers.glCreateShaderProgramEXT(type, _string);
        }
        
        public unsafe static uint glCreateShaderProgramEXT(Enums.ShaderType type, string _string) {
            return Pointers.glCreateShaderProgramEXT((int)type, _string);
        }
        
        public unsafe static uint glCreateShaderProgramv(int type, int count, string[] strings) {
            return Pointers.glCreateShaderProgramv(type, count, strings);
        }
        
        public unsafe static uint glCreateShaderProgramv(Enums.ShaderType type, int count, string[] strings) {
            return Pointers.glCreateShaderProgramv((int)type, count, strings);
        }
        
        public unsafe static uint glCreateShaderProgramvEXT(int type, int count, string[] strings) {
            return Pointers.glCreateShaderProgramvEXT(type, count, strings);
        }
        
        public unsafe static uint glCreateShaderProgramvEXT(Enums.ShaderType type, int count, string[] strings) {
            return Pointers.glCreateShaderProgramvEXT((int)type, count, strings);
        }
        
        public unsafe static void glCreateStatesNV(int n, uint* states) {
            Pointers.glCreateStatesNV(n, states);
        }
        
        public unsafe static void glCreateStatesNV(int n, uint[] states) {
            fixed(uint* states_ = &states[0])
                Pointers.glCreateStatesNV(n, states_);
        }
        
        public static uint glCreateStatesNV() {
            var states_ = new uint[1];
            glCreateStatesNV(1, states_);
            return states_[0];
        }
        
        public unsafe static IntPtr glCreateSyncFromCLeventARB(IntPtr context, IntPtr _event, uint flags) {
            return Pointers.glCreateSyncFromCLeventARB(context, _event, flags);
        }
        
        public unsafe static void glCreateTextures(int target, int n, uint* textures) {
            Pointers.glCreateTextures(target, n, textures);
        }
        
        public unsafe static void glCreateTextures(int target, int n, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glCreateTextures(target, n, textures_);
        }
        
        public unsafe static void glCreateTransformFeedbacks(int n, uint* ids) {
            Pointers.glCreateTransformFeedbacks(n, ids);
        }
        
        public unsafe static void glCreateTransformFeedbacks(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glCreateTransformFeedbacks(n, ids_);
        }
        
        public static uint glCreateTransformFeedback() {
            var ids_ = new uint[1];
            glCreateTransformFeedbacks(1, ids_);
            return ids_[0];
        }
        
        public unsafe static void glCreateVertexArrays(int n, uint* arrays) {
            Pointers.glCreateVertexArrays(n, arrays);
        }
        
        public unsafe static void glCreateVertexArrays(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glCreateVertexArrays(n, arrays_);
        }
        
        public static uint glCreateVertexArray() {
            var arrays_ = new uint[1];
            glCreateVertexArrays(1, arrays_);
            return arrays_[0];
        }
        
        public unsafe static void glCullFace(int mode) {
            Pointers.glCullFace(mode);
        }
        
        public unsafe static void glCullParameterdvEXT(int pname, double* _params) {
            Pointers.glCullParameterdvEXT(pname, _params);
        }
        
        public unsafe static void glCullParameterdvEXT(int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glCullParameterdvEXT(pname, _params_);
        }
        
        public unsafe static void glCullParameterfvEXT(int pname, float* _params) {
            Pointers.glCullParameterfvEXT(pname, _params);
        }
        
        public unsafe static void glCullParameterfvEXT(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glCullParameterfvEXT(pname, _params_);
        }
        
        public unsafe static void glCurrentPaletteMatrixARB(int index) {
            Pointers.glCurrentPaletteMatrixARB(index);
        }
        
        public unsafe static void glCurrentPaletteMatrixOES(uint matrixpaletteindex) {
            Pointers.glCurrentPaletteMatrixOES(matrixpaletteindex);
        }
        
        public unsafe static void glDebugMessageCallback(IntPtr callback, IntPtr userParam) {
            Pointers.glDebugMessageCallback(callback, userParam);
        }
        
        public unsafe static void glDebugMessageCallbackAMD(IntPtr callback, IntPtr userParam) {
            Pointers.glDebugMessageCallbackAMD(callback, userParam);
        }
        
        public unsafe static void glDebugMessageCallbackARB(IntPtr callback, IntPtr userParam) {
            Pointers.glDebugMessageCallbackARB(callback, userParam);
        }
        
        public unsafe static void glDebugMessageCallbackKHR(IntPtr callback, IntPtr userParam) {
            Pointers.glDebugMessageCallbackKHR(callback, userParam);
        }
        
        public unsafe static void glDebugMessageControl(int source, int type, int severity, int count, uint* ids, bool enabled) {
            Pointers.glDebugMessageControl(source, type, severity, count, ids, enabled);
        }
        
        public unsafe static void glDebugMessageControl(int source, int type, int severity, int count, uint[] ids, bool enabled) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDebugMessageControl(source, type, severity, count, ids_, enabled);
        }
        
        public unsafe static void glDebugMessageControlARB(int source, int type, int severity, int count, uint* ids, bool enabled) {
            Pointers.glDebugMessageControlARB(source, type, severity, count, ids, enabled);
        }
        
        public unsafe static void glDebugMessageControlARB(int source, int type, int severity, int count, uint[] ids, bool enabled) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDebugMessageControlARB(source, type, severity, count, ids_, enabled);
        }
        
        public unsafe static void glDebugMessageControlKHR(int source, int type, int severity, int count, uint* ids, bool enabled) {
            Pointers.glDebugMessageControlKHR(source, type, severity, count, ids, enabled);
        }
        
        public unsafe static void glDebugMessageControlKHR(int source, int type, int severity, int count, uint[] ids, bool enabled) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDebugMessageControlKHR(source, type, severity, count, ids_, enabled);
        }
        
        public unsafe static void glDebugMessageEnableAMD(int category, int severity, int count, uint* ids, bool enabled) {
            Pointers.glDebugMessageEnableAMD(category, severity, count, ids, enabled);
        }
        
        public unsafe static void glDebugMessageEnableAMD(int category, int severity, int count, uint[] ids, bool enabled) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDebugMessageEnableAMD(category, severity, count, ids_, enabled);
        }
        
        public unsafe static void glDebugMessageInsert(int source, int type, uint id, int severity, int length, string buf) {
            Pointers.glDebugMessageInsert(source, type, id, severity, length, buf);
        }
        
        public unsafe static void glDebugMessageInsertAMD(int category, int severity, uint id, int length, string buf) {
            Pointers.glDebugMessageInsertAMD(category, severity, id, length, buf);
        }
        
        public unsafe static void glDebugMessageInsertARB(int source, int type, uint id, int severity, int length, string buf) {
            Pointers.glDebugMessageInsertARB(source, type, id, severity, length, buf);
        }
        
        public unsafe static void glDebugMessageInsertKHR(int source, int type, uint id, int severity, int length, string buf) {
            Pointers.glDebugMessageInsertKHR(source, type, id, severity, length, buf);
        }
        
        public unsafe static void glDeformSGIX(uint mask) {
            Pointers.glDeformSGIX(mask);
        }
        
        public unsafe static void glDeformSGIX(Enums.FfdMaskSGIX mask) {
            Pointers.glDeformSGIX((uint)mask);
        }
        
        public unsafe static void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points) {
            Pointers.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        
        public unsafe static void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points) {
            fixed(double* points_ = &points[0])
                Pointers.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_);
        }
        
        public unsafe static void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points) {
            Pointers.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        
        public unsafe static void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_);
        }
        
        public unsafe static void glDeleteAsyncMarkersSGIX(uint marker, int range) {
            Pointers.glDeleteAsyncMarkersSGIX(marker, range);
        }
        
        public unsafe static void glDeleteBuffers(int n, uint* buffers) {
            Pointers.glDeleteBuffers(n, buffers);
        }
        
        public unsafe static void glDeleteBuffers(int n, uint[] buffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glDeleteBuffers(n, buffers_);
        }
        
        public unsafe static void glDeleteBuffersARB(int n, uint* buffers) {
            Pointers.glDeleteBuffersARB(n, buffers);
        }
        
        public unsafe static void glDeleteBuffersARB(int n, uint[] buffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glDeleteBuffersARB(n, buffers_);
        }
        
        public unsafe static void glDeleteCommandListsNV(int n, uint* lists) {
            Pointers.glDeleteCommandListsNV(n, lists);
        }
        
        public unsafe static void glDeleteCommandListsNV(int n, uint[] lists) {
            fixed(uint* lists_ = &lists[0])
                Pointers.glDeleteCommandListsNV(n, lists_);
        }
        
        public unsafe static void glDeleteFencesAPPLE(int n, uint* fences) {
            Pointers.glDeleteFencesAPPLE(n, fences);
        }
        
        public unsafe static void glDeleteFencesAPPLE(int n, uint[] fences) {
            fixed(uint* fences_ = &fences[0])
                Pointers.glDeleteFencesAPPLE(n, fences_);
        }
        
        public unsafe static void glDeleteFencesNV(int n, uint* fences) {
            Pointers.glDeleteFencesNV(n, fences);
        }
        
        public unsafe static void glDeleteFencesNV(int n, uint[] fences) {
            fixed(uint* fences_ = &fences[0])
                Pointers.glDeleteFencesNV(n, fences_);
        }
        
        public unsafe static void glDeleteFragmentShaderATI(uint id) {
            Pointers.glDeleteFragmentShaderATI(id);
        }
        
        public unsafe static void glDeleteFramebuffers(int n, uint* framebuffers) {
            Pointers.glDeleteFramebuffers(n, framebuffers);
        }
        
        public unsafe static void glDeleteFramebuffers(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glDeleteFramebuffers(n, framebuffers_);
        }
        
        public unsafe static void glDeleteFramebuffersEXT(int n, uint* framebuffers) {
            Pointers.glDeleteFramebuffersEXT(n, framebuffers);
        }
        
        public unsafe static void glDeleteFramebuffersEXT(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glDeleteFramebuffersEXT(n, framebuffers_);
        }
        
        public unsafe static void glDeleteFramebuffersOES(int n, uint* framebuffers) {
            Pointers.glDeleteFramebuffersOES(n, framebuffers);
        }
        
        public unsafe static void glDeleteFramebuffersOES(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glDeleteFramebuffersOES(n, framebuffers_);
        }
        
        public unsafe static void glDeleteLists(uint list, int range) {
            Pointers.glDeleteLists(list, range);
        }
        
        public unsafe static void glDeleteMemoryObjectsEXT(int n, uint* memoryObjects) {
            Pointers.glDeleteMemoryObjectsEXT(n, memoryObjects);
        }
        
        public unsafe static void glDeleteMemoryObjectsEXT(int n, uint[] memoryObjects) {
            fixed(uint* memoryObjects_ = &memoryObjects[0])
                Pointers.glDeleteMemoryObjectsEXT(n, memoryObjects_);
        }
        
        public unsafe static void glDeleteNamedStringARB(int namelen, string name) {
            Pointers.glDeleteNamedStringARB(namelen, name);
        }
        
        public unsafe static void glDeleteNamesAMD(int identifier, uint num, uint* names) {
            Pointers.glDeleteNamesAMD(identifier, num, names);
        }
        
        public unsafe static void glDeleteNamesAMD(int identifier, uint num, uint[] names) {
            fixed(uint* names_ = &names[0])
                Pointers.glDeleteNamesAMD(identifier, num, names_);
        }
        
        public unsafe static void glDeleteObjectARB(uint obj) {
            Pointers.glDeleteObjectARB(obj);
        }
        
        public unsafe static void glDeleteOcclusionQueriesNV(int n, uint* ids) {
            Pointers.glDeleteOcclusionQueriesNV(n, ids);
        }
        
        public unsafe static void glDeleteOcclusionQueriesNV(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDeleteOcclusionQueriesNV(n, ids_);
        }
        
        public unsafe static void glDeletePathsNV(uint path, int range) {
            Pointers.glDeletePathsNV(path, range);
        }
        
        public unsafe static void glDeletePerfMonitorsAMD(int n, uint* monitors) {
            Pointers.glDeletePerfMonitorsAMD(n, monitors);
        }
        
        public unsafe static void glDeletePerfMonitorsAMD(int n, uint[] monitors) {
            fixed(uint* monitors_ = &monitors[0])
                Pointers.glDeletePerfMonitorsAMD(n, monitors_);
        }
        
        public unsafe static void glDeletePerfQueryINTEL(uint queryHandle) {
            Pointers.glDeletePerfQueryINTEL(queryHandle);
        }
        
        public unsafe static void glDeleteProgram(uint program) {
            Pointers.glDeleteProgram(program);
        }
        
        public unsafe static void glDeleteProgramPipelines(int n, uint* pipelines) {
            Pointers.glDeleteProgramPipelines(n, pipelines);
        }
        
        public unsafe static void glDeleteProgramPipelines(int n, uint[] pipelines) {
            fixed(uint* pipelines_ = &pipelines[0])
                Pointers.glDeleteProgramPipelines(n, pipelines_);
        }
        
        public unsafe static void glDeleteProgramPipelinesEXT(int n, uint* pipelines) {
            Pointers.glDeleteProgramPipelinesEXT(n, pipelines);
        }
        
        public unsafe static void glDeleteProgramPipelinesEXT(int n, uint[] pipelines) {
            fixed(uint* pipelines_ = &pipelines[0])
                Pointers.glDeleteProgramPipelinesEXT(n, pipelines_);
        }
        
        public unsafe static void glDeleteProgramsARB(int n, uint* programs) {
            Pointers.glDeleteProgramsARB(n, programs);
        }
        
        public unsafe static void glDeleteProgramsARB(int n, uint[] programs) {
            fixed(uint* programs_ = &programs[0])
                Pointers.glDeleteProgramsARB(n, programs_);
        }
        
        public unsafe static void glDeleteProgramsNV(int n, uint* programs) {
            Pointers.glDeleteProgramsNV(n, programs);
        }
        
        public unsafe static void glDeleteProgramsNV(int n, uint[] programs) {
            fixed(uint* programs_ = &programs[0])
                Pointers.glDeleteProgramsNV(n, programs_);
        }
        
        public unsafe static void glDeleteQueries(int n, uint* ids) {
            Pointers.glDeleteQueries(n, ids);
        }
        
        public unsafe static void glDeleteQueries(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDeleteQueries(n, ids_);
        }
        
        public unsafe static void glDeleteQueriesARB(int n, uint* ids) {
            Pointers.glDeleteQueriesARB(n, ids);
        }
        
        public unsafe static void glDeleteQueriesARB(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDeleteQueriesARB(n, ids_);
        }
        
        public unsafe static void glDeleteQueriesEXT(int n, uint* ids) {
            Pointers.glDeleteQueriesEXT(n, ids);
        }
        
        public unsafe static void glDeleteQueriesEXT(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDeleteQueriesEXT(n, ids_);
        }
        
        public unsafe static void glDeleteQueryResourceTagNV(int n, int* tagIds) {
            Pointers.glDeleteQueryResourceTagNV(n, tagIds);
        }
        
        public unsafe static void glDeleteQueryResourceTagNV(int n, int[] tagIds) {
            fixed(int* tagIds_ = &tagIds[0])
                Pointers.glDeleteQueryResourceTagNV(n, tagIds_);
        }
        
        public unsafe static void glDeleteRenderbuffers(int n, uint* renderbuffers) {
            Pointers.glDeleteRenderbuffers(n, renderbuffers);
        }
        
        public unsafe static void glDeleteRenderbuffers(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glDeleteRenderbuffers(n, renderbuffers_);
        }
        
        public unsafe static void glDeleteRenderbuffersEXT(int n, uint* renderbuffers) {
            Pointers.glDeleteRenderbuffersEXT(n, renderbuffers);
        }
        
        public unsafe static void glDeleteRenderbuffersEXT(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glDeleteRenderbuffersEXT(n, renderbuffers_);
        }
        
        public unsafe static void glDeleteRenderbuffersOES(int n, uint* renderbuffers) {
            Pointers.glDeleteRenderbuffersOES(n, renderbuffers);
        }
        
        public unsafe static void glDeleteRenderbuffersOES(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glDeleteRenderbuffersOES(n, renderbuffers_);
        }
        
        public unsafe static void glDeleteSamplers(int count, uint* samplers) {
            Pointers.glDeleteSamplers(count, samplers);
        }
        
        public unsafe static void glDeleteSamplers(int count, uint[] samplers) {
            fixed(uint* samplers_ = &samplers[0])
                Pointers.glDeleteSamplers(count, samplers_);
        }
        
        public unsafe static void glDeleteSemaphoresEXT(int n, uint* semaphores) {
            Pointers.glDeleteSemaphoresEXT(n, semaphores);
        }
        
        public unsafe static void glDeleteSemaphoresEXT(int n, uint[] semaphores) {
            fixed(uint* semaphores_ = &semaphores[0])
                Pointers.glDeleteSemaphoresEXT(n, semaphores_);
        }
        
        public unsafe static void glDeleteShader(uint shader) {
            Pointers.glDeleteShader(shader);
        }
        
        public unsafe static void glDeleteStatesNV(int n, uint* states) {
            Pointers.glDeleteStatesNV(n, states);
        }
        
        public unsafe static void glDeleteStatesNV(int n, uint[] states) {
            fixed(uint* states_ = &states[0])
                Pointers.glDeleteStatesNV(n, states_);
        }
        
        public unsafe static void glDeleteSync(IntPtr sync) {
            Pointers.glDeleteSync(sync);
        }
        
        public unsafe static void glDeleteSyncAPPLE(IntPtr sync) {
            Pointers.glDeleteSyncAPPLE(sync);
        }
        
        public unsafe static void glDeleteTextures(int n, uint* textures) {
            Pointers.glDeleteTextures(n, textures);
        }
        
        public unsafe static void glDeleteTextures(int n, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glDeleteTextures(n, textures_);
        }
        
        public unsafe static void glDeleteTexturesEXT(int n, uint* textures) {
            Pointers.glDeleteTexturesEXT(n, textures);
        }
        
        public unsafe static void glDeleteTexturesEXT(int n, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glDeleteTexturesEXT(n, textures_);
        }
        
        public unsafe static void glDeleteTransformFeedbacks(int n, uint* ids) {
            Pointers.glDeleteTransformFeedbacks(n, ids);
        }
        
        public unsafe static void glDeleteTransformFeedbacks(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDeleteTransformFeedbacks(n, ids_);
        }
        
        public unsafe static void glDeleteTransformFeedbacksNV(int n, uint* ids) {
            Pointers.glDeleteTransformFeedbacksNV(n, ids);
        }
        
        public unsafe static void glDeleteTransformFeedbacksNV(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glDeleteTransformFeedbacksNV(n, ids_);
        }
        
        public unsafe static void glDeleteVertexArrays(int n, uint* arrays) {
            Pointers.glDeleteVertexArrays(n, arrays);
        }
        
        public unsafe static void glDeleteVertexArrays(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glDeleteVertexArrays(n, arrays_);
        }
        
        public unsafe static void glDeleteVertexArraysAPPLE(int n, uint* arrays) {
            Pointers.glDeleteVertexArraysAPPLE(n, arrays);
        }
        
        public unsafe static void glDeleteVertexArraysAPPLE(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glDeleteVertexArraysAPPLE(n, arrays_);
        }
        
        public unsafe static void glDeleteVertexArraysOES(int n, uint* arrays) {
            Pointers.glDeleteVertexArraysOES(n, arrays);
        }
        
        public unsafe static void glDeleteVertexArraysOES(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glDeleteVertexArraysOES(n, arrays_);
        }
        
        public unsafe static void glDeleteVertexShaderEXT(uint id) {
            Pointers.glDeleteVertexShaderEXT(id);
        }
        
        public unsafe static void glDepthBoundsEXT(double zmin, double zmax) {
            Pointers.glDepthBoundsEXT(zmin, zmax);
        }
        
        public unsafe static void glDepthBoundsdNV(double zmin, double zmax) {
            Pointers.glDepthBoundsdNV(zmin, zmax);
        }
        
        public unsafe static void glDepthFunc(int func) {
            Pointers.glDepthFunc(func);
        }
        
        public unsafe static void glDepthMask(bool flag) {
            Pointers.glDepthMask(flag);
        }
        
        public unsafe static void glDepthRange(double n, double f) {
            Pointers.glDepthRange(n, f);
        }
        
        public unsafe static void glDepthRangeArrayfvNV(uint first, int count, float* v) {
            Pointers.glDepthRangeArrayfvNV(first, count, v);
        }
        
        public unsafe static void glDepthRangeArrayfvNV(uint first, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glDepthRangeArrayfvNV(first, count, v_);
        }
        
        public unsafe static void glDepthRangeArrayfvOES(uint first, int count, float* v) {
            Pointers.glDepthRangeArrayfvOES(first, count, v);
        }
        
        public unsafe static void glDepthRangeArrayfvOES(uint first, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glDepthRangeArrayfvOES(first, count, v_);
        }
        
        public unsafe static void glDepthRangeArrayv(uint first, int count, double* v) {
            Pointers.glDepthRangeArrayv(first, count, v);
        }
        
        public unsafe static void glDepthRangeArrayv(uint first, int count, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glDepthRangeArrayv(first, count, v_);
        }
        
        public unsafe static void glDepthRangeIndexed(uint index, double n, double f) {
            Pointers.glDepthRangeIndexed(index, n, f);
        }
        
        public unsafe static void glDepthRangeIndexedfNV(uint index, float n, float f) {
            Pointers.glDepthRangeIndexedfNV(index, n, f);
        }
        
        public unsafe static void glDepthRangeIndexedfOES(uint index, float n, float f) {
            Pointers.glDepthRangeIndexedfOES(index, n, f);
        }
        
        public unsafe static void glDepthRangedNV(double zNear, double zFar) {
            Pointers.glDepthRangedNV(zNear, zFar);
        }
        
        public unsafe static void glDepthRangef(float n, float f) {
            Pointers.glDepthRangef(n, f);
        }
        
        public unsafe static void glDepthRangefOES(float n, float f) {
            Pointers.glDepthRangefOES(n, f);
        }
        
        public unsafe static void glDepthRangex(IntPtr n, IntPtr f) {
            Pointers.glDepthRangex(n, f);
        }
        
        public unsafe static void glDepthRangexOES(IntPtr n, IntPtr f) {
            Pointers.glDepthRangexOES(n, f);
        }
        
        public unsafe static void glDetachObjectARB(uint containerObj, uint attachedObj) {
            Pointers.glDetachObjectARB(containerObj, attachedObj);
        }
        
        public unsafe static void glDetachShader(uint program, uint shader) {
            Pointers.glDetachShader(program, shader);
        }
        
        public unsafe static void glDetailTexFuncSGIS(int target, int n, float* points) {
            Pointers.glDetailTexFuncSGIS(target, n, points);
        }
        
        public unsafe static void glDetailTexFuncSGIS(int target, int n, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glDetailTexFuncSGIS(target, n, points_);
        }
        
        public unsafe static void glDisable(int cap) {
            Pointers.glDisable(cap);
        }
        
        public unsafe static void glDisableClientState(int array) {
            Pointers.glDisableClientState(array);
        }
        
        public unsafe static void glDisableClientStateIndexedEXT(int array, uint index) {
            Pointers.glDisableClientStateIndexedEXT(array, index);
        }
        
        public unsafe static void glDisableClientStateiEXT(int array, uint index) {
            Pointers.glDisableClientStateiEXT(array, index);
        }
        
        public unsafe static void glDisableDriverControlQCOM(uint driverControl) {
            Pointers.glDisableDriverControlQCOM(driverControl);
        }
        
        public unsafe static void glDisableIndexedEXT(int target, uint index) {
            Pointers.glDisableIndexedEXT(target, index);
        }
        
        public unsafe static void glDisableVariantClientStateEXT(uint id) {
            Pointers.glDisableVariantClientStateEXT(id);
        }
        
        public unsafe static void glDisableVertexArrayAttrib(uint vaobj, uint index) {
            Pointers.glDisableVertexArrayAttrib(vaobj, index);
        }
        
        public unsafe static void glDisableVertexArrayAttribEXT(uint vaobj, uint index) {
            Pointers.glDisableVertexArrayAttribEXT(vaobj, index);
        }
        
        public unsafe static void glDisableVertexArrayEXT(uint vaobj, int array) {
            Pointers.glDisableVertexArrayEXT(vaobj, array);
        }
        
        public unsafe static void glDisableVertexAttribAPPLE(uint index, int pname) {
            Pointers.glDisableVertexAttribAPPLE(index, pname);
        }
        
        public unsafe static void glDisableVertexAttribArray(uint index) {
            Pointers.glDisableVertexAttribArray(index);
        }
        
        public unsafe static void glDisableVertexAttribArrayARB(uint index) {
            Pointers.glDisableVertexAttribArrayARB(index);
        }
        
        public unsafe static void glDisablei(int target, uint index) {
            Pointers.glDisablei(target, index);
        }
        
        public unsafe static void glDisableiEXT(int target, uint index) {
            Pointers.glDisableiEXT(target, index);
        }
        
        public unsafe static void glDisableiNV(int target, uint index) {
            Pointers.glDisableiNV(target, index);
        }
        
        public unsafe static void glDisableiOES(int target, uint index) {
            Pointers.glDisableiOES(target, index);
        }
        
        public unsafe static void glDiscardFramebufferEXT(int target, int numAttachments, uint* attachments) {
            Pointers.glDiscardFramebufferEXT(target, numAttachments, attachments);
        }
        
        public unsafe static void glDiscardFramebufferEXT(int target, int numAttachments, uint[] attachments) {
            fixed(uint* attachments_ = &attachments[0])
                Pointers.glDiscardFramebufferEXT(target, numAttachments, attachments_);
        }
        
        public unsafe static void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z) {
            Pointers.glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
        }
        
        public unsafe static void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z) {
            Pointers.glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        }
        
        public unsafe static void glDispatchComputeIndirect(uint indirect) {
            Pointers.glDispatchComputeIndirect(indirect);
        }
        
        public unsafe static void glDrawArrays(int mode, int first, int count) {
            Pointers.glDrawArrays(mode, first, count);
        }
        
        public unsafe static void glDrawArraysEXT(int mode, int first, int count) {
            Pointers.glDrawArraysEXT(mode, first, count);
        }
        
        public unsafe static void glDrawArraysIndirect(int mode, IntPtr indirect) {
            Pointers.glDrawArraysIndirect(mode, indirect);
        }
        
        public unsafe static void glDrawArraysInstanced(int mode, int first, int count, int instancecount) {
            Pointers.glDrawArraysInstanced(mode, first, count, instancecount);
        }
        
        public unsafe static void glDrawArraysInstancedANGLE(int mode, int first, int count, int primcount) {
            Pointers.glDrawArraysInstancedANGLE(mode, first, count, primcount);
        }
        
        public unsafe static void glDrawArraysInstancedARB(int mode, int first, int count, int primcount) {
            Pointers.glDrawArraysInstancedARB(mode, first, count, primcount);
        }
        
        public unsafe static void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, uint baseinstance) {
            Pointers.glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
        }
        
        public unsafe static void glDrawArraysInstancedBaseInstanceEXT(int mode, int first, int count, int instancecount, uint baseinstance) {
            Pointers.glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance);
        }
        
        public unsafe static void glDrawArraysInstancedEXT(int mode, int start, int count, int primcount) {
            Pointers.glDrawArraysInstancedEXT(mode, start, count, primcount);
        }
        
        public unsafe static void glDrawArraysInstancedNV(int mode, int first, int count, int primcount) {
            Pointers.glDrawArraysInstancedNV(mode, first, count, primcount);
        }
        
        public unsafe static void glDrawBuffer(int buf) {
            Pointers.glDrawBuffer(buf);
        }
        
        public unsafe static void glDrawBuffers(int n, uint* bufs) {
            Pointers.glDrawBuffers(n, bufs);
        }
        
        public unsafe static void glDrawBuffers(int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glDrawBuffers(n, bufs_);
        }
        
        public unsafe static void glDrawBuffersARB(int n, uint* bufs) {
            Pointers.glDrawBuffersARB(n, bufs);
        }
        
        public unsafe static void glDrawBuffersARB(int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glDrawBuffersARB(n, bufs_);
        }
        
        public unsafe static void glDrawBuffersATI(int n, uint* bufs) {
            Pointers.glDrawBuffersATI(n, bufs);
        }
        
        public unsafe static void glDrawBuffersATI(int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glDrawBuffersATI(n, bufs_);
        }
        
        public unsafe static void glDrawBuffersEXT(int n, uint* bufs) {
            Pointers.glDrawBuffersEXT(n, bufs);
        }
        
        public unsafe static void glDrawBuffersEXT(int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glDrawBuffersEXT(n, bufs_);
        }
        
        public unsafe static void glDrawBuffersIndexedEXT(int n, uint* location, int* indices) {
            Pointers.glDrawBuffersIndexedEXT(n, location, indices);
        }
        
        public unsafe static void glDrawBuffersIndexedEXT(int n, uint* location, int[] indices) {
            fixed(int* indices_ = &indices[0])
                Pointers.glDrawBuffersIndexedEXT(n, location, indices_);
        }
        
        public unsafe static void glDrawBuffersIndexedEXT(int n, uint[] location, int* indices) {
            fixed(uint* location_ = &location[0])
                Pointers.glDrawBuffersIndexedEXT(n, location_, indices);
        }
        
        public unsafe static void glDrawBuffersIndexedEXT(int n, uint[] location, int[] indices) {
            fixed(uint* location_ = &location[0])
            fixed(int* indices_ = &indices[0])
                Pointers.glDrawBuffersIndexedEXT(n, location_, indices_);
        }
        
        public unsafe static void glDrawBuffersNV(int n, uint* bufs) {
            Pointers.glDrawBuffersNV(n, bufs);
        }
        
        public unsafe static void glDrawBuffersNV(int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glDrawBuffersNV(n, bufs_);
        }
        
        public unsafe static void glDrawCommandsAddressNV(int primitiveMode, ulong* indirects, int* sizes, uint count) {
            Pointers.glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
        }
        
        public unsafe static void glDrawCommandsAddressNV(int primitiveMode, ulong* indirects, int[] sizes, uint count) {
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsAddressNV(primitiveMode, indirects, sizes_, count);
        }
        
        public unsafe static void glDrawCommandsAddressNV(int primitiveMode, ulong[] indirects, int* sizes, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
                Pointers.glDrawCommandsAddressNV(primitiveMode, indirects_, sizes, count);
        }
        
        public unsafe static void glDrawCommandsAddressNV(int primitiveMode, ulong[] indirects, int[] sizes, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsAddressNV(primitiveMode, indirects_, sizes_, count);
        }
        
        public unsafe static void glDrawCommandsNV(int primitiveMode, uint buffer, uint* indirects, int* sizes, uint count) {
            Pointers.glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
        }
        
        public unsafe static void glDrawCommandsNV(int primitiveMode, uint buffer, uint* indirects, int[] sizes, uint count) {
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsNV(primitiveMode, buffer, indirects, sizes_, count);
        }
        
        public unsafe static void glDrawCommandsNV(int primitiveMode, uint buffer, uint[] indirects, int* sizes, uint count) {
            fixed(uint* indirects_ = &indirects[0])
                Pointers.glDrawCommandsNV(primitiveMode, buffer, indirects_, sizes, count);
        }
        
        public unsafe static void glDrawCommandsNV(int primitiveMode, uint buffer, uint[] indirects, int[] sizes, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsNV(primitiveMode, buffer, indirects_, sizes_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count) {
            Pointers.glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint[] fbos, uint count) {
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint[] states, uint* fbos, uint count) {
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint[] states, uint[] fbos, uint count) {
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int[] sizes, uint* states, uint* fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes_, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int[] sizes, uint* states, uint[] fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes_, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int[] sizes, uint[] states, uint* fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes_, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong* indirects, int[] sizes, uint[] states, uint[] fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects, sizes_, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int* sizes, uint* states, uint* fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int* sizes, uint* states, uint[] fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int* sizes, uint[] states, uint* fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int* sizes, uint[] states, uint[] fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint* states, uint* fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes_, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint* states, uint[] fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes_, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint[] states, uint* fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes_, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count) {
            fixed(ulong* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesAddressNV(indirects_, sizes_, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int* sizes, uint* states, uint* fbos, uint count) {
            Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int* sizes, uint* states, uint[] fbos, uint count) {
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int* sizes, uint[] states, uint* fbos, uint count) {
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int* sizes, uint[] states, uint[] fbos, uint count) {
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int[] sizes, uint* states, uint* fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes_, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int[] sizes, uint* states, uint[] fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes_, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int[] sizes, uint[] states, uint* fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes_, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int[] sizes, uint[] states, uint[] fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects, sizes_, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int* sizes, uint* states, uint* fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int* sizes, uint* states, uint[] fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int* sizes, uint[] states, uint* fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int* sizes, uint[] states, uint[] fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes, states_, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int[] sizes, uint* states, uint* fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes_, states, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int[] sizes, uint* states, uint[] fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes_, states, fbos_, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int[] sizes, uint[] states, uint* fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes_, states_, fbos, count);
        }
        
        public unsafe static void glDrawCommandsStatesNV(uint buffer, uint[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count) {
            fixed(uint* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glDrawCommandsStatesNV(buffer, indirects_, sizes_, states_, fbos_, count);
        }
        
        public unsafe static void glDrawElementArrayAPPLE(int mode, int first, int count) {
            Pointers.glDrawElementArrayAPPLE(mode, first, count);
        }
        
        public unsafe static void glDrawElementArrayATI(int mode, int count) {
            Pointers.glDrawElementArrayATI(mode, count);
        }
        
        public unsafe static void glDrawElements(int mode, int count, int type, IntPtr indices) {
            Pointers.glDrawElements(mode, count, type, indices);
        }
        
        public unsafe static void glDrawElementsBaseVertex(int mode, int count, int type, IntPtr indices, int basevertex) {
            Pointers.glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
        }
        
        public unsafe static void glDrawElementsBaseVertexEXT(int mode, int count, int type, IntPtr indices, int basevertex) {
            Pointers.glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
        }
        
        public unsafe static void glDrawElementsBaseVertexOES(int mode, int count, int type, IntPtr indices, int basevertex) {
            Pointers.glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex);
        }
        
        public unsafe static void glDrawElementsIndirect(int mode, int type, IntPtr indirect) {
            Pointers.glDrawElementsIndirect(mode, type, indirect);
        }
        
        public unsafe static void glDrawElementsInstanced(int mode, int count, int type, IntPtr indices, int instancecount) {
            Pointers.glDrawElementsInstanced(mode, count, type, indices, instancecount);
        }
        
        public unsafe static void glDrawElementsInstancedANGLE(int mode, int count, int type, IntPtr indices, int primcount) {
            Pointers.glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);
        }
        
        public unsafe static void glDrawElementsInstancedARB(int mode, int count, int type, IntPtr indices, int primcount) {
            Pointers.glDrawElementsInstancedARB(mode, count, type, indices, primcount);
        }
        
        public unsafe static void glDrawElementsInstancedBaseInstance(int mode, int count, int type, IntPtr indices, int instancecount, uint baseinstance) {
            Pointers.glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
        }
        
        public unsafe static void glDrawElementsInstancedBaseInstanceEXT(int mode, int count, int type, IntPtr indices, int instancecount, uint baseinstance) {
            Pointers.glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance);
        }
        
        public unsafe static void glDrawElementsInstancedBaseVertex(int mode, int count, int type, IntPtr indices, int instancecount, int basevertex) {
            Pointers.glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
        }
        
        public unsafe static void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, IntPtr indices, int instancecount, int basevertex, uint baseinstance) {
            Pointers.glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        
        public unsafe static void glDrawElementsInstancedBaseVertexBaseInstanceEXT(int mode, int count, int type, IntPtr indices, int instancecount, int basevertex, uint baseinstance) {
            Pointers.glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        
        public unsafe static void glDrawElementsInstancedBaseVertexEXT(int mode, int count, int type, IntPtr indices, int instancecount, int basevertex) {
            Pointers.glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);
        }
        
        public unsafe static void glDrawElementsInstancedBaseVertexOES(int mode, int count, int type, IntPtr indices, int instancecount, int basevertex) {
            Pointers.glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex);
        }
        
        public unsafe static void glDrawElementsInstancedEXT(int mode, int count, int type, IntPtr indices, int primcount) {
            Pointers.glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
        }
        
        public unsafe static void glDrawElementsInstancedNV(int mode, int count, int type, IntPtr indices, int primcount) {
            Pointers.glDrawElementsInstancedNV(mode, count, type, indices, primcount);
        }
        
        public unsafe static void glDrawMeshArraysSUN(int mode, int first, int count, int width) {
            Pointers.glDrawMeshArraysSUN(mode, first, count, width);
        }
        
        public unsafe static void glDrawPixels(int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glDrawPixels(width, height, format, type, pixels);
        }
        
        public unsafe static void glDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int first, int count) {
            Pointers.glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
        }
        
        public unsafe static void glDrawRangeElementArrayATI(int mode, uint start, uint end, int count) {
            Pointers.glDrawRangeElementArrayATI(mode, start, end, count);
        }
        
        public unsafe static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, IntPtr indices) {
            Pointers.glDrawRangeElements(mode, start, end, count, type, indices);
        }
        
        public unsafe static void glDrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, int type, IntPtr indices, int basevertex) {
            Pointers.glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
        }
        
        public unsafe static void glDrawRangeElementsBaseVertexEXT(int mode, uint start, uint end, int count, int type, IntPtr indices, int basevertex) {
            Pointers.glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
        }
        
        public unsafe static void glDrawRangeElementsBaseVertexOES(int mode, uint start, uint end, int count, int type, IntPtr indices, int basevertex) {
            Pointers.glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);
        }
        
        public unsafe static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, IntPtr indices) {
            Pointers.glDrawRangeElementsEXT(mode, start, end, count, type, indices);
        }
        
        public unsafe static void glDrawTexfOES(float x, float y, float z, float width, float height) {
            Pointers.glDrawTexfOES(x, y, z, width, height);
        }
        
        public unsafe static void glDrawTexfvOES(float* coords) {
            Pointers.glDrawTexfvOES(coords);
        }
        
        public unsafe static void glDrawTexfvOES(float[] coords) {
            fixed(float* coords_ = &coords[0])
                Pointers.glDrawTexfvOES(coords_);
        }
        
        public unsafe static void glDrawTexiOES(int x, int y, int z, int width, int height) {
            Pointers.glDrawTexiOES(x, y, z, width, height);
        }
        
        public unsafe static void glDrawTexivOES(int* coords) {
            Pointers.glDrawTexivOES(coords);
        }
        
        public unsafe static void glDrawTexivOES(int[] coords) {
            fixed(int* coords_ = &coords[0])
                Pointers.glDrawTexivOES(coords_);
        }
        
        public unsafe static void glDrawTexsOES(short x, short y, short z, short width, short height) {
            Pointers.glDrawTexsOES(x, y, z, width, height);
        }
        
        public unsafe static void glDrawTexsvOES(short* coords) {
            Pointers.glDrawTexsvOES(coords);
        }
        
        public unsafe static void glDrawTexsvOES(short[] coords) {
            fixed(short* coords_ = &coords[0])
                Pointers.glDrawTexsvOES(coords_);
        }
        
        public unsafe static void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) {
            Pointers.glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        public unsafe static void glDrawTexxOES(IntPtr x, IntPtr y, IntPtr z, IntPtr width, IntPtr height) {
            Pointers.glDrawTexxOES(x, y, z, width, height);
        }
        
        public unsafe static void glDrawTexxvOES(IntPtr* coords) {
            Pointers.glDrawTexxvOES(coords);
        }
        
        public unsafe static void glDrawTexxvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glDrawTexxvOES(coords_);
        }
        
        public unsafe static void glDrawTransformFeedback(int mode, uint id) {
            Pointers.glDrawTransformFeedback(mode, id);
        }
        
        public unsafe static void glDrawTransformFeedbackEXT(int mode, uint id) {
            Pointers.glDrawTransformFeedbackEXT(mode, id);
        }
        
        public unsafe static void glDrawTransformFeedbackInstanced(int mode, uint id, int instancecount) {
            Pointers.glDrawTransformFeedbackInstanced(mode, id, instancecount);
        }
        
        public unsafe static void glDrawTransformFeedbackInstancedEXT(int mode, uint id, int instancecount) {
            Pointers.glDrawTransformFeedbackInstancedEXT(mode, id, instancecount);
        }
        
        public unsafe static void glDrawTransformFeedbackNV(int mode, uint id) {
            Pointers.glDrawTransformFeedbackNV(mode, id);
        }
        
        public unsafe static void glDrawTransformFeedbackStream(int mode, uint id, uint stream) {
            Pointers.glDrawTransformFeedbackStream(mode, id, stream);
        }
        
        public unsafe static void glDrawTransformFeedbackStreamInstanced(int mode, uint id, uint stream, int instancecount) {
            Pointers.glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
        }
        
        public unsafe static void glEGLImageTargetRenderbufferStorageOES(int target, IntPtr image) {
            Pointers.glEGLImageTargetRenderbufferStorageOES(target, image);
        }
        
        public unsafe static void glEGLImageTargetTexStorageEXT(int target, IntPtr image, int* attrib_list) {
            Pointers.glEGLImageTargetTexStorageEXT(target, image, attrib_list);
        }
        
        public unsafe static void glEGLImageTargetTexStorageEXT(int target, IntPtr image, int[] attrib_list) {
            fixed(int* attrib_list_ = &attrib_list[0])
                Pointers.glEGLImageTargetTexStorageEXT(target, image, attrib_list_);
        }
        
        public unsafe static void glEGLImageTargetTexture2DOES(int target, IntPtr image) {
            Pointers.glEGLImageTargetTexture2DOES(target, image);
        }
        
        public unsafe static void glEGLImageTargetTextureStorageEXT(uint texture, IntPtr image, int* attrib_list) {
            Pointers.glEGLImageTargetTextureStorageEXT(texture, image, attrib_list);
        }
        
        public unsafe static void glEGLImageTargetTextureStorageEXT(uint texture, IntPtr image, int[] attrib_list) {
            fixed(int* attrib_list_ = &attrib_list[0])
                Pointers.glEGLImageTargetTextureStorageEXT(texture, image, attrib_list_);
        }
        
        public unsafe static void glEdgeFlag(bool flag) {
            Pointers.glEdgeFlag(flag);
        }
        
        public unsafe static void glEdgeFlagFormatNV(int stride) {
            Pointers.glEdgeFlagFormatNV(stride);
        }
        
        public unsafe static void glEdgeFlagPointer(int stride, IntPtr pointer) {
            Pointers.glEdgeFlagPointer(stride, pointer);
        }
        
        public unsafe static void glEdgeFlagPointerEXT(int stride, int count, bool* pointer) {
            Pointers.glEdgeFlagPointerEXT(stride, count, pointer);
        }
        
        public unsafe static void glEdgeFlagPointerEXT(int stride, int count, bool[] pointer) {
            fixed(bool* pointer_ = &pointer[0])
                Pointers.glEdgeFlagPointerEXT(stride, count, pointer_);
        }
        
        public unsafe static void glEdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride) {
            Pointers.glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
        }
        
        public unsafe static void glEdgeFlagv(bool* flag) {
            Pointers.glEdgeFlagv(flag);
        }
        
        public unsafe static void glEdgeFlagv(out bool flag) {
            fixed(bool* flag_ = &flag)
                Pointers.glEdgeFlagv(flag_);
        }
        
        public unsafe static void glElementPointerAPPLE(int type, IntPtr pointer) {
            Pointers.glElementPointerAPPLE(type, pointer);
        }
        
        public unsafe static void glElementPointerATI(int type, IntPtr pointer) {
            Pointers.glElementPointerATI(type, pointer);
        }
        
        public unsafe static void glEnable(int cap) {
            Pointers.glEnable(cap);
        }
        
        public unsafe static void glEnableClientState(int array) {
            Pointers.glEnableClientState(array);
        }
        
        public unsafe static void glEnableClientStateIndexedEXT(int array, uint index) {
            Pointers.glEnableClientStateIndexedEXT(array, index);
        }
        
        public unsafe static void glEnableClientStateiEXT(int array, uint index) {
            Pointers.glEnableClientStateiEXT(array, index);
        }
        
        public unsafe static void glEnableDriverControlQCOM(uint driverControl) {
            Pointers.glEnableDriverControlQCOM(driverControl);
        }
        
        public unsafe static void glEnableIndexedEXT(int target, uint index) {
            Pointers.glEnableIndexedEXT(target, index);
        }
        
        public unsafe static void glEnableVariantClientStateEXT(uint id) {
            Pointers.glEnableVariantClientStateEXT(id);
        }
        
        public unsafe static void glEnableVertexArrayAttrib(uint vaobj, uint index) {
            Pointers.glEnableVertexArrayAttrib(vaobj, index);
        }
        
        public unsafe static void glEnableVertexArrayAttribEXT(uint vaobj, uint index) {
            Pointers.glEnableVertexArrayAttribEXT(vaobj, index);
        }
        
        public unsafe static void glEnableVertexArrayEXT(uint vaobj, int array) {
            Pointers.glEnableVertexArrayEXT(vaobj, array);
        }
        
        public unsafe static void glEnableVertexAttribAPPLE(uint index, int pname) {
            Pointers.glEnableVertexAttribAPPLE(index, pname);
        }
        
        public unsafe static void glEnableVertexAttribArray(uint index) {
            Pointers.glEnableVertexAttribArray(index);
        }
        
        public unsafe static void glEnableVertexAttribArrayARB(uint index) {
            Pointers.glEnableVertexAttribArrayARB(index);
        }
        
        public unsafe static void glEnablei(int target, uint index) {
            Pointers.glEnablei(target, index);
        }
        
        public unsafe static void glEnableiEXT(int target, uint index) {
            Pointers.glEnableiEXT(target, index);
        }
        
        public unsafe static void glEnableiNV(int target, uint index) {
            Pointers.glEnableiNV(target, index);
        }
        
        public unsafe static void glEnableiOES(int target, uint index) {
            Pointers.glEnableiOES(target, index);
        }
        
        public unsafe static void glEnd() {
            Pointers.glEnd();
        }
        
        public unsafe static void glEndConditionalRender() {
            Pointers.glEndConditionalRender();
        }
        
        public unsafe static void glEndConditionalRenderNV() {
            Pointers.glEndConditionalRenderNV();
        }
        
        public unsafe static void glEndConditionalRenderNVX() {
            Pointers.glEndConditionalRenderNVX();
        }
        
        public unsafe static void glEndFragmentShaderATI() {
            Pointers.glEndFragmentShaderATI();
        }
        
        public unsafe static void glEndList() {
            Pointers.glEndList();
        }
        
        public unsafe static void glEndOcclusionQueryNV() {
            Pointers.glEndOcclusionQueryNV();
        }
        
        public unsafe static void glEndPerfMonitorAMD(uint monitor) {
            Pointers.glEndPerfMonitorAMD(monitor);
        }
        
        public unsafe static void glEndPerfQueryINTEL(uint queryHandle) {
            Pointers.glEndPerfQueryINTEL(queryHandle);
        }
        
        public unsafe static void glEndQuery(int target) {
            Pointers.glEndQuery(target);
        }
        
        public unsafe static void glEndQueryARB(int target) {
            Pointers.glEndQueryARB(target);
        }
        
        public unsafe static void glEndQueryEXT(int target) {
            Pointers.glEndQueryEXT(target);
        }
        
        public unsafe static void glEndQueryIndexed(int target, uint index) {
            Pointers.glEndQueryIndexed(target, index);
        }
        
        public unsafe static void glEndTilingQCOM(uint preserveMask) {
            Pointers.glEndTilingQCOM(preserveMask);
        }
        
        public unsafe static void glEndTilingQCOM(Enums.BufferBitQCOM preserveMask) {
            Pointers.glEndTilingQCOM((uint)preserveMask);
        }
        
        public unsafe static void glEndTransformFeedback() {
            Pointers.glEndTransformFeedback();
        }
        
        public unsafe static void glEndTransformFeedbackEXT() {
            Pointers.glEndTransformFeedbackEXT();
        }
        
        public unsafe static void glEndTransformFeedbackNV() {
            Pointers.glEndTransformFeedbackNV();
        }
        
        public unsafe static void glEndVertexShaderEXT() {
            Pointers.glEndVertexShaderEXT();
        }
        
        public unsafe static void glEndVideoCaptureNV(uint video_capture_slot) {
            Pointers.glEndVideoCaptureNV(video_capture_slot);
        }
        
        public unsafe static void glEvalCoord1d(double u) {
            Pointers.glEvalCoord1d(u);
        }
        
        public unsafe static void glEvalCoord1dv(double* u) {
            Pointers.glEvalCoord1dv(u);
        }
        
        public unsafe static void glEvalCoord1dv(out double u) {
            fixed(double* u_ = &u)
                Pointers.glEvalCoord1dv(u_);
        }
        
        public unsafe static void glEvalCoord1f(float u) {
            Pointers.glEvalCoord1f(u);
        }
        
        public unsafe static void glEvalCoord1fv(float* u) {
            Pointers.glEvalCoord1fv(u);
        }
        
        public unsafe static void glEvalCoord1fv(out float u) {
            fixed(float* u_ = &u)
                Pointers.glEvalCoord1fv(u_);
        }
        
        public unsafe static void glEvalCoord1xOES(IntPtr u) {
            Pointers.glEvalCoord1xOES(u);
        }
        
        public unsafe static void glEvalCoord1xvOES(IntPtr* coords) {
            Pointers.glEvalCoord1xvOES(coords);
        }
        
        public unsafe static void glEvalCoord1xvOES(out IntPtr coords) {
            fixed(IntPtr* coords_ = &coords)
                Pointers.glEvalCoord1xvOES(coords_);
        }
        
        public unsafe static void glEvalCoord2d(double u, double v) {
            Pointers.glEvalCoord2d(u, v);
        }
        
        public unsafe static void glEvalCoord2dv(double* u) {
            Pointers.glEvalCoord2dv(u);
        }
        
        public unsafe static void glEvalCoord2dv(double[] u) {
            fixed(double* u_ = &u[0])
                Pointers.glEvalCoord2dv(u_);
        }
        
        public unsafe static void glEvalCoord2f(float u, float v) {
            Pointers.glEvalCoord2f(u, v);
        }
        
        public unsafe static void glEvalCoord2fv(float* u) {
            Pointers.glEvalCoord2fv(u);
        }
        
        public unsafe static void glEvalCoord2fv(float[] u) {
            fixed(float* u_ = &u[0])
                Pointers.glEvalCoord2fv(u_);
        }
        
        public unsafe static void glEvalCoord2xOES(IntPtr u, IntPtr v) {
            Pointers.glEvalCoord2xOES(u, v);
        }
        
        public unsafe static void glEvalCoord2xvOES(IntPtr* coords) {
            Pointers.glEvalCoord2xvOES(coords);
        }
        
        public unsafe static void glEvalCoord2xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glEvalCoord2xvOES(coords_);
        }
        
        public unsafe static void glEvalMapsNV(int target, int mode) {
            Pointers.glEvalMapsNV(target, mode);
        }
        
        public unsafe static void glEvalMesh1(int mode, int i1, int i2) {
            Pointers.glEvalMesh1(mode, i1, i2);
        }
        
        public unsafe static void glEvalMesh2(int mode, int i1, int i2, int j1, int j2) {
            Pointers.glEvalMesh2(mode, i1, i2, j1, j2);
        }
        
        public unsafe static void glEvalPoint1(int i) {
            Pointers.glEvalPoint1(i);
        }
        
        public unsafe static void glEvalPoint2(int i, int j) {
            Pointers.glEvalPoint2(i, j);
        }
        
        public unsafe static void glEvaluateDepthValuesARB() {
            Pointers.glEvaluateDepthValuesARB();
        }
        
        public unsafe static void glExecuteProgramNV(int target, uint id, float* _params) {
            Pointers.glExecuteProgramNV(target, id, _params);
        }
        
        public unsafe static void glExecuteProgramNV(int target, uint id, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glExecuteProgramNV(target, id, _params_);
        }
        
        public unsafe static void glExtGetBufferPointervQCOM(int target, IntPtr* _params) {
            Pointers.glExtGetBufferPointervQCOM(target, _params);
        }
        
        public unsafe static void glExtGetBufferPointervQCOM(int target, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glExtGetBufferPointervQCOM(target, _params_);
        }
        
        public unsafe static void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers) {
            Pointers.glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
        }
        
        public unsafe static void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, out int numBuffers) {
            fixed(int* numBuffers_ = &numBuffers)
                Pointers.glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers_);
        }
        
        public unsafe static void glExtGetBuffersQCOM(uint[] buffers, int maxBuffers, int* numBuffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glExtGetBuffersQCOM(buffers_, maxBuffers, numBuffers);
        }
        
        public unsafe static void glExtGetBuffersQCOM(uint[] buffers, int maxBuffers, out int numBuffers) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(int* numBuffers_ = &numBuffers)
                Pointers.glExtGetBuffersQCOM(buffers_, maxBuffers, numBuffers_);
        }
        
        public unsafe static void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers) {
            Pointers.glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
        }
        
        public unsafe static void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, out int numFramebuffers) {
            fixed(int* numFramebuffers_ = &numFramebuffers)
                Pointers.glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers_);
        }
        
        public unsafe static void glExtGetFramebuffersQCOM(uint[] framebuffers, int maxFramebuffers, int* numFramebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glExtGetFramebuffersQCOM(framebuffers_, maxFramebuffers, numFramebuffers);
        }
        
        public unsafe static void glExtGetFramebuffersQCOM(uint[] framebuffers, int maxFramebuffers, out int numFramebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
            fixed(int* numFramebuffers_ = &numFramebuffers)
                Pointers.glExtGetFramebuffersQCOM(framebuffers_, maxFramebuffers, numFramebuffers_);
        }
        
        public unsafe static void glExtGetProgramBinarySourceQCOM(uint program, int shadertype, StringBuilder source, int* length) {
            Pointers.glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
        }
        
        public unsafe static void glExtGetProgramBinarySourceQCOM(uint program, int shadertype, StringBuilder source, int[] length) {
            fixed(int* length_ = &length[0])
                Pointers.glExtGetProgramBinarySourceQCOM(program, shadertype, source, length_);
        }
        
        public unsafe static void glExtGetProgramBinarySourceQCOM(uint program, Enums.ShaderType shadertype, StringBuilder source, int* length) {
            Pointers.glExtGetProgramBinarySourceQCOM(program, (int)shadertype, source, length);
        }
        
        public unsafe static void glExtGetProgramBinarySourceQCOM(uint program, Enums.ShaderType shadertype, StringBuilder source, int[] length) {
            fixed(int* length_ = &length[0])
                Pointers.glExtGetProgramBinarySourceQCOM(program, (int)shadertype, source, length_);
        }
        
        public unsafe static void glExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms) {
            Pointers.glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
        }
        
        public unsafe static void glExtGetProgramsQCOM(uint* programs, int maxPrograms, out int numPrograms) {
            fixed(int* numPrograms_ = &numPrograms)
                Pointers.glExtGetProgramsQCOM(programs, maxPrograms, numPrograms_);
        }
        
        public unsafe static void glExtGetProgramsQCOM(uint[] programs, int maxPrograms, int* numPrograms) {
            fixed(uint* programs_ = &programs[0])
                Pointers.glExtGetProgramsQCOM(programs_, maxPrograms, numPrograms);
        }
        
        public unsafe static void glExtGetProgramsQCOM(uint[] programs, int maxPrograms, out int numPrograms) {
            fixed(uint* programs_ = &programs[0])
            fixed(int* numPrograms_ = &numPrograms)
                Pointers.glExtGetProgramsQCOM(programs_, maxPrograms, numPrograms_);
        }
        
        public unsafe static void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers) {
            Pointers.glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
        }
        
        public unsafe static void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, out int numRenderbuffers) {
            fixed(int* numRenderbuffers_ = &numRenderbuffers)
                Pointers.glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers_);
        }
        
        public unsafe static void glExtGetRenderbuffersQCOM(uint[] renderbuffers, int maxRenderbuffers, int* numRenderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glExtGetRenderbuffersQCOM(renderbuffers_, maxRenderbuffers, numRenderbuffers);
        }
        
        public unsafe static void glExtGetRenderbuffersQCOM(uint[] renderbuffers, int maxRenderbuffers, out int numRenderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
            fixed(int* numRenderbuffers_ = &numRenderbuffers)
                Pointers.glExtGetRenderbuffersQCOM(renderbuffers_, maxRenderbuffers, numRenderbuffers_);
        }
        
        public unsafe static void glExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders) {
            Pointers.glExtGetShadersQCOM(shaders, maxShaders, numShaders);
        }
        
        public unsafe static void glExtGetShadersQCOM(uint* shaders, int maxShaders, out int numShaders) {
            fixed(int* numShaders_ = &numShaders)
                Pointers.glExtGetShadersQCOM(shaders, maxShaders, numShaders_);
        }
        
        public unsafe static void glExtGetShadersQCOM(uint[] shaders, int maxShaders, int* numShaders) {
            fixed(uint* shaders_ = &shaders[0])
                Pointers.glExtGetShadersQCOM(shaders_, maxShaders, numShaders);
        }
        
        public unsafe static void glExtGetShadersQCOM(uint[] shaders, int maxShaders, out int numShaders) {
            fixed(uint* shaders_ = &shaders[0])
            fixed(int* numShaders_ = &numShaders)
                Pointers.glExtGetShadersQCOM(shaders_, maxShaders, numShaders_);
        }
        
        public unsafe static void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int* _params) {
            Pointers.glExtGetTexLevelParameterivQCOM(texture, face, level, pname, _params);
        }
        
        public unsafe static void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glExtGetTexLevelParameterivQCOM(texture, face, level, pname, _params_);
        }
        
        public unsafe static void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr texels) {
            Pointers.glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
        }
        
        public unsafe static void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures) {
            Pointers.glExtGetTexturesQCOM(textures, maxTextures, numTextures);
        }
        
        public unsafe static void glExtGetTexturesQCOM(uint* textures, int maxTextures, int[] numTextures) {
            fixed(int* numTextures_ = &numTextures[0])
                Pointers.glExtGetTexturesQCOM(textures, maxTextures, numTextures_);
        }
        
        public unsafe static void glExtGetTexturesQCOM(uint[] textures, int maxTextures, int* numTextures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glExtGetTexturesQCOM(textures_, maxTextures, numTextures);
        }
        
        public unsafe static void glExtGetTexturesQCOM(uint[] textures, int maxTextures, int[] numTextures) {
            fixed(uint* textures_ = &textures[0])
            fixed(int* numTextures_ = &numTextures[0])
                Pointers.glExtGetTexturesQCOM(textures_, maxTextures, numTextures_);
        }
        
        public unsafe static bool glExtIsProgramBinaryQCOM(uint program) {
            return Pointers.glExtIsProgramBinaryQCOM(program);
        }
        
        public unsafe static void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param) {
            Pointers.glExtTexObjectStateOverrideiQCOM(target, pname, param);
        }
        
        public unsafe static void glExtractComponentEXT(uint res, uint src, uint num) {
            Pointers.glExtractComponentEXT(res, src, num);
        }
        
        public unsafe static void glFeedbackBuffer(int size, int type, float* buffer) {
            Pointers.glFeedbackBuffer(size, type, buffer);
        }
        
        public unsafe static void glFeedbackBuffer(int size, int type, float[] buffer) {
            fixed(float* buffer_ = &buffer[0])
                Pointers.glFeedbackBuffer(size, type, buffer_);
        }
        
        public unsafe static void glFeedbackBufferxOES(int n, int type, IntPtr* buffer) {
            Pointers.glFeedbackBufferxOES(n, type, buffer);
        }
        
        public unsafe static void glFeedbackBufferxOES(int n, int type, IntPtr[] buffer) {
            fixed(IntPtr* buffer_ = &buffer[0])
                Pointers.glFeedbackBufferxOES(n, type, buffer_);
        }
        
        public unsafe static IntPtr glFenceSync(int condition, uint flags) {
            return Pointers.glFenceSync(condition, flags);
        }
        
        public unsafe static IntPtr glFenceSyncAPPLE(int condition, uint flags) {
            return Pointers.glFenceSyncAPPLE(condition, flags);
        }
        
        public unsafe static void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage) {
            Pointers.glFinalCombinerInputNV(variable, input, mapping, componentUsage);
        }
        
        public unsafe static void glFinish() {
            Pointers.glFinish();
        }
        
        public unsafe static int glFinishAsyncSGIX(uint* markerp) {
            return Pointers.glFinishAsyncSGIX(markerp);
        }
        
        public unsafe static int glFinishAsyncSGIX(out uint markerp) {
            fixed(uint* markerp_ = &markerp)
                return Pointers.glFinishAsyncSGIX(markerp_);
        }
        
        public unsafe static void glFinishFenceAPPLE(uint fence) {
            Pointers.glFinishFenceAPPLE(fence);
        }
        
        public unsafe static void glFinishFenceNV(uint fence) {
            Pointers.glFinishFenceNV(fence);
        }
        
        public unsafe static void glFinishObjectAPPLE(int _object, int name) {
            Pointers.glFinishObjectAPPLE(_object, name);
        }
        
        public unsafe static void glFinishTextureSUNX() {
            Pointers.glFinishTextureSUNX();
        }
        
        public unsafe static void glFlush() {
            Pointers.glFlush();
        }
        
        public unsafe static void glFlushMappedBufferRange(int target, uint offset, uint length) {
            Pointers.glFlushMappedBufferRange(target, offset, length);
        }
        
        public unsafe static void glFlushMappedBufferRangeAPPLE(int target, uint offset, uint size) {
            Pointers.glFlushMappedBufferRangeAPPLE(target, offset, size);
        }
        
        public unsafe static void glFlushMappedBufferRangeEXT(int target, uint offset, uint length) {
            Pointers.glFlushMappedBufferRangeEXT(target, offset, length);
        }
        
        public unsafe static void glFlushMappedNamedBufferRange(uint buffer, uint offset, uint length) {
            Pointers.glFlushMappedNamedBufferRange(buffer, offset, length);
        }
        
        public unsafe static void glFlushMappedNamedBufferRangeEXT(uint buffer, uint offset, uint length) {
            Pointers.glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
        }
        
        public unsafe static void glFlushPixelDataRangeNV(int target) {
            Pointers.glFlushPixelDataRangeNV(target);
        }
        
        public unsafe static void glFlushRasterSGIX() {
            Pointers.glFlushRasterSGIX();
        }
        
        public unsafe static void glFlushStaticDataIBM(int target) {
            Pointers.glFlushStaticDataIBM(target);
        }
        
        public unsafe static void glFlushVertexArrayRangeAPPLE(int length, IntPtr pointer) {
            Pointers.glFlushVertexArrayRangeAPPLE(length, pointer);
        }
        
        public unsafe static void glFlushVertexArrayRangeNV() {
            Pointers.glFlushVertexArrayRangeNV();
        }
        
        public unsafe static void glFogCoordFormatNV(int type, int stride) {
            Pointers.glFogCoordFormatNV(type, stride);
        }
        
        public unsafe static void glFogCoordPointer(int type, int stride, IntPtr pointer) {
            Pointers.glFogCoordPointer(type, stride, pointer);
        }
        
        public unsafe static void glFogCoordPointerEXT(int type, int stride, IntPtr pointer) {
            Pointers.glFogCoordPointerEXT(type, stride, pointer);
        }
        
        public unsafe static void glFogCoordPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glFogCoordPointerListIBM(int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glFogCoordPointerListIBM(type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glFogCoordd(double coord) {
            Pointers.glFogCoordd(coord);
        }
        
        public unsafe static void glFogCoorddEXT(double coord) {
            Pointers.glFogCoorddEXT(coord);
        }
        
        public unsafe static void glFogCoorddv(double* coord) {
            Pointers.glFogCoorddv(coord);
        }
        
        public unsafe static void glFogCoorddv(out double coord) {
            fixed(double* coord_ = &coord)
                Pointers.glFogCoorddv(coord_);
        }
        
        public unsafe static void glFogCoorddvEXT(double* coord) {
            Pointers.glFogCoorddvEXT(coord);
        }
        
        public unsafe static void glFogCoorddvEXT(out double coord) {
            fixed(double* coord_ = &coord)
                Pointers.glFogCoorddvEXT(coord_);
        }
        
        public unsafe static void glFogCoordf(float coord) {
            Pointers.glFogCoordf(coord);
        }
        
        public unsafe static void glFogCoordfEXT(float coord) {
            Pointers.glFogCoordfEXT(coord);
        }
        
        public unsafe static void glFogCoordfv(float* coord) {
            Pointers.glFogCoordfv(coord);
        }
        
        public unsafe static void glFogCoordfv(out float coord) {
            fixed(float* coord_ = &coord)
                Pointers.glFogCoordfv(coord_);
        }
        
        public unsafe static void glFogCoordfvEXT(float* coord) {
            Pointers.glFogCoordfvEXT(coord);
        }
        
        public unsafe static void glFogCoordfvEXT(out float coord) {
            fixed(float* coord_ = &coord)
                Pointers.glFogCoordfvEXT(coord_);
        }
        
        public unsafe static void glFogCoordhNV(short fog) {
            Pointers.glFogCoordhNV(fog);
        }
        
        public unsafe static void glFogCoordhvNV(short* fog) {
            Pointers.glFogCoordhvNV(fog);
        }
        
        public unsafe static void glFogCoordhvNV(out short fog) {
            fixed(short* fog_ = &fog)
                Pointers.glFogCoordhvNV(fog_);
        }
        
        public unsafe static void glFogFuncSGIS(int n, float* points) {
            Pointers.glFogFuncSGIS(n, points);
        }
        
        public unsafe static void glFogFuncSGIS(int n, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glFogFuncSGIS(n, points_);
        }
        
        public unsafe static void glFogf(int pname, float param) {
            Pointers.glFogf(pname, param);
        }
        
        public unsafe static void glFogfv(int pname, float* _params) {
            Pointers.glFogfv(pname, _params);
        }
        
        public unsafe static void glFogfv(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glFogfv(pname, _params_);
        }
        
        public unsafe static void glFogi(int pname, int param) {
            Pointers.glFogi(pname, param);
        }
        
        public unsafe static void glFogiv(int pname, int* _params) {
            Pointers.glFogiv(pname, _params);
        }
        
        public unsafe static void glFogiv(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glFogiv(pname, _params_);
        }
        
        public unsafe static void glFogx(int pname, IntPtr param) {
            Pointers.glFogx(pname, param);
        }
        
        public unsafe static void glFogxOES(int pname, IntPtr param) {
            Pointers.glFogxOES(pname, param);
        }
        
        public unsafe static void glFogxv(int pname, IntPtr* param) {
            Pointers.glFogxv(pname, param);
        }
        
        public unsafe static void glFogxv(int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glFogxv(pname, param_);
        }
        
        public unsafe static void glFogxvOES(int pname, IntPtr* param) {
            Pointers.glFogxvOES(pname, param);
        }
        
        public unsafe static void glFogxvOES(int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glFogxvOES(pname, param_);
        }
        
        public unsafe static void glFragmentColorMaterialSGIX(int face, int mode) {
            Pointers.glFragmentColorMaterialSGIX(face, mode);
        }
        
        public unsafe static void glFragmentCoverageColorNV(uint color) {
            Pointers.glFragmentCoverageColorNV(color);
        }
        
        public unsafe static void glFragmentLightModelfSGIX(int pname, float param) {
            Pointers.glFragmentLightModelfSGIX(pname, param);
        }
        
        public unsafe static void glFragmentLightModelfvSGIX(int pname, float* _params) {
            Pointers.glFragmentLightModelfvSGIX(pname, _params);
        }
        
        public unsafe static void glFragmentLightModelfvSGIX(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glFragmentLightModelfvSGIX(pname, _params_);
        }
        
        public unsafe static void glFragmentLightModeliSGIX(int pname, int param) {
            Pointers.glFragmentLightModeliSGIX(pname, param);
        }
        
        public unsafe static void glFragmentLightModelivSGIX(int pname, int* _params) {
            Pointers.glFragmentLightModelivSGIX(pname, _params);
        }
        
        public unsafe static void glFragmentLightModelivSGIX(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glFragmentLightModelivSGIX(pname, _params_);
        }
        
        public unsafe static void glFragmentLightfSGIX(int light, int pname, float param) {
            Pointers.glFragmentLightfSGIX(light, pname, param);
        }
        
        public unsafe static void glFragmentLightfvSGIX(int light, int pname, float* _params) {
            Pointers.glFragmentLightfvSGIX(light, pname, _params);
        }
        
        public unsafe static void glFragmentLightfvSGIX(int light, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glFragmentLightfvSGIX(light, pname, _params_);
        }
        
        public unsafe static void glFragmentLightiSGIX(int light, int pname, int param) {
            Pointers.glFragmentLightiSGIX(light, pname, param);
        }
        
        public unsafe static void glFragmentLightivSGIX(int light, int pname, int* _params) {
            Pointers.glFragmentLightivSGIX(light, pname, _params);
        }
        
        public unsafe static void glFragmentLightivSGIX(int light, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glFragmentLightivSGIX(light, pname, _params_);
        }
        
        public unsafe static void glFragmentMaterialfSGIX(int face, int pname, float param) {
            Pointers.glFragmentMaterialfSGIX(face, pname, param);
        }
        
        public unsafe static void glFragmentMaterialfvSGIX(int face, int pname, float* _params) {
            Pointers.glFragmentMaterialfvSGIX(face, pname, _params);
        }
        
        public unsafe static void glFragmentMaterialfvSGIX(int face, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glFragmentMaterialfvSGIX(face, pname, _params_);
        }
        
        public unsafe static void glFragmentMaterialiSGIX(int face, int pname, int param) {
            Pointers.glFragmentMaterialiSGIX(face, pname, param);
        }
        
        public unsafe static void glFragmentMaterialivSGIX(int face, int pname, int* _params) {
            Pointers.glFragmentMaterialivSGIX(face, pname, _params);
        }
        
        public unsafe static void glFragmentMaterialivSGIX(int face, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glFragmentMaterialivSGIX(face, pname, _params_);
        }
        
        public unsafe static void glFrameTerminatorGREMEDY() {
            Pointers.glFrameTerminatorGREMEDY();
        }
        
        public unsafe static void glFrameZoomSGIX(int factor) {
            Pointers.glFrameZoomSGIX(factor);
        }
        
        public unsafe static void glFramebufferDrawBufferEXT(uint framebuffer, int mode) {
            Pointers.glFramebufferDrawBufferEXT(framebuffer, mode);
        }
        
        public unsafe static void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint* bufs) {
            Pointers.glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
        }
        
        public unsafe static void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glFramebufferDrawBuffersEXT(framebuffer, n, bufs_);
        }
        
        public unsafe static void glFramebufferFetchBarrierEXT() {
            Pointers.glFramebufferFetchBarrierEXT();
        }
        
        public unsafe static void glFramebufferFetchBarrierQCOM() {
            Pointers.glFramebufferFetchBarrierQCOM();
        }
        
        public unsafe static void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures) {
            Pointers.glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
        }
        
        public unsafe static void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, out uint providedFeatures) {
            fixed(uint* providedFeatures_ = &providedFeatures)
                Pointers.glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures_);
        }
        
        public unsafe static void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) {
            Pointers.glFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        public unsafe static void glFramebufferParameteri(int target, int pname, int param) {
            Pointers.glFramebufferParameteri(target, pname, param);
        }
        
        public unsafe static void glFramebufferPixelLocalStorageSizeEXT(uint target, int size) {
            Pointers.glFramebufferPixelLocalStorageSizeEXT(target, size);
        }
        
        public unsafe static void glFramebufferReadBufferEXT(uint framebuffer, int mode) {
            Pointers.glFramebufferReadBufferEXT(framebuffer, mode);
        }
        
        public unsafe static void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, uint renderbuffer) {
            Pointers.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public unsafe static void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, uint renderbuffer) {
            Pointers.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public unsafe static void glFramebufferRenderbufferOES(int target, int attachment, int renderbuffertarget, uint renderbuffer) {
            Pointers.glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public unsafe static void glFramebufferSampleLocationsfvARB(int target, uint start, int count, float* v) {
            Pointers.glFramebufferSampleLocationsfvARB(target, start, count, v);
        }
        
        public unsafe static void glFramebufferSampleLocationsfvARB(int target, uint start, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glFramebufferSampleLocationsfvARB(target, start, count, v_);
        }
        
        public unsafe static void glFramebufferSampleLocationsfvNV(int target, uint start, int count, float* v) {
            Pointers.glFramebufferSampleLocationsfvNV(target, start, count, v);
        }
        
        public unsafe static void glFramebufferSampleLocationsfvNV(int target, uint start, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glFramebufferSampleLocationsfvNV(target, start, count, v_);
        }
        
        public unsafe static void glFramebufferSamplePositionsfvAMD(int target, uint numsamples, uint pixelindex, float* values) {
            Pointers.glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);
        }
        
        public unsafe static void glFramebufferSamplePositionsfvAMD(int target, uint numsamples, uint pixelindex, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values_);
        }
        
        public unsafe static void glFramebufferTexture(int target, int attachment, uint texture, int level) {
            Pointers.glFramebufferTexture(target, attachment, texture, level);
        }
        
        public unsafe static void glFramebufferTexture1D(int target, int attachment, int textarget, uint texture, int level) {
            Pointers.glFramebufferTexture1D(target, attachment, textarget, texture, level);
        }
        
        public unsafe static void glFramebufferTexture1DEXT(int target, int attachment, int textarget, uint texture, int level) {
            Pointers.glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
        }
        
        public unsafe static void glFramebufferTexture2D(int target, int attachment, int textarget, uint texture, int level) {
            Pointers.glFramebufferTexture2D(target, attachment, textarget, texture, level);
        }
        
        public unsafe static void glFramebufferTexture2DEXT(int target, int attachment, int textarget, uint texture, int level) {
            Pointers.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
        }
        
        public unsafe static void glFramebufferTexture2DDownsampleIMG(int target, int attachment, int textarget, uint texture, int level, int xscale, int yscale) {
            Pointers.glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale);
        }
        
        public unsafe static void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, uint texture, int level, int samples) {
            Pointers.glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
        }
        
        public unsafe static void glFramebufferTexture2DMultisampleIMG(int target, int attachment, int textarget, uint texture, int level, int samples) {
            Pointers.glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
        }
        
        public unsafe static void glFramebufferTexture2DOES(int target, int attachment, int textarget, uint texture, int level) {
            Pointers.glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
        }
        
        public unsafe static void glFramebufferTexture3D(int target, int attachment, int textarget, uint texture, int level, int zoffset) {
            Pointers.glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
        }
        
        public unsafe static void glFramebufferTexture3DEXT(int target, int attachment, int textarget, uint texture, int level, int zoffset) {
            Pointers.glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
        }
        
        public unsafe static void glFramebufferTexture3DOES(int target, int attachment, int textarget, uint texture, int level, int zoffset) {
            Pointers.glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
        }
        
        public unsafe static void glFramebufferTextureARB(int target, int attachment, uint texture, int level) {
            Pointers.glFramebufferTextureARB(target, attachment, texture, level);
        }
        
        public unsafe static void glFramebufferTextureEXT(int target, int attachment, uint texture, int level) {
            Pointers.glFramebufferTextureEXT(target, attachment, texture, level);
        }
        
        public unsafe static void glFramebufferTextureFaceARB(int target, int attachment, uint texture, int level, int face) {
            Pointers.glFramebufferTextureFaceARB(target, attachment, texture, level, face);
        }
        
        public unsafe static void glFramebufferTextureFaceEXT(int target, int attachment, uint texture, int level, int face) {
            Pointers.glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
        }
        
        public unsafe static void glFramebufferTextureLayer(int target, int attachment, uint texture, int level, int layer) {
            Pointers.glFramebufferTextureLayer(target, attachment, texture, level, layer);
        }
        
        public unsafe static void glFramebufferTextureLayerARB(int target, int attachment, uint texture, int level, int layer) {
            Pointers.glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
        }
        
        public unsafe static void glFramebufferTextureLayerEXT(int target, int attachment, uint texture, int level, int layer) {
            Pointers.glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
        }
        
        public unsafe static void glFramebufferTextureLayerDownsampleIMG(int target, int attachment, uint texture, int level, int layer, int xscale, int yscale) {
            Pointers.glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale);
        }
        
        public unsafe static void glFramebufferTextureMultisampleMultiviewOVR(int target, int attachment, uint texture, int level, int samples, int baseViewIndex, int numViews) {
            Pointers.glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews);
        }
        
        public unsafe static void glFramebufferTextureMultiviewOVR(int target, int attachment, uint texture, int level, int baseViewIndex, int numViews) {
            Pointers.glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
        }
        
        public unsafe static void glFramebufferTextureOES(int target, int attachment, uint texture, int level) {
            Pointers.glFramebufferTextureOES(target, attachment, texture, level);
        }
        
        public unsafe static void glFreeObjectBufferATI(uint buffer) {
            Pointers.glFreeObjectBufferATI(buffer);
        }
        
        public unsafe static void glFrontFace(int mode) {
            Pointers.glFrontFace(mode);
        }
        
        public unsafe static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar) {
            Pointers.glFrustum(left, right, bottom, top, zNear, zFar);
        }
        
        public unsafe static void glFrustumf(float l, float r, float b, float t, float n, float f) {
            Pointers.glFrustumf(l, r, b, t, n, f);
        }
        
        public unsafe static void glFrustumfOES(float l, float r, float b, float t, float n, float f) {
            Pointers.glFrustumfOES(l, r, b, t, n, f);
        }
        
        public unsafe static void glFrustumx(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f) {
            Pointers.glFrustumx(l, r, b, t, n, f);
        }
        
        public unsafe static void glFrustumxOES(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f) {
            Pointers.glFrustumxOES(l, r, b, t, n, f);
        }
        
        public unsafe static uint glGenAsyncMarkersSGIX(int range) {
            return Pointers.glGenAsyncMarkersSGIX(range);
        }
        
        public unsafe static void glGenBuffers(int n, uint* buffers) {
            Pointers.glGenBuffers(n, buffers);
        }
        
        public unsafe static void glGenBuffers(int n, uint[] buffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glGenBuffers(n, buffers_);
        }
        
        public static uint glGenBuffer() {
            var buffers_ = new uint[1];
            glGenBuffers(1, buffers_);
            return buffers_[0];
        }
        
        public unsafe static void glGenBuffersARB(int n, uint* buffers) {
            Pointers.glGenBuffersARB(n, buffers);
        }
        
        public unsafe static void glGenBuffersARB(int n, uint[] buffers) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glGenBuffersARB(n, buffers_);
        }
        
        public static uint glGenBuffersARB() {
            var buffers_ = new uint[1];
            glGenBuffersARB(1, buffers_);
            return buffers_[0];
        }
        
        public unsafe static void glGenFencesAPPLE(int n, uint* fences) {
            Pointers.glGenFencesAPPLE(n, fences);
        }
        
        public unsafe static void glGenFencesAPPLE(int n, uint[] fences) {
            fixed(uint* fences_ = &fences[0])
                Pointers.glGenFencesAPPLE(n, fences_);
        }
        
        public static uint glGenFencesAPPLE() {
            var fences_ = new uint[1];
            glGenFencesAPPLE(1, fences_);
            return fences_[0];
        }
        
        public unsafe static void glGenFencesNV(int n, uint* fences) {
            Pointers.glGenFencesNV(n, fences);
        }
        
        public unsafe static void glGenFencesNV(int n, uint[] fences) {
            fixed(uint* fences_ = &fences[0])
                Pointers.glGenFencesNV(n, fences_);
        }
        
        public static uint glGenFencesNV() {
            var fences_ = new uint[1];
            glGenFencesNV(1, fences_);
            return fences_[0];
        }
        
        public unsafe static uint glGenFragmentShadersATI(uint range) {
            return Pointers.glGenFragmentShadersATI(range);
        }
        
        public unsafe static void glGenFramebuffers(int n, uint* framebuffers) {
            Pointers.glGenFramebuffers(n, framebuffers);
        }
        
        public unsafe static void glGenFramebuffers(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glGenFramebuffers(n, framebuffers_);
        }
        
        public static uint glGenFramebuffer() {
            var framebuffers_ = new uint[1];
            glGenFramebuffers(1, framebuffers_);
            return framebuffers_[0];
        }
        
        public unsafe static void glGenFramebuffersEXT(int n, uint* framebuffers) {
            Pointers.glGenFramebuffersEXT(n, framebuffers);
        }
        
        public unsafe static void glGenFramebuffersEXT(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glGenFramebuffersEXT(n, framebuffers_);
        }
        
        public static uint glGenFramebuffersEXT() {
            var framebuffers_ = new uint[1];
            glGenFramebuffersEXT(1, framebuffers_);
            return framebuffers_[0];
        }
        
        public unsafe static void glGenFramebuffersOES(int n, uint* framebuffers) {
            Pointers.glGenFramebuffersOES(n, framebuffers);
        }
        
        public unsafe static void glGenFramebuffersOES(int n, uint[] framebuffers) {
            fixed(uint* framebuffers_ = &framebuffers[0])
                Pointers.glGenFramebuffersOES(n, framebuffers_);
        }
        
        public static uint glGenFramebuffersOES() {
            var framebuffers_ = new uint[1];
            glGenFramebuffersOES(1, framebuffers_);
            return framebuffers_[0];
        }
        
        public unsafe static uint glGenLists(int range) {
            return Pointers.glGenLists(range);
        }
        
        public unsafe static void glGenNamesAMD(int identifier, uint num, uint* names) {
            Pointers.glGenNamesAMD(identifier, num, names);
        }
        
        public unsafe static void glGenNamesAMD(int identifier, uint num, uint[] names) {
            fixed(uint* names_ = &names[0])
                Pointers.glGenNamesAMD(identifier, num, names_);
        }
        
        public unsafe static void glGenOcclusionQueriesNV(int n, uint* ids) {
            Pointers.glGenOcclusionQueriesNV(n, ids);
        }
        
        public unsafe static void glGenOcclusionQueriesNV(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glGenOcclusionQueriesNV(n, ids_);
        }
        
        public static uint glGenOcclusionQueriesNV() {
            var ids_ = new uint[1];
            glGenOcclusionQueriesNV(1, ids_);
            return ids_[0];
        }
        
        public unsafe static uint glGenPathsNV(int range) {
            return Pointers.glGenPathsNV(range);
        }
        
        public unsafe static void glGenPerfMonitorsAMD(int n, uint* monitors) {
            Pointers.glGenPerfMonitorsAMD(n, monitors);
        }
        
        public unsafe static void glGenPerfMonitorsAMD(int n, uint[] monitors) {
            fixed(uint* monitors_ = &monitors[0])
                Pointers.glGenPerfMonitorsAMD(n, monitors_);
        }
        
        public static uint glGenPerfMonitorsAMD() {
            var monitors_ = new uint[1];
            glGenPerfMonitorsAMD(1, monitors_);
            return monitors_[0];
        }
        
        public unsafe static void glGenProgramPipelines(int n, uint* pipelines) {
            Pointers.glGenProgramPipelines(n, pipelines);
        }
        
        public unsafe static void glGenProgramPipelines(int n, uint[] pipelines) {
            fixed(uint* pipelines_ = &pipelines[0])
                Pointers.glGenProgramPipelines(n, pipelines_);
        }
        
        public static uint glGenProgramPipeline() {
            var pipelines_ = new uint[1];
            glGenProgramPipelines(1, pipelines_);
            return pipelines_[0];
        }
        
        public unsafe static void glGenProgramPipelinesEXT(int n, uint* pipelines) {
            Pointers.glGenProgramPipelinesEXT(n, pipelines);
        }
        
        public unsafe static void glGenProgramPipelinesEXT(int n, uint[] pipelines) {
            fixed(uint* pipelines_ = &pipelines[0])
                Pointers.glGenProgramPipelinesEXT(n, pipelines_);
        }
        
        public static uint glGenProgramPipelinesEXT() {
            var pipelines_ = new uint[1];
            glGenProgramPipelinesEXT(1, pipelines_);
            return pipelines_[0];
        }
        
        public unsafe static void glGenProgramsARB(int n, uint* programs) {
            Pointers.glGenProgramsARB(n, programs);
        }
        
        public unsafe static void glGenProgramsARB(int n, uint[] programs) {
            fixed(uint* programs_ = &programs[0])
                Pointers.glGenProgramsARB(n, programs_);
        }
        
        public static uint glGenProgramsARB() {
            var programs_ = new uint[1];
            glGenProgramsARB(1, programs_);
            return programs_[0];
        }
        
        public unsafe static void glGenProgramsNV(int n, uint* programs) {
            Pointers.glGenProgramsNV(n, programs);
        }
        
        public unsafe static void glGenProgramsNV(int n, uint[] programs) {
            fixed(uint* programs_ = &programs[0])
                Pointers.glGenProgramsNV(n, programs_);
        }
        
        public static uint glGenProgramsNV() {
            var programs_ = new uint[1];
            glGenProgramsNV(1, programs_);
            return programs_[0];
        }
        
        public unsafe static void glGenQueries(int n, uint* ids) {
            Pointers.glGenQueries(n, ids);
        }
        
        public unsafe static void glGenQueries(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glGenQueries(n, ids_);
        }
        
        public static uint glGenQuerie() {
            var ids_ = new uint[1];
            glGenQueries(1, ids_);
            return ids_[0];
        }
        
        public unsafe static void glGenQueriesARB(int n, uint* ids) {
            Pointers.glGenQueriesARB(n, ids);
        }
        
        public unsafe static void glGenQueriesARB(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glGenQueriesARB(n, ids_);
        }
        
        public static uint glGenQueriesARB() {
            var ids_ = new uint[1];
            glGenQueriesARB(1, ids_);
            return ids_[0];
        }
        
        public unsafe static void glGenQueriesEXT(int n, uint* ids) {
            Pointers.glGenQueriesEXT(n, ids);
        }
        
        public unsafe static void glGenQueriesEXT(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glGenQueriesEXT(n, ids_);
        }
        
        public static uint glGenQueriesEXT() {
            var ids_ = new uint[1];
            glGenQueriesEXT(1, ids_);
            return ids_[0];
        }
        
        public unsafe static void glGenQueryResourceTagNV(int n, int* tagIds) {
            Pointers.glGenQueryResourceTagNV(n, tagIds);
        }
        
        public unsafe static void glGenQueryResourceTagNV(int n, int[] tagIds) {
            fixed(int* tagIds_ = &tagIds[0])
                Pointers.glGenQueryResourceTagNV(n, tagIds_);
        }
        
        public static int glGenQueryResourceTagNV() {
            var tagIds_ = new int[1];
            glGenQueryResourceTagNV(1, tagIds_);
            return tagIds_[0];
        }
        
        public unsafe static void glGenRenderbuffers(int n, uint* renderbuffers) {
            Pointers.glGenRenderbuffers(n, renderbuffers);
        }
        
        public unsafe static void glGenRenderbuffers(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glGenRenderbuffers(n, renderbuffers_);
        }
        
        public static uint glGenRenderbuffer() {
            var renderbuffers_ = new uint[1];
            glGenRenderbuffers(1, renderbuffers_);
            return renderbuffers_[0];
        }
        
        public unsafe static void glGenRenderbuffersEXT(int n, uint* renderbuffers) {
            Pointers.glGenRenderbuffersEXT(n, renderbuffers);
        }
        
        public unsafe static void glGenRenderbuffersEXT(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glGenRenderbuffersEXT(n, renderbuffers_);
        }
        
        public static uint glGenRenderbuffersEXT() {
            var renderbuffers_ = new uint[1];
            glGenRenderbuffersEXT(1, renderbuffers_);
            return renderbuffers_[0];
        }
        
        public unsafe static void glGenRenderbuffersOES(int n, uint* renderbuffers) {
            Pointers.glGenRenderbuffersOES(n, renderbuffers);
        }
        
        public unsafe static void glGenRenderbuffersOES(int n, uint[] renderbuffers) {
            fixed(uint* renderbuffers_ = &renderbuffers[0])
                Pointers.glGenRenderbuffersOES(n, renderbuffers_);
        }
        
        public static uint glGenRenderbuffersOES() {
            var renderbuffers_ = new uint[1];
            glGenRenderbuffersOES(1, renderbuffers_);
            return renderbuffers_[0];
        }
        
        public unsafe static void glGenSamplers(int count, uint* samplers) {
            Pointers.glGenSamplers(count, samplers);
        }
        
        public unsafe static void glGenSamplers(int count, uint[] samplers) {
            fixed(uint* samplers_ = &samplers[0])
                Pointers.glGenSamplers(count, samplers_);
        }
        
        public static uint glGenSampler() {
            var samplers_ = new uint[1];
            glGenSamplers(1, samplers_);
            return samplers_[0];
        }
        
        public unsafe static void glGenSemaphoresEXT(int n, uint* semaphores) {
            Pointers.glGenSemaphoresEXT(n, semaphores);
        }
        
        public unsafe static void glGenSemaphoresEXT(int n, uint[] semaphores) {
            fixed(uint* semaphores_ = &semaphores[0])
                Pointers.glGenSemaphoresEXT(n, semaphores_);
        }
        
        public static uint glGenSemaphoresEXT() {
            var semaphores_ = new uint[1];
            glGenSemaphoresEXT(1, semaphores_);
            return semaphores_[0];
        }
        
        public unsafe static uint glGenSymbolsEXT(int datatype, int storagetype, int range, uint components) {
            return Pointers.glGenSymbolsEXT(datatype, storagetype, range, components);
        }
        
        public unsafe static void glGenTextures(int n, uint* textures) {
            Pointers.glGenTextures(n, textures);
        }
        
        public unsafe static void glGenTextures(int n, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glGenTextures(n, textures_);
        }
        
        public static uint glGenTexture() {
            var textures_ = new uint[1];
            glGenTextures(1, textures_);
            return textures_[0];
        }
        
        public unsafe static void glGenTexturesEXT(int n, uint* textures) {
            Pointers.glGenTexturesEXT(n, textures);
        }
        
        public unsafe static void glGenTexturesEXT(int n, uint[] textures) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glGenTexturesEXT(n, textures_);
        }
        
        public static uint glGenTexturesEXT() {
            var textures_ = new uint[1];
            glGenTexturesEXT(1, textures_);
            return textures_[0];
        }
        
        public unsafe static void glGenTransformFeedbacks(int n, uint* ids) {
            Pointers.glGenTransformFeedbacks(n, ids);
        }
        
        public unsafe static void glGenTransformFeedbacks(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glGenTransformFeedbacks(n, ids_);
        }
        
        public static uint glGenTransformFeedback() {
            var ids_ = new uint[1];
            glGenTransformFeedbacks(1, ids_);
            return ids_[0];
        }
        
        public unsafe static void glGenTransformFeedbacksNV(int n, uint* ids) {
            Pointers.glGenTransformFeedbacksNV(n, ids);
        }
        
        public unsafe static void glGenTransformFeedbacksNV(int n, uint[] ids) {
            fixed(uint* ids_ = &ids[0])
                Pointers.glGenTransformFeedbacksNV(n, ids_);
        }
        
        public static uint glGenTransformFeedbacksNV() {
            var ids_ = new uint[1];
            glGenTransformFeedbacksNV(1, ids_);
            return ids_[0];
        }
        
        public unsafe static void glGenVertexArrays(int n, uint* arrays) {
            Pointers.glGenVertexArrays(n, arrays);
        }
        
        public unsafe static void glGenVertexArrays(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glGenVertexArrays(n, arrays_);
        }
        
        public static uint glGenVertexArray() {
            var arrays_ = new uint[1];
            glGenVertexArrays(1, arrays_);
            return arrays_[0];
        }
        
        public unsafe static void glGenVertexArraysAPPLE(int n, uint* arrays) {
            Pointers.glGenVertexArraysAPPLE(n, arrays);
        }
        
        public unsafe static void glGenVertexArraysAPPLE(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glGenVertexArraysAPPLE(n, arrays_);
        }
        
        public static uint glGenVertexArraysAPPLE() {
            var arrays_ = new uint[1];
            glGenVertexArraysAPPLE(1, arrays_);
            return arrays_[0];
        }
        
        public unsafe static void glGenVertexArraysOES(int n, uint* arrays) {
            Pointers.glGenVertexArraysOES(n, arrays);
        }
        
        public unsafe static void glGenVertexArraysOES(int n, uint[] arrays) {
            fixed(uint* arrays_ = &arrays[0])
                Pointers.glGenVertexArraysOES(n, arrays_);
        }
        
        public static uint glGenVertexArraysOES() {
            var arrays_ = new uint[1];
            glGenVertexArraysOES(1, arrays_);
            return arrays_[0];
        }
        
        public unsafe static uint glGenVertexShadersEXT(uint range) {
            return Pointers.glGenVertexShadersEXT(range);
        }
        
        public unsafe static void glGenerateMipmap(int target) {
            Pointers.glGenerateMipmap(target);
        }
        
        public unsafe static void glGenerateMipmapEXT(int target) {
            Pointers.glGenerateMipmapEXT(target);
        }
        
        public unsafe static void glGenerateMipmapOES(int target) {
            Pointers.glGenerateMipmapOES(target);
        }
        
        public unsafe static void glGenerateMultiTexMipmapEXT(int texunit, int target) {
            Pointers.glGenerateMultiTexMipmapEXT(texunit, target);
        }
        
        public unsafe static void glGenerateTextureMipmap(uint texture) {
            Pointers.glGenerateTextureMipmap(texture);
        }
        
        public unsafe static void glGenerateTextureMipmapEXT(uint texture, int target) {
            Pointers.glGenerateTextureMipmapEXT(texture, target);
        }
        
        public unsafe static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, int pname, int* _params) {
            Pointers.glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, _params);
        }
        
        public unsafe static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, _params_);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetActiveAttrib(program, index, bufSize, length, size, type, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttrib(program, index, bufSize, length, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetActiveAttrib(program, index, bufSize, length, size_, type, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttrib(program, index, bufSize, length, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveAttrib(program, index, bufSize, length_, size, type, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttrib(program, index, bufSize, length_, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetActiveAttrib(program, index, bufSize, length_, size_, type, name);
        }
        
        public unsafe static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttrib(program, index, bufSize, length_, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length, size_, type, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length_, size, type, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length_, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length_, size_, type, name);
        }
        
        public unsafe static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveAttribARB(programObj, index, maxLength, length_, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveSubroutineName(uint program, int shadertype, uint index, int bufsize, int* length, StringBuilder name) {
            Pointers.glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
        }
        
        public unsafe static void glGetActiveSubroutineName(uint program, int shadertype, uint index, int bufsize, out int length, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveSubroutineName(program, shadertype, index, bufsize, length_, name);
        }
        
        public unsafe static void glGetActiveSubroutineName(uint program, Enums.ShaderType shadertype, uint index, int bufsize, int* length, StringBuilder name) {
            Pointers.glGetActiveSubroutineName(program, (int)shadertype, index, bufsize, length, name);
        }
        
        public unsafe static void glGetActiveSubroutineName(uint program, Enums.ShaderType shadertype, uint index, int bufsize, out int length, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveSubroutineName(program, (int)shadertype, index, bufsize, length_, name);
        }
        
        public unsafe static void glGetActiveSubroutineUniformName(uint program, int shadertype, uint index, int bufsize, int* length, StringBuilder name) {
            Pointers.glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
        }
        
        public unsafe static void glGetActiveSubroutineUniformName(uint program, int shadertype, uint index, int bufsize, out int length, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length_, name);
        }
        
        public unsafe static void glGetActiveSubroutineUniformName(uint program, Enums.ShaderType shadertype, uint index, int bufsize, int* length, StringBuilder name) {
            Pointers.glGetActiveSubroutineUniformName(program, (int)shadertype, index, bufsize, length, name);
        }
        
        public unsafe static void glGetActiveSubroutineUniformName(uint program, Enums.ShaderType shadertype, uint index, int bufsize, out int length, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveSubroutineUniformName(program, (int)shadertype, index, bufsize, length_, name);
        }
        
        public unsafe static void glGetActiveSubroutineUniformiv(uint program, int shadertype, uint index, int pname, int* values) {
            Pointers.glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
        }
        
        public unsafe static void glGetActiveSubroutineUniformiv(uint program, int shadertype, uint index, int pname, int[] values) {
            fixed(int* values_ = &values[0])
                Pointers.glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values_);
        }
        
        public unsafe static void glGetActiveSubroutineUniformiv(uint program, Enums.ShaderType shadertype, uint index, int pname, int* values) {
            Pointers.glGetActiveSubroutineUniformiv(program, (int)shadertype, index, pname, values);
        }
        
        public unsafe static void glGetActiveSubroutineUniformiv(uint program, Enums.ShaderType shadertype, uint index, int pname, int[] values) {
            fixed(int* values_ = &values[0])
                Pointers.glGetActiveSubroutineUniformiv(program, (int)shadertype, index, pname, values_);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetActiveUniform(program, index, bufSize, length, size, type, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniform(program, index, bufSize, length, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetActiveUniform(program, index, bufSize, length, size_, type, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, int* length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniform(program, index, bufSize, length, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveUniform(program, index, bufSize, length_, size, type, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniform(program, index, bufSize, length_, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetActiveUniform(program, index, bufSize, length_, size_, type, name);
        }
        
        public unsafe static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniform(program, index, bufSize, length_, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, int* length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length, size_, type, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, int* length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length_, size, type, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, int* size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length_, size, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length_, size_, type, name);
        }
        
        public unsafe static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, out int size, out Enums.AttributeType type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(Enums.AttributeType* type_ = &type)
                Pointers.glGetActiveUniformARB(programObj, index, maxLength, length_, size_, (int*)type_, name);
        }
        
        public unsafe static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, StringBuilder uniformBlockName) {
            Pointers.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        
        public unsafe static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, StringBuilder uniformBlockName) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_, uniformBlockName);
        }
        
        public unsafe static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int* _params) {
            Pointers.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, _params);
        }
        
        public unsafe static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, _params_);
        }
        
        public unsafe static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, StringBuilder uniformName) {
            Pointers.glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
        }
        
        public unsafe static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, StringBuilder uniformName) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveUniformName(program, uniformIndex, bufSize, length_, uniformName);
        }
        
        public unsafe static void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int* _params) {
            Pointers.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, _params);
        }
        
        public unsafe static void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, _params_);
        }
        
        public unsafe static void glGetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, int pname, int* _params) {
            fixed(uint* uniformIndices_ = &uniformIndices[0])
                Pointers.glGetActiveUniformsiv(program, uniformCount, uniformIndices_, pname, _params);
        }
        
        public unsafe static void glGetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, int pname, int[] _params) {
            fixed(uint* uniformIndices_ = &uniformIndices[0])
            fixed(int* _params_ = &_params[0])
                Pointers.glGetActiveUniformsiv(program, uniformCount, uniformIndices_, pname, _params_);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, out int type, StringBuilder name) {
            fixed(int* type_ = &type)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length, size, type_, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length, size_, type, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, out int size, out int type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(int* type_ = &type)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length, size_, type_, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length_, size, type, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, out int length, int* size, out int type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* type_ = &type)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length_, size, type_, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length_, size_, type, name);
        }
        
        public unsafe static void glGetActiveVaryingNV(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(int* type_ = &type)
                Pointers.glGetActiveVaryingNV(program, index, bufSize, length_, size_, type_, name);
        }
        
        public unsafe static void glGetArrayObjectfvATI(int array, int pname, float* _params) {
            Pointers.glGetArrayObjectfvATI(array, pname, _params);
        }
        
        public unsafe static void glGetArrayObjectfvATI(int array, int pname, out float _params) {
            fixed(float* _params_ = &_params)
                Pointers.glGetArrayObjectfvATI(array, pname, _params_);
        }
        
        public unsafe static void glGetArrayObjectivATI(int array, int pname, int* _params) {
            Pointers.glGetArrayObjectivATI(array, pname, _params);
        }
        
        public unsafe static void glGetArrayObjectivATI(int array, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetArrayObjectivATI(array, pname, _params_);
        }
        
        public unsafe static void glGetAttachedObjectsARB(uint containerObj, int maxCount, int* count, uint* obj) {
            Pointers.glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
        }
        
        public unsafe static void glGetAttachedObjectsARB(uint containerObj, int maxCount, int* count, uint[] obj) {
            fixed(uint* obj_ = &obj[0])
                Pointers.glGetAttachedObjectsARB(containerObj, maxCount, count, obj_);
        }
        
        public unsafe static void glGetAttachedObjectsARB(uint containerObj, int maxCount, out int count, uint* obj) {
            fixed(int* count_ = &count)
                Pointers.glGetAttachedObjectsARB(containerObj, maxCount, count_, obj);
        }
        
        public unsafe static void glGetAttachedObjectsARB(uint containerObj, int maxCount, out int count, uint[] obj) {
            fixed(int* count_ = &count)
            fixed(uint* obj_ = &obj[0])
                Pointers.glGetAttachedObjectsARB(containerObj, maxCount, count_, obj_);
        }
        
        public unsafe static void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders) {
            Pointers.glGetAttachedShaders(program, maxCount, count, shaders);
        }
        
        public unsafe static void glGetAttachedShaders(uint program, int maxCount, int* count, uint[] shaders) {
            fixed(uint* shaders_ = &shaders[0])
                Pointers.glGetAttachedShaders(program, maxCount, count, shaders_);
        }
        
        public unsafe static void glGetAttachedShaders(uint program, int maxCount, out int count, uint* shaders) {
            fixed(int* count_ = &count)
                Pointers.glGetAttachedShaders(program, maxCount, count_, shaders);
        }
        
        public unsafe static void glGetAttachedShaders(uint program, int maxCount, out int count, uint[] shaders) {
            fixed(int* count_ = &count)
            fixed(uint* shaders_ = &shaders[0])
                Pointers.glGetAttachedShaders(program, maxCount, count_, shaders_);
        }
        
        public unsafe static int glGetAttribLocation(uint program, string name) {
            return Pointers.glGetAttribLocation(program, name);
        }
        
        public unsafe static int glGetAttribLocationARB(uint programObj, string name) {
            return Pointers.glGetAttribLocationARB(programObj, name);
        }
        
        public unsafe static void glGetBooleanIndexedvEXT(int target, uint index, bool* data) {
            Pointers.glGetBooleanIndexedvEXT(target, index, data);
        }
        
        public unsafe static void glGetBooleanIndexedvEXT(int target, uint index, bool[] data) {
            fixed(bool* data_ = &data[0])
                Pointers.glGetBooleanIndexedvEXT(target, index, data_);
        }
        
        public unsafe static void glGetBooleani_v(int target, uint index, bool* data) {
            Pointers.glGetBooleani_v(target, index, data);
        }
        
        public unsafe static void glGetBooleani_v(int target, uint index, bool[] data) {
            fixed(bool* data_ = &data[0])
                Pointers.glGetBooleani_v(target, index, data_);
        }
        
        public unsafe static void glGetBooleanv(int pname, bool* data) {
            Pointers.glGetBooleanv(pname, data);
        }
        
        public unsafe static void glGetBooleanv(int pname, bool[] data) {
            fixed(bool* data_ = &data[0])
                Pointers.glGetBooleanv(pname, data_);
        }
        
        public unsafe static bool glGetBooleanv(int pname) {
            bool data;
            glGetBooleanv(pname, &data);
            return data;
        }
        
        public unsafe static void glGetBufferParameteri64v(int target, int pname, long* _params) {
            Pointers.glGetBufferParameteri64v(target, pname, _params);
        }
        
        public unsafe static void glGetBufferParameteri64v(int target, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetBufferParameteri64v(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferParameteriv(int target, int pname, int* _params) {
            Pointers.glGetBufferParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetBufferParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetBufferParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferParameterivARB(int target, int pname, int* _params) {
            Pointers.glGetBufferParameterivARB(target, pname, _params);
        }
        
        public unsafe static void glGetBufferParameterivARB(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetBufferParameterivARB(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferParameterui64vNV(int target, int pname, ulong* _params) {
            Pointers.glGetBufferParameterui64vNV(target, pname, _params);
        }
        
        public unsafe static void glGetBufferParameterui64vNV(int target, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetBufferParameterui64vNV(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferPointerv(int target, int pname, IntPtr* _params) {
            Pointers.glGetBufferPointerv(target, pname, _params);
        }
        
        public unsafe static void glGetBufferPointerv(int target, int pname, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetBufferPointerv(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferPointervARB(int target, int pname, IntPtr* _params) {
            Pointers.glGetBufferPointervARB(target, pname, _params);
        }
        
        public unsafe static void glGetBufferPointervARB(int target, int pname, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetBufferPointervARB(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferPointervOES(int target, int pname, IntPtr* _params) {
            Pointers.glGetBufferPointervOES(target, pname, _params);
        }
        
        public unsafe static void glGetBufferPointervOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetBufferPointervOES(target, pname, _params_);
        }
        
        public unsafe static void glGetBufferSubData(int target, uint offset, uint size, IntPtr data) {
            Pointers.glGetBufferSubData(target, offset, size, data);
        }
        
        public unsafe static void glGetBufferSubDataARB(int target, IntPtr offset, uint size, IntPtr data) {
            Pointers.glGetBufferSubDataARB(target, offset, size, data);
        }
        
        public unsafe static void glGetClipPlane(int plane, double* equation) {
            Pointers.glGetClipPlane(plane, equation);
        }
        
        public unsafe static void glGetClipPlane(int plane, double[] equation) {
            fixed(double* equation_ = &equation[0])
                Pointers.glGetClipPlane(plane, equation_);
        }
        
        public unsafe static void glGetClipPlanef(int plane, float* equation) {
            Pointers.glGetClipPlanef(plane, equation);
        }
        
        public unsafe static void glGetClipPlanef(int plane, float[] equation) {
            fixed(float* equation_ = &equation[0])
                Pointers.glGetClipPlanef(plane, equation_);
        }
        
        public unsafe static void glGetClipPlanefOES(int plane, float* equation) {
            Pointers.glGetClipPlanefOES(plane, equation);
        }
        
        public unsafe static void glGetClipPlanefOES(int plane, float[] equation) {
            fixed(float* equation_ = &equation[0])
                Pointers.glGetClipPlanefOES(plane, equation_);
        }
        
        public unsafe static void glGetClipPlanex(int plane, IntPtr* equation) {
            Pointers.glGetClipPlanex(plane, equation);
        }
        
        public unsafe static void glGetClipPlanex(int plane, IntPtr[] equation) {
            fixed(IntPtr* equation_ = &equation[0])
                Pointers.glGetClipPlanex(plane, equation_);
        }
        
        public unsafe static void glGetClipPlanexOES(int plane, IntPtr* equation) {
            Pointers.glGetClipPlanexOES(plane, equation);
        }
        
        public unsafe static void glGetClipPlanexOES(int plane, IntPtr[] equation) {
            fixed(IntPtr* equation_ = &equation[0])
                Pointers.glGetClipPlanexOES(plane, equation_);
        }
        
        public unsafe static void glGetColorTable(int target, int format, int type, IntPtr table) {
            Pointers.glGetColorTable(target, format, type, table);
        }
        
        public unsafe static void glGetColorTableEXT(int target, int format, int type, IntPtr data) {
            Pointers.glGetColorTableEXT(target, format, type, data);
        }
        
        public unsafe static void glGetColorTableParameterfv(int target, int pname, float* _params) {
            Pointers.glGetColorTableParameterfv(target, pname, _params);
        }
        
        public unsafe static void glGetColorTableParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetColorTableParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glGetColorTableParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glGetColorTableParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glGetColorTableParameterfvEXT(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetColorTableParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetColorTableParameterfvSGI(int target, int pname, float* _params) {
            Pointers.glGetColorTableParameterfvSGI(target, pname, _params);
        }
        
        public unsafe static void glGetColorTableParameterfvSGI(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetColorTableParameterfvSGI(target, pname, _params_);
        }
        
        public unsafe static void glGetColorTableParameteriv(int target, int pname, int* _params) {
            Pointers.glGetColorTableParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetColorTableParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetColorTableParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetColorTableParameterivEXT(int target, int pname, int* _params) {
            Pointers.glGetColorTableParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetColorTableParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetColorTableParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetColorTableParameterivSGI(int target, int pname, int* _params) {
            Pointers.glGetColorTableParameterivSGI(target, pname, _params);
        }
        
        public unsafe static void glGetColorTableParameterivSGI(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetColorTableParameterivSGI(target, pname, _params_);
        }
        
        public unsafe static void glGetColorTableSGI(int target, int format, int type, IntPtr table) {
            Pointers.glGetColorTableSGI(target, format, type, table);
        }
        
        public unsafe static void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, float* _params) {
            Pointers.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, _params);
        }
        
        public unsafe static void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, _params_);
        }
        
        public unsafe static void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, int* _params) {
            Pointers.glGetCombinerInputParameterivNV(stage, portion, variable, pname, _params);
        }
        
        public unsafe static void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetCombinerInputParameterivNV(stage, portion, variable, pname, _params_);
        }
        
        public unsafe static void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, float* _params) {
            Pointers.glGetCombinerOutputParameterfvNV(stage, portion, pname, _params);
        }
        
        public unsafe static void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetCombinerOutputParameterfvNV(stage, portion, pname, _params_);
        }
        
        public unsafe static void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, int* _params) {
            Pointers.glGetCombinerOutputParameterivNV(stage, portion, pname, _params);
        }
        
        public unsafe static void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetCombinerOutputParameterivNV(stage, portion, pname, _params_);
        }
        
        public unsafe static void glGetCombinerStageParameterfvNV(int stage, int pname, float* _params) {
            Pointers.glGetCombinerStageParameterfvNV(stage, pname, _params);
        }
        
        public unsafe static void glGetCombinerStageParameterfvNV(int stage, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetCombinerStageParameterfvNV(stage, pname, _params_);
        }
        
        public unsafe static uint glGetCommandHeaderNV(int tokenID, uint size) {
            return Pointers.glGetCommandHeaderNV(tokenID, size);
        }
        
        public unsafe static void glGetCompressedMultiTexImageEXT(int texunit, int target, int lod, IntPtr img) {
            Pointers.glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
        }
        
        public unsafe static void glGetCompressedTexImage(int target, int level, IntPtr img) {
            Pointers.glGetCompressedTexImage(target, level, img);
        }
        
        public unsafe static void glGetCompressedTexImageARB(int target, int level, IntPtr img) {
            Pointers.glGetCompressedTexImageARB(target, level, img);
        }
        
        public unsafe static void glGetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels) {
            Pointers.glGetCompressedTextureImage(texture, level, bufSize, pixels);
        }
        
        public unsafe static void glGetCompressedTextureImageEXT(uint texture, int target, int lod, IntPtr img) {
            Pointers.glGetCompressedTextureImageEXT(texture, target, lod, img);
        }
        
        public unsafe static void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels) {
            Pointers.glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }
        
        public unsafe static void glGetConvolutionFilter(int target, int format, int type, IntPtr image) {
            Pointers.glGetConvolutionFilter(target, format, type, image);
        }
        
        public unsafe static void glGetConvolutionFilterEXT(int target, int format, int type, IntPtr image) {
            Pointers.glGetConvolutionFilterEXT(target, format, type, image);
        }
        
        public unsafe static void glGetConvolutionParameterfv(int target, int pname, float* _params) {
            Pointers.glGetConvolutionParameterfv(target, pname, _params);
        }
        
        public unsafe static void glGetConvolutionParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetConvolutionParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glGetConvolutionParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glGetConvolutionParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glGetConvolutionParameterfvEXT(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetConvolutionParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetConvolutionParameteriv(int target, int pname, int* _params) {
            Pointers.glGetConvolutionParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetConvolutionParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetConvolutionParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetConvolutionParameterivEXT(int target, int pname, int* _params) {
            Pointers.glGetConvolutionParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetConvolutionParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetConvolutionParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetConvolutionParameterxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glGetConvolutionParameterxvOES(target, pname, _params);
        }
        
        public unsafe static void glGetConvolutionParameterxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetConvolutionParameterxvOES(target, pname, _params_);
        }
        
        public unsafe static void glGetCoverageModulationTableNV(int bufsize, float* v) {
            Pointers.glGetCoverageModulationTableNV(bufsize, v);
        }
        
        public unsafe static void glGetCoverageModulationTableNV(int bufsize, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glGetCoverageModulationTableNV(bufsize, v_);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int[] types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources, types_, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int* types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLog(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLog(count, bufSize, sources_, types_, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint* severities, uint* ids, int* lengths, StringBuilder message) {
            return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint* severities, uint* ids, int[] lengths, StringBuilder message) {
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint* severities, uint[] ids, int* lengths, StringBuilder message) {
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids_, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint* severities, uint[] ids, int[] lengths, StringBuilder message) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids_, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint[] severities, uint* ids, int* lengths, StringBuilder message) {
            fixed(uint* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities_, ids, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint[] severities, uint* ids, int[] lengths, StringBuilder message) {
            fixed(uint* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities_, ids, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint[] severities, uint[] ids, int* lengths, StringBuilder message) {
            fixed(uint* severities_ = &severities[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities_, ids_, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint[] severities, uint[] ids, int[] lengths, StringBuilder message) {
            fixed(uint* severities_ = &severities[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories, severities_, ids_, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint* severities, uint* ids, int* lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities, ids, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint* severities, uint* ids, int[] lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities, ids, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint* severities, uint[] ids, int* lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities, ids_, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint* severities, uint[] ids, int[] lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities, ids_, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint[] severities, uint* ids, int* lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(uint* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities_, ids, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint[] severities, uint* ids, int[] lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(uint* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities_, ids, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint[] severities, uint[] ids, int* lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(uint* severities_ = &severities[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities_, ids_, lengths, message);
        }
        
        public unsafe static uint glGetDebugMessageLogAMD(uint count, int bufsize, int[] categories, uint[] severities, uint[] ids, int[] lengths, StringBuilder message) {
            fixed(int* categories_ = &categories[0])
            fixed(uint* severities_ = &severities[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogAMD(count, bufsize, categories_, severities_, ids_, lengths_, message);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int[] types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources, types_, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int* types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogARB(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogARB(count, bufSize, sources_, types_, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int[] types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources, types_, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int* types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint* ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint* ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint* ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint* ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids, severities_, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int* severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids_, severities, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int* severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids_, severities, lengths_, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int[] severities, int* lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids_, severities_, lengths, messageLog);
        }
        
        public unsafe static uint glGetDebugMessageLogKHR(uint count, int bufSize, int[] sources, int[] types, uint[] ids, int[] severities, int[] lengths, StringBuilder messageLog) {
            fixed(int* sources_ = &sources[0])
            fixed(int* types_ = &types[0])
            fixed(uint* ids_ = &ids[0])
            fixed(int* severities_ = &severities[0])
            fixed(int* lengths_ = &lengths[0])
                return Pointers.glGetDebugMessageLogKHR(count, bufSize, sources_, types_, ids_, severities_, lengths_, messageLog);
        }
        
        public unsafe static void glGetDetailTexFuncSGIS(int target, float* points) {
            Pointers.glGetDetailTexFuncSGIS(target, points);
        }
        
        public unsafe static void glGetDetailTexFuncSGIS(int target, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glGetDetailTexFuncSGIS(target, points_);
        }
        
        public unsafe static void glGetDoubleIndexedvEXT(int target, uint index, double* data) {
            Pointers.glGetDoubleIndexedvEXT(target, index, data);
        }
        
        public unsafe static void glGetDoubleIndexedvEXT(int target, uint index, double[] data) {
            fixed(double* data_ = &data[0])
                Pointers.glGetDoubleIndexedvEXT(target, index, data_);
        }
        
        public unsafe static void glGetDoublei_v(int target, uint index, double* data) {
            Pointers.glGetDoublei_v(target, index, data);
        }
        
        public unsafe static void glGetDoublei_v(int target, uint index, double[] data) {
            fixed(double* data_ = &data[0])
                Pointers.glGetDoublei_v(target, index, data_);
        }
        
        public unsafe static void glGetDoublei_vEXT(int pname, uint index, double* _params) {
            Pointers.glGetDoublei_vEXT(pname, index, _params);
        }
        
        public unsafe static void glGetDoublei_vEXT(int pname, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetDoublei_vEXT(pname, index, _params_);
        }
        
        public unsafe static void glGetDoublev(int pname, double* data) {
            Pointers.glGetDoublev(pname, data);
        }
        
        public unsafe static void glGetDoublev(int pname, double[] data) {
            fixed(double* data_ = &data[0])
                Pointers.glGetDoublev(pname, data_);
        }
        
        public unsafe static double glGetDoublev(int pname) {
            double data;
            glGetDoublev(pname, &data);
            return data;
        }
        
        public unsafe static void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, StringBuilder driverControlString) {
            Pointers.glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
        }
        
        public unsafe static void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int[] length, StringBuilder driverControlString) {
            fixed(int* length_ = &length[0])
                Pointers.glGetDriverControlStringQCOM(driverControl, bufSize, length_, driverControlString);
        }
        
        public unsafe static void glGetDriverControlsQCOM(int* num, int size, uint* driverControls) {
            Pointers.glGetDriverControlsQCOM(num, size, driverControls);
        }
        
        public unsafe static void glGetDriverControlsQCOM(int* num, int size, uint[] driverControls) {
            fixed(uint* driverControls_ = &driverControls[0])
                Pointers.glGetDriverControlsQCOM(num, size, driverControls_);
        }
        
        public unsafe static void glGetDriverControlsQCOM(int[] num, int size, uint* driverControls) {
            fixed(int* num_ = &num[0])
                Pointers.glGetDriverControlsQCOM(num_, size, driverControls);
        }
        
        public unsafe static void glGetDriverControlsQCOM(int[] num, int size, uint[] driverControls) {
            fixed(int* num_ = &num[0])
            fixed(uint* driverControls_ = &driverControls[0])
                Pointers.glGetDriverControlsQCOM(num_, size, driverControls_);
        }
        
        public unsafe static int glGetError() {
            return Pointers.glGetError();
        }
        
        public unsafe static void glGetFenceivNV(uint fence, int pname, int* _params) {
            Pointers.glGetFenceivNV(fence, pname, _params);
        }
        
        public unsafe static void glGetFenceivNV(uint fence, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFenceivNV(fence, pname, _params_);
        }
        
        public unsafe static void glGetFinalCombinerInputParameterfvNV(int variable, int pname, float* _params) {
            Pointers.glGetFinalCombinerInputParameterfvNV(variable, pname, _params);
        }
        
        public unsafe static void glGetFinalCombinerInputParameterfvNV(int variable, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetFinalCombinerInputParameterfvNV(variable, pname, _params_);
        }
        
        public unsafe static void glGetFinalCombinerInputParameterivNV(int variable, int pname, int* _params) {
            Pointers.glGetFinalCombinerInputParameterivNV(variable, pname, _params);
        }
        
        public unsafe static void glGetFinalCombinerInputParameterivNV(int variable, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFinalCombinerInputParameterivNV(variable, pname, _params_);
        }
        
        public unsafe static void glGetFirstPerfQueryIdINTEL(uint* queryId) {
            Pointers.glGetFirstPerfQueryIdINTEL(queryId);
        }
        
        public unsafe static void glGetFirstPerfQueryIdINTEL(uint[] queryId) {
            fixed(uint* queryId_ = &queryId[0])
                Pointers.glGetFirstPerfQueryIdINTEL(queryId_);
        }
        
        public unsafe static void glGetFixedv(int pname, IntPtr* _params) {
            Pointers.glGetFixedv(pname, _params);
        }
        
        public unsafe static void glGetFixedv(int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetFixedv(pname, _params_);
        }
        
        public unsafe static void glGetFixedvOES(int pname, IntPtr* _params) {
            Pointers.glGetFixedvOES(pname, _params);
        }
        
        public unsafe static void glGetFixedvOES(int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetFixedvOES(pname, _params_);
        }
        
        public unsafe static void glGetFloatIndexedvEXT(int target, uint index, float* data) {
            Pointers.glGetFloatIndexedvEXT(target, index, data);
        }
        
        public unsafe static void glGetFloatIndexedvEXT(int target, uint index, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetFloatIndexedvEXT(target, index, data_);
        }
        
        public unsafe static void glGetFloati_v(int target, uint index, float* data) {
            Pointers.glGetFloati_v(target, index, data);
        }
        
        public unsafe static void glGetFloati_v(int target, uint index, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetFloati_v(target, index, data_);
        }
        
        public unsafe static void glGetFloati_vEXT(int pname, uint index, float* _params) {
            Pointers.glGetFloati_vEXT(pname, index, _params);
        }
        
        public unsafe static void glGetFloati_vEXT(int pname, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetFloati_vEXT(pname, index, _params_);
        }
        
        public unsafe static void glGetFloati_vNV(int target, uint index, float* data) {
            Pointers.glGetFloati_vNV(target, index, data);
        }
        
        public unsafe static void glGetFloati_vNV(int target, uint index, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetFloati_vNV(target, index, data_);
        }
        
        public unsafe static void glGetFloati_vOES(int target, uint index, float* data) {
            Pointers.glGetFloati_vOES(target, index, data);
        }
        
        public unsafe static void glGetFloati_vOES(int target, uint index, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetFloati_vOES(target, index, data_);
        }
        
        public unsafe static void glGetFloatv(int pname, float* data) {
            Pointers.glGetFloatv(pname, data);
        }
        
        public unsafe static void glGetFloatv(int pname, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetFloatv(pname, data_);
        }
        
        public unsafe static float glGetFloatv(int pname) {
            float data;
            glGetFloatv(pname, &data);
            return data;
        }
        
        public unsafe static void glGetFogFuncSGIS(float* points) {
            Pointers.glGetFogFuncSGIS(points);
        }
        
        public unsafe static void glGetFogFuncSGIS(float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glGetFogFuncSGIS(points_);
        }
        
        public unsafe static int glGetFragDataIndex(uint program, string name) {
            return Pointers.glGetFragDataIndex(program, name);
        }
        
        public unsafe static int glGetFragDataIndexEXT(uint program, string name) {
            return Pointers.glGetFragDataIndexEXT(program, name);
        }
        
        public unsafe static int glGetFragDataLocation(uint program, string name) {
            return Pointers.glGetFragDataLocation(program, name);
        }
        
        public unsafe static int glGetFragDataLocationEXT(uint program, string name) {
            return Pointers.glGetFragDataLocationEXT(program, name);
        }
        
        public unsafe static void glGetFragmentLightfvSGIX(int light, int pname, float* _params) {
            Pointers.glGetFragmentLightfvSGIX(light, pname, _params);
        }
        
        public unsafe static void glGetFragmentLightfvSGIX(int light, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetFragmentLightfvSGIX(light, pname, _params_);
        }
        
        public unsafe static void glGetFragmentLightivSGIX(int light, int pname, int* _params) {
            Pointers.glGetFragmentLightivSGIX(light, pname, _params);
        }
        
        public unsafe static void glGetFragmentLightivSGIX(int light, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFragmentLightivSGIX(light, pname, _params_);
        }
        
        public unsafe static void glGetFragmentMaterialfvSGIX(int face, int pname, float* _params) {
            Pointers.glGetFragmentMaterialfvSGIX(face, pname, _params);
        }
        
        public unsafe static void glGetFragmentMaterialfvSGIX(int face, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetFragmentMaterialfvSGIX(face, pname, _params_);
        }
        
        public unsafe static void glGetFragmentMaterialivSGIX(int face, int pname, int* _params) {
            Pointers.glGetFragmentMaterialivSGIX(face, pname, _params);
        }
        
        public unsafe static void glGetFragmentMaterialivSGIX(int face, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFragmentMaterialivSGIX(face, pname, _params_);
        }
        
        public unsafe static void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* _params) {
            Pointers.glGetFramebufferAttachmentParameteriv(target, attachment, pname, _params);
        }
        
        public unsafe static void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFramebufferAttachmentParameteriv(target, attachment, pname, _params_);
        }
        
        public unsafe static void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, int* _params) {
            Pointers.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, _params);
        }
        
        public unsafe static void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, _params_);
        }
        
        public unsafe static void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, int* _params) {
            Pointers.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, _params);
        }
        
        public unsafe static void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, _params_);
        }
        
        public unsafe static void glGetFramebufferParameterfvAMD(int target, int pname, uint numsamples, uint pixelindex, int size, float* values) {
            Pointers.glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
        }
        
        public unsafe static void glGetFramebufferParameterfvAMD(int target, int pname, uint numsamples, uint pixelindex, int size, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values_);
        }
        
        public unsafe static void glGetFramebufferParameteriv(int target, int pname, int* _params) {
            Pointers.glGetFramebufferParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetFramebufferParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFramebufferParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetFramebufferParameterivEXT(uint framebuffer, int pname, int* _params) {
            Pointers.glGetFramebufferParameterivEXT(framebuffer, pname, _params);
        }
        
        public unsafe static void glGetFramebufferParameterivEXT(uint framebuffer, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetFramebufferParameterivEXT(framebuffer, pname, _params_);
        }
        
        public unsafe static int glGetFramebufferPixelLocalStorageSizeEXT(uint target) {
            return Pointers.glGetFramebufferPixelLocalStorageSizeEXT(target);
        }
        
        public unsafe static int glGetGraphicsResetStatus() {
            return Pointers.glGetGraphicsResetStatus();
        }
        
        public unsafe static int glGetGraphicsResetStatusARB() {
            return Pointers.glGetGraphicsResetStatusARB();
        }
        
        public unsafe static int glGetGraphicsResetStatusEXT() {
            return Pointers.glGetGraphicsResetStatusEXT();
        }
        
        public unsafe static int glGetGraphicsResetStatusKHR() {
            return Pointers.glGetGraphicsResetStatusKHR();
        }
        
        public unsafe static uint glGetHandleARB(int pname) {
            return Pointers.glGetHandleARB(pname);
        }
        
        public unsafe static void glGetHistogram(int target, bool reset, int format, int type, IntPtr values) {
            Pointers.glGetHistogram(target, reset, format, type, values);
        }
        
        public unsafe static void glGetHistogramEXT(int target, bool reset, int format, int type, IntPtr values) {
            Pointers.glGetHistogramEXT(target, reset, format, type, values);
        }
        
        public unsafe static void glGetHistogramParameterfv(int target, int pname, float* _params) {
            Pointers.glGetHistogramParameterfv(target, pname, _params);
        }
        
        public unsafe static void glGetHistogramParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetHistogramParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glGetHistogramParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glGetHistogramParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glGetHistogramParameterfvEXT(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetHistogramParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetHistogramParameteriv(int target, int pname, int* _params) {
            Pointers.glGetHistogramParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetHistogramParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetHistogramParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetHistogramParameterivEXT(int target, int pname, int* _params) {
            Pointers.glGetHistogramParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetHistogramParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetHistogramParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetHistogramParameterxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glGetHistogramParameterxvOES(target, pname, _params);
        }
        
        public unsafe static void glGetHistogramParameterxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetHistogramParameterxvOES(target, pname, _params_);
        }
        
        public unsafe static ulong glGetImageHandleARB(uint texture, int level, bool layered, int layer, int format) {
            return Pointers.glGetImageHandleARB(texture, level, layered, layer, format);
        }
        
        public unsafe static ulong glGetImageHandleNV(uint texture, int level, bool layered, int layer, int format) {
            return Pointers.glGetImageHandleNV(texture, level, layered, layer, format);
        }
        
        public unsafe static void glGetImageTransformParameterfvHP(int target, int pname, float* _params) {
            Pointers.glGetImageTransformParameterfvHP(target, pname, _params);
        }
        
        public unsafe static void glGetImageTransformParameterfvHP(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetImageTransformParameterfvHP(target, pname, _params_);
        }
        
        public unsafe static void glGetImageTransformParameterivHP(int target, int pname, int* _params) {
            Pointers.glGetImageTransformParameterivHP(target, pname, _params);
        }
        
        public unsafe static void glGetImageTransformParameterivHP(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetImageTransformParameterivHP(target, pname, _params_);
        }
        
        public unsafe static void glGetInfoLogARB(uint obj, int maxLength, int* length, StringBuilder infoLog) {
            Pointers.glGetInfoLogARB(obj, maxLength, length, infoLog);
        }
        
        public unsafe static void glGetInfoLogARB(uint obj, int maxLength, out int length, StringBuilder infoLog) {
            fixed(int* length_ = &length)
                Pointers.glGetInfoLogARB(obj, maxLength, length_, infoLog);
        }
        
        public unsafe static int glGetInstrumentsSGIX() {
            return Pointers.glGetInstrumentsSGIX();
        }
        
        public unsafe static void glGetInteger64i_v(int target, uint index, long* data) {
            Pointers.glGetInteger64i_v(target, index, data);
        }
        
        public unsafe static void glGetInteger64i_v(int target, uint index, long[] data) {
            fixed(long* data_ = &data[0])
                Pointers.glGetInteger64i_v(target, index, data_);
        }
        
        public unsafe static void glGetInteger64v(int pname, long* data) {
            Pointers.glGetInteger64v(pname, data);
        }
        
        public unsafe static void glGetInteger64v(int pname, long[] data) {
            fixed(long* data_ = &data[0])
                Pointers.glGetInteger64v(pname, data_);
        }
        
        public unsafe static void glGetInteger64vAPPLE(int pname, long* _params) {
            Pointers.glGetInteger64vAPPLE(pname, _params);
        }
        
        public unsafe static void glGetInteger64vAPPLE(int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetInteger64vAPPLE(pname, _params_);
        }
        
        public unsafe static void glGetIntegerIndexedvEXT(int target, uint index, int* data) {
            Pointers.glGetIntegerIndexedvEXT(target, index, data);
        }
        
        public unsafe static void glGetIntegerIndexedvEXT(int target, uint index, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetIntegerIndexedvEXT(target, index, data_);
        }
        
        public unsafe static void glGetIntegeri_v(int target, uint index, int* data) {
            Pointers.glGetIntegeri_v(target, index, data);
        }
        
        public unsafe static void glGetIntegeri_v(int target, uint index, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetIntegeri_v(target, index, data_);
        }
        
        public unsafe static void glGetIntegeri_vEXT(int target, uint index, int* data) {
            Pointers.glGetIntegeri_vEXT(target, index, data);
        }
        
        public unsafe static void glGetIntegeri_vEXT(int target, uint index, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetIntegeri_vEXT(target, index, data_);
        }
        
        public unsafe static void glGetIntegerui64i_vNV(int value, uint index, ulong* result) {
            Pointers.glGetIntegerui64i_vNV(value, index, result);
        }
        
        public unsafe static void glGetIntegerui64i_vNV(int value, uint index, ulong[] result) {
            fixed(ulong* result_ = &result[0])
                Pointers.glGetIntegerui64i_vNV(value, index, result_);
        }
        
        public unsafe static void glGetIntegerui64vNV(int value, ulong* result) {
            Pointers.glGetIntegerui64vNV(value, result);
        }
        
        public unsafe static void glGetIntegerui64vNV(int value, ulong[] result) {
            fixed(ulong* result_ = &result[0])
                Pointers.glGetIntegerui64vNV(value, result_);
        }
        
        public unsafe static void glGetIntegerv(int pname, int* data) {
            Pointers.glGetIntegerv(pname, data);
        }
        
        public unsafe static void glGetIntegerv(int pname, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetIntegerv(pname, data_);
        }
        
        public unsafe static int glGetIntegerv(int pname) {
            int data;
            glGetIntegerv(pname, &data);
            return data;
        }
        
        public unsafe static void glGetInternalformatSampleivNV(int target, int internalformat, int samples, int pname, int bufSize, int* _params) {
            Pointers.glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, _params);
        }
        
        public unsafe static void glGetInternalformatSampleivNV(int target, int internalformat, int samples, int pname, int bufSize, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, _params_);
        }
        
        public unsafe static void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, long* _params) {
            Pointers.glGetInternalformati64v(target, internalformat, pname, bufSize, _params);
        }
        
        public unsafe static void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetInternalformati64v(target, internalformat, pname, bufSize, _params_);
        }
        
        public unsafe static void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int* _params) {
            Pointers.glGetInternalformativ(target, internalformat, pname, bufSize, _params);
        }
        
        public unsafe static void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetInternalformativ(target, internalformat, pname, bufSize, _params_);
        }
        
        public unsafe static void glGetInvariantBooleanvEXT(uint id, int value, bool* data) {
            Pointers.glGetInvariantBooleanvEXT(id, value, data);
        }
        
        public unsafe static void glGetInvariantBooleanvEXT(uint id, int value, bool[] data) {
            fixed(bool* data_ = &data[0])
                Pointers.glGetInvariantBooleanvEXT(id, value, data_);
        }
        
        public unsafe static void glGetInvariantFloatvEXT(uint id, int value, float* data) {
            Pointers.glGetInvariantFloatvEXT(id, value, data);
        }
        
        public unsafe static void glGetInvariantFloatvEXT(uint id, int value, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetInvariantFloatvEXT(id, value, data_);
        }
        
        public unsafe static void glGetInvariantIntegervEXT(uint id, int value, int* data) {
            Pointers.glGetInvariantIntegervEXT(id, value, data);
        }
        
        public unsafe static void glGetInvariantIntegervEXT(uint id, int value, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetInvariantIntegervEXT(id, value, data_);
        }
        
        public unsafe static void glGetLightfv(int light, int pname, float* _params) {
            Pointers.glGetLightfv(light, pname, _params);
        }
        
        public unsafe static void glGetLightfv(int light, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetLightfv(light, pname, _params_);
        }
        
        public unsafe static void glGetLightiv(int light, int pname, int* _params) {
            Pointers.glGetLightiv(light, pname, _params);
        }
        
        public unsafe static void glGetLightiv(int light, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetLightiv(light, pname, _params_);
        }
        
        public unsafe static void glGetLightxOES(int light, int pname, IntPtr* _params) {
            Pointers.glGetLightxOES(light, pname, _params);
        }
        
        public unsafe static void glGetLightxOES(int light, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetLightxOES(light, pname, _params_);
        }
        
        public unsafe static void glGetLightxv(int light, int pname, IntPtr* _params) {
            Pointers.glGetLightxv(light, pname, _params);
        }
        
        public unsafe static void glGetLightxv(int light, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetLightxv(light, pname, _params_);
        }
        
        public unsafe static void glGetLightxvOES(int light, int pname, IntPtr* _params) {
            Pointers.glGetLightxvOES(light, pname, _params);
        }
        
        public unsafe static void glGetLightxvOES(int light, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetLightxvOES(light, pname, _params_);
        }
        
        public unsafe static void glGetListParameterfvSGIX(uint list, int pname, float* _params) {
            Pointers.glGetListParameterfvSGIX(list, pname, _params);
        }
        
        public unsafe static void glGetListParameterfvSGIX(uint list, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetListParameterfvSGIX(list, pname, _params_);
        }
        
        public unsafe static void glGetListParameterivSGIX(uint list, int pname, int* _params) {
            Pointers.glGetListParameterivSGIX(list, pname, _params);
        }
        
        public unsafe static void glGetListParameterivSGIX(uint list, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetListParameterivSGIX(list, pname, _params_);
        }
        
        public unsafe static void glGetLocalConstantBooleanvEXT(uint id, int value, bool* data) {
            Pointers.glGetLocalConstantBooleanvEXT(id, value, data);
        }
        
        public unsafe static void glGetLocalConstantBooleanvEXT(uint id, int value, bool[] data) {
            fixed(bool* data_ = &data[0])
                Pointers.glGetLocalConstantBooleanvEXT(id, value, data_);
        }
        
        public unsafe static void glGetLocalConstantFloatvEXT(uint id, int value, float* data) {
            Pointers.glGetLocalConstantFloatvEXT(id, value, data);
        }
        
        public unsafe static void glGetLocalConstantFloatvEXT(uint id, int value, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetLocalConstantFloatvEXT(id, value, data_);
        }
        
        public unsafe static void glGetLocalConstantIntegervEXT(uint id, int value, int* data) {
            Pointers.glGetLocalConstantIntegervEXT(id, value, data);
        }
        
        public unsafe static void glGetLocalConstantIntegervEXT(uint id, int value, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetLocalConstantIntegervEXT(id, value, data_);
        }
        
        public unsafe static void glGetMapAttribParameterfvNV(int target, uint index, int pname, float* _params) {
            Pointers.glGetMapAttribParameterfvNV(target, index, pname, _params);
        }
        
        public unsafe static void glGetMapAttribParameterfvNV(int target, uint index, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMapAttribParameterfvNV(target, index, pname, _params_);
        }
        
        public unsafe static void glGetMapAttribParameterivNV(int target, uint index, int pname, int* _params) {
            Pointers.glGetMapAttribParameterivNV(target, index, pname, _params);
        }
        
        public unsafe static void glGetMapAttribParameterivNV(int target, uint index, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMapAttribParameterivNV(target, index, pname, _params_);
        }
        
        public unsafe static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, IntPtr points) {
            Pointers.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
        }
        
        public unsafe static void glGetMapParameterfvNV(int target, int pname, float* _params) {
            Pointers.glGetMapParameterfvNV(target, pname, _params);
        }
        
        public unsafe static void glGetMapParameterfvNV(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMapParameterfvNV(target, pname, _params_);
        }
        
        public unsafe static void glGetMapParameterivNV(int target, int pname, int* _params) {
            Pointers.glGetMapParameterivNV(target, pname, _params);
        }
        
        public unsafe static void glGetMapParameterivNV(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMapParameterivNV(target, pname, _params_);
        }
        
        public unsafe static void glGetMapdv(int target, int query, double* v) {
            Pointers.glGetMapdv(target, query, v);
        }
        
        public unsafe static void glGetMapdv(int target, int query, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glGetMapdv(target, query, v_);
        }
        
        public unsafe static void glGetMapfv(int target, int query, float* v) {
            Pointers.glGetMapfv(target, query, v);
        }
        
        public unsafe static void glGetMapfv(int target, int query, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glGetMapfv(target, query, v_);
        }
        
        public unsafe static void glGetMapiv(int target, int query, int* v) {
            Pointers.glGetMapiv(target, query, v);
        }
        
        public unsafe static void glGetMapiv(int target, int query, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glGetMapiv(target, query, v_);
        }
        
        public unsafe static void glGetMapxvOES(int target, int query, IntPtr* v) {
            Pointers.glGetMapxvOES(target, query, v);
        }
        
        public unsafe static void glGetMapxvOES(int target, int query, IntPtr[] v) {
            fixed(IntPtr* v_ = &v[0])
                Pointers.glGetMapxvOES(target, query, v_);
        }
        
        public unsafe static void glGetMaterialfv(int face, int pname, float* _params) {
            Pointers.glGetMaterialfv(face, pname, _params);
        }
        
        public unsafe static void glGetMaterialfv(int face, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMaterialfv(face, pname, _params_);
        }
        
        public unsafe static void glGetMaterialiv(int face, int pname, int* _params) {
            Pointers.glGetMaterialiv(face, pname, _params);
        }
        
        public unsafe static void glGetMaterialiv(int face, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMaterialiv(face, pname, _params_);
        }
        
        public unsafe static void glGetMaterialxOES(int face, int pname, IntPtr param) {
            Pointers.glGetMaterialxOES(face, pname, param);
        }
        
        public unsafe static void glGetMaterialxv(int face, int pname, IntPtr* _params) {
            Pointers.glGetMaterialxv(face, pname, _params);
        }
        
        public unsafe static void glGetMaterialxv(int face, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetMaterialxv(face, pname, _params_);
        }
        
        public unsafe static void glGetMaterialxvOES(int face, int pname, IntPtr* _params) {
            Pointers.glGetMaterialxvOES(face, pname, _params);
        }
        
        public unsafe static void glGetMaterialxvOES(int face, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetMaterialxvOES(face, pname, _params_);
        }
        
        public unsafe static void glGetMemoryObjectParameterivEXT(uint memoryObject, int pname, int* _params) {
            Pointers.glGetMemoryObjectParameterivEXT(memoryObject, pname, _params);
        }
        
        public unsafe static void glGetMemoryObjectParameterivEXT(uint memoryObject, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMemoryObjectParameterivEXT(memoryObject, pname, _params_);
        }
        
        public unsafe static void glGetMinmax(int target, bool reset, int format, int type, IntPtr values) {
            Pointers.glGetMinmax(target, reset, format, type, values);
        }
        
        public unsafe static void glGetMinmaxEXT(int target, bool reset, int format, int type, IntPtr values) {
            Pointers.glGetMinmaxEXT(target, reset, format, type, values);
        }
        
        public unsafe static void glGetMinmaxParameterfv(int target, int pname, float* _params) {
            Pointers.glGetMinmaxParameterfv(target, pname, _params);
        }
        
        public unsafe static void glGetMinmaxParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMinmaxParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glGetMinmaxParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glGetMinmaxParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glGetMinmaxParameterfvEXT(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMinmaxParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetMinmaxParameteriv(int target, int pname, int* _params) {
            Pointers.glGetMinmaxParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetMinmaxParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMinmaxParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetMinmaxParameterivEXT(int target, int pname, int* _params) {
            Pointers.glGetMinmaxParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetMinmaxParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMinmaxParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, float* _params) {
            Pointers.glGetMultiTexEnvfvEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMultiTexEnvfvEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexEnvivEXT(int texunit, int target, int pname, int* _params) {
            Pointers.glGetMultiTexEnvivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glGetMultiTexEnvivEXT(int texunit, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMultiTexEnvivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexGendvEXT(int texunit, int coord, int pname, double* _params) {
            Pointers.glGetMultiTexGendvEXT(texunit, coord, pname, _params);
        }
        
        public unsafe static void glGetMultiTexGendvEXT(int texunit, int coord, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetMultiTexGendvEXT(texunit, coord, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, float* _params) {
            Pointers.glGetMultiTexGenfvEXT(texunit, coord, pname, _params);
        }
        
        public unsafe static void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMultiTexGenfvEXT(texunit, coord, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexGenivEXT(int texunit, int coord, int pname, int* _params) {
            Pointers.glGetMultiTexGenivEXT(texunit, coord, pname, _params);
        }
        
        public unsafe static void glGetMultiTexGenivEXT(int texunit, int coord, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMultiTexGenivEXT(texunit, coord, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexImageEXT(int texunit, int target, int level, int format, int type, IntPtr pixels) {
            Pointers.glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
        }
        
        public unsafe static void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, float* _params) {
            Pointers.glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, _params);
        }
        
        public unsafe static void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, int* _params) {
            Pointers.glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, _params);
        }
        
        public unsafe static void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, int* _params) {
            Pointers.glGetMultiTexParameterIivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMultiTexParameterIivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* _params) {
            Pointers.glGetMultiTexParameterIuivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetMultiTexParameterIuivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, float* _params) {
            Pointers.glGetMultiTexParameterfvEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetMultiTexParameterfvEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glGetMultiTexParameterivEXT(int texunit, int target, int pname, int* _params) {
            Pointers.glGetMultiTexParameterivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glGetMultiTexParameterivEXT(int texunit, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetMultiTexParameterivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glGetMultisamplefv(int pname, uint index, float* val) {
            Pointers.glGetMultisamplefv(pname, index, val);
        }
        
        public unsafe static void glGetMultisamplefv(int pname, uint index, float[] val) {
            fixed(float* val_ = &val[0])
                Pointers.glGetMultisamplefv(pname, index, val_);
        }
        
        public unsafe static void glGetMultisamplefvNV(int pname, uint index, float* val) {
            Pointers.glGetMultisamplefvNV(pname, index, val);
        }
        
        public unsafe static void glGetMultisamplefvNV(int pname, uint index, float[] val) {
            fixed(float* val_ = &val[0])
                Pointers.glGetMultisamplefvNV(pname, index, val_);
        }
        
        public unsafe static void glGetNamedBufferParameteri64v(uint buffer, int pname, long* _params) {
            Pointers.glGetNamedBufferParameteri64v(buffer, pname, _params);
        }
        
        public unsafe static void glGetNamedBufferParameteri64v(uint buffer, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetNamedBufferParameteri64v(buffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedBufferParameteriv(uint buffer, int pname, int* _params) {
            Pointers.glGetNamedBufferParameteriv(buffer, pname, _params);
        }
        
        public unsafe static void glGetNamedBufferParameteriv(uint buffer, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedBufferParameteriv(buffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedBufferParameterivEXT(uint buffer, int pname, int* _params) {
            Pointers.glGetNamedBufferParameterivEXT(buffer, pname, _params);
        }
        
        public unsafe static void glGetNamedBufferParameterivEXT(uint buffer, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedBufferParameterivEXT(buffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedBufferParameterui64vNV(uint buffer, int pname, ulong* _params) {
            Pointers.glGetNamedBufferParameterui64vNV(buffer, pname, _params);
        }
        
        public unsafe static void glGetNamedBufferParameterui64vNV(uint buffer, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetNamedBufferParameterui64vNV(buffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedBufferPointerv(uint buffer, int pname, IntPtr* _params) {
            Pointers.glGetNamedBufferPointerv(buffer, pname, _params);
        }
        
        public unsafe static void glGetNamedBufferPointerv(uint buffer, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetNamedBufferPointerv(buffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedBufferPointervEXT(uint buffer, int pname, IntPtr* _params) {
            Pointers.glGetNamedBufferPointervEXT(buffer, pname, _params);
        }
        
        public unsafe static void glGetNamedBufferPointervEXT(uint buffer, int pname, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetNamedBufferPointervEXT(buffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedBufferSubData(uint buffer, uint offset, uint size, IntPtr data) {
            Pointers.glGetNamedBufferSubData(buffer, offset, size, data);
        }
        
        public unsafe static void glGetNamedBufferSubDataEXT(uint buffer, uint offset, uint size, IntPtr data) {
            Pointers.glGetNamedBufferSubDataEXT(buffer, offset, size, data);
        }
        
        public unsafe static void glGetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, float* values) {
            Pointers.glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
        }
        
        public unsafe static void glGetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values_);
        }
        
        public unsafe static void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, int attachment, int pname, int* _params) {
            Pointers.glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, _params);
        }
        
        public unsafe static void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, int attachment, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, _params_);
        }
        
        public unsafe static void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, int attachment, int pname, int* _params) {
            Pointers.glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, _params);
        }
        
        public unsafe static void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, int attachment, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, _params_);
        }
        
        public unsafe static void glGetNamedFramebufferParameteriv(uint framebuffer, int pname, int* param) {
            Pointers.glGetNamedFramebufferParameteriv(framebuffer, pname, param);
        }
        
        public unsafe static void glGetNamedFramebufferParameteriv(uint framebuffer, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetNamedFramebufferParameteriv(framebuffer, pname, param_);
        }
        
        public unsafe static void glGetNamedFramebufferParameterivEXT(uint framebuffer, int pname, int* _params) {
            Pointers.glGetNamedFramebufferParameterivEXT(framebuffer, pname, _params);
        }
        
        public unsafe static void glGetNamedFramebufferParameterivEXT(uint framebuffer, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedFramebufferParameterivEXT(framebuffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterIivEXT(uint program, int target, uint index, int* _params) {
            Pointers.glGetNamedProgramLocalParameterIivEXT(program, target, index, _params);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterIivEXT(uint program, int target, uint index, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedProgramLocalParameterIivEXT(program, target, index, _params_);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterIuivEXT(uint program, int target, uint index, uint* _params) {
            Pointers.glGetNamedProgramLocalParameterIuivEXT(program, target, index, _params);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterIuivEXT(uint program, int target, uint index, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetNamedProgramLocalParameterIuivEXT(program, target, index, _params_);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterdvEXT(uint program, int target, uint index, double* _params) {
            Pointers.glGetNamedProgramLocalParameterdvEXT(program, target, index, _params);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterdvEXT(uint program, int target, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetNamedProgramLocalParameterdvEXT(program, target, index, _params_);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterfvEXT(uint program, int target, uint index, float* _params) {
            Pointers.glGetNamedProgramLocalParameterfvEXT(program, target, index, _params);
        }
        
        public unsafe static void glGetNamedProgramLocalParameterfvEXT(uint program, int target, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetNamedProgramLocalParameterfvEXT(program, target, index, _params_);
        }
        
        public unsafe static void glGetNamedProgramStringEXT(uint program, int target, int pname, IntPtr _string) {
            Pointers.glGetNamedProgramStringEXT(program, target, pname, _string);
        }
        
        public unsafe static void glGetNamedProgramivEXT(uint program, int target, int pname, int* _params) {
            Pointers.glGetNamedProgramivEXT(program, target, pname, _params);
        }
        
        public unsafe static void glGetNamedProgramivEXT(uint program, int target, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetNamedProgramivEXT(program, target, pname, _params_);
        }
        
        public unsafe static void glGetNamedRenderbufferParameteriv(uint renderbuffer, int pname, int* _params) {
            Pointers.glGetNamedRenderbufferParameteriv(renderbuffer, pname, _params);
        }
        
        public unsafe static void glGetNamedRenderbufferParameteriv(uint renderbuffer, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedRenderbufferParameteriv(renderbuffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, int pname, int* _params) {
            Pointers.glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, _params);
        }
        
        public unsafe static void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, _params_);
        }
        
        public unsafe static void glGetNamedStringARB(int namelen, string name, int bufSize, int* stringlen, StringBuilder _string) {
            Pointers.glGetNamedStringARB(namelen, name, bufSize, stringlen, _string);
        }
        
        public unsafe static void glGetNamedStringARB(int namelen, string name, int bufSize, out int stringlen, StringBuilder _string) {
            fixed(int* stringlen_ = &stringlen)
                Pointers.glGetNamedStringARB(namelen, name, bufSize, stringlen_, _string);
        }
        
        public unsafe static void glGetNamedStringivARB(int namelen, string name, int pname, int* _params) {
            Pointers.glGetNamedStringivARB(namelen, name, pname, _params);
        }
        
        public unsafe static void glGetNamedStringivARB(int namelen, string name, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetNamedStringivARB(namelen, name, pname, _params_);
        }
        
        public unsafe static void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId) {
            Pointers.glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
        }
        
        public unsafe static void glGetNextPerfQueryIdINTEL(uint queryId, uint[] nextQueryId) {
            fixed(uint* nextQueryId_ = &nextQueryId[0])
                Pointers.glGetNextPerfQueryIdINTEL(queryId, nextQueryId_);
        }
        
        public unsafe static void glGetObjectBufferfvATI(uint buffer, int pname, float* _params) {
            Pointers.glGetObjectBufferfvATI(buffer, pname, _params);
        }
        
        public unsafe static void glGetObjectBufferfvATI(uint buffer, int pname, out float _params) {
            fixed(float* _params_ = &_params)
                Pointers.glGetObjectBufferfvATI(buffer, pname, _params_);
        }
        
        public unsafe static void glGetObjectBufferivATI(uint buffer, int pname, int* _params) {
            Pointers.glGetObjectBufferivATI(buffer, pname, _params);
        }
        
        public unsafe static void glGetObjectBufferivATI(uint buffer, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetObjectBufferivATI(buffer, pname, _params_);
        }
        
        public unsafe static void glGetObjectLabel(int identifier, uint name, int bufSize, int* length, StringBuilder label) {
            Pointers.glGetObjectLabel(identifier, name, bufSize, length, label);
        }
        
        public unsafe static void glGetObjectLabel(int identifier, uint name, int bufSize, out int length, StringBuilder label) {
            fixed(int* length_ = &length)
                Pointers.glGetObjectLabel(identifier, name, bufSize, length_, label);
        }
        
        public unsafe static void glGetObjectLabelEXT(int type, uint _object, int bufSize, int* length, StringBuilder label) {
            Pointers.glGetObjectLabelEXT(type, _object, bufSize, length, label);
        }
        
        public unsafe static void glGetObjectLabelEXT(int type, uint _object, int bufSize, out int length, StringBuilder label) {
            fixed(int* length_ = &length)
                Pointers.glGetObjectLabelEXT(type, _object, bufSize, length_, label);
        }
        
        public unsafe static void glGetObjectLabelKHR(int identifier, uint name, int bufSize, int* length, StringBuilder label) {
            Pointers.glGetObjectLabelKHR(identifier, name, bufSize, length, label);
        }
        
        public unsafe static void glGetObjectLabelKHR(int identifier, uint name, int bufSize, int[] length, StringBuilder label) {
            fixed(int* length_ = &length[0])
                Pointers.glGetObjectLabelKHR(identifier, name, bufSize, length_, label);
        }
        
        public unsafe static void glGetObjectParameterfvARB(uint obj, int pname, float* _params) {
            Pointers.glGetObjectParameterfvARB(obj, pname, _params);
        }
        
        public unsafe static void glGetObjectParameterfvARB(uint obj, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetObjectParameterfvARB(obj, pname, _params_);
        }
        
        public unsafe static void glGetObjectParameterivAPPLE(int objectType, uint name, int pname, int* _params) {
            Pointers.glGetObjectParameterivAPPLE(objectType, name, pname, _params);
        }
        
        public unsafe static void glGetObjectParameterivAPPLE(int objectType, uint name, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetObjectParameterivAPPLE(objectType, name, pname, _params_);
        }
        
        public unsafe static void glGetObjectParameterivARB(uint obj, int pname, int* _params) {
            Pointers.glGetObjectParameterivARB(obj, pname, _params);
        }
        
        public unsafe static void glGetObjectParameterivARB(uint obj, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetObjectParameterivARB(obj, pname, _params_);
        }
        
        public unsafe static void glGetObjectPtrLabel(IntPtr ptr, int bufSize, int* length, StringBuilder label) {
            Pointers.glGetObjectPtrLabel(ptr, bufSize, length, label);
        }
        
        public unsafe static void glGetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, StringBuilder label) {
            fixed(int* length_ = &length)
                Pointers.glGetObjectPtrLabel(ptr, bufSize, length_, label);
        }
        
        public unsafe static void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int* length, StringBuilder label) {
            Pointers.glGetObjectPtrLabelKHR(ptr, bufSize, length, label);
        }
        
        public unsafe static void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, out int length, StringBuilder label) {
            fixed(int* length_ = &length)
                Pointers.glGetObjectPtrLabelKHR(ptr, bufSize, length_, label);
        }
        
        public unsafe static void glGetOcclusionQueryivNV(uint id, int pname, int* _params) {
            Pointers.glGetOcclusionQueryivNV(id, pname, _params);
        }
        
        public unsafe static void glGetOcclusionQueryivNV(uint id, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetOcclusionQueryivNV(id, pname, _params_);
        }
        
        public unsafe static void glGetOcclusionQueryuivNV(uint id, int pname, uint* _params) {
            Pointers.glGetOcclusionQueryuivNV(id, pname, _params);
        }
        
        public unsafe static void glGetOcclusionQueryuivNV(uint id, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetOcclusionQueryuivNV(id, pname, _params_);
        }
        
        public unsafe static void glGetPathColorGenfvNV(int color, int pname, float* value) {
            Pointers.glGetPathColorGenfvNV(color, pname, value);
        }
        
        public unsafe static void glGetPathColorGenfvNV(int color, int pname, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glGetPathColorGenfvNV(color, pname, value_);
        }
        
        public unsafe static void glGetPathColorGenivNV(int color, int pname, int* value) {
            Pointers.glGetPathColorGenivNV(color, pname, value);
        }
        
        public unsafe static void glGetPathColorGenivNV(int color, int pname, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glGetPathColorGenivNV(color, pname, value_);
        }
        
        public unsafe static void glGetPathCommandsNV(uint path, byte* commands) {
            Pointers.glGetPathCommandsNV(path, commands);
        }
        
        public unsafe static void glGetPathCommandsNV(uint path, byte[] commands) {
            fixed(byte* commands_ = &commands[0])
                Pointers.glGetPathCommandsNV(path, commands_);
        }
        
        public unsafe static void glGetPathCoordsNV(uint path, float* coords) {
            Pointers.glGetPathCoordsNV(path, coords);
        }
        
        public unsafe static void glGetPathCoordsNV(uint path, float[] coords) {
            fixed(float* coords_ = &coords[0])
                Pointers.glGetPathCoordsNV(path, coords_);
        }
        
        public unsafe static void glGetPathDashArrayNV(uint path, float* dashArray) {
            Pointers.glGetPathDashArrayNV(path, dashArray);
        }
        
        public unsafe static void glGetPathDashArrayNV(uint path, float[] dashArray) {
            fixed(float* dashArray_ = &dashArray[0])
                Pointers.glGetPathDashArrayNV(path, dashArray_);
        }
        
        public unsafe static float glGetPathLengthNV(uint path, int startSegment, int numSegments) {
            return Pointers.glGetPathLengthNV(path, startSegment, numSegments);
        }
        
        public unsafe static void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics) {
            Pointers.glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
        }
        
        public unsafe static void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float[] metrics) {
            fixed(float* metrics_ = &metrics[0])
                Pointers.glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_);
        }
        
        public unsafe static void glGetPathMetricsNV(uint metricQueryMask, int numPaths, int pathNameType, IntPtr paths, uint pathBase, int stride, float* metrics) {
            Pointers.glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        }
        
        public unsafe static void glGetPathMetricsNV(uint metricQueryMask, int numPaths, int pathNameType, IntPtr paths, uint pathBase, int stride, float[] metrics) {
            fixed(float* metrics_ = &metrics[0])
                Pointers.glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics_);
        }
        
        public unsafe static void glGetPathParameterfvNV(uint path, int pname, float* value) {
            Pointers.glGetPathParameterfvNV(path, pname, value);
        }
        
        public unsafe static void glGetPathParameterfvNV(uint path, int pname, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glGetPathParameterfvNV(path, pname, value_);
        }
        
        public unsafe static void glGetPathParameterivNV(uint path, int pname, int* value) {
            Pointers.glGetPathParameterivNV(path, pname, value);
        }
        
        public unsafe static void glGetPathParameterivNV(uint path, int pname, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glGetPathParameterivNV(path, pname, value_);
        }
        
        public unsafe static void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, int transformType, float* returnedSpacing) {
            Pointers.glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        }
        
        public unsafe static void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, int transformType, float[] returnedSpacing) {
            fixed(float* returnedSpacing_ = &returnedSpacing[0])
                Pointers.glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_);
        }
        
        public unsafe static void glGetPathTexGenfvNV(int texCoordSet, int pname, float* value) {
            Pointers.glGetPathTexGenfvNV(texCoordSet, pname, value);
        }
        
        public unsafe static void glGetPathTexGenfvNV(int texCoordSet, int pname, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glGetPathTexGenfvNV(texCoordSet, pname, value_);
        }
        
        public unsafe static void glGetPathTexGenivNV(int texCoordSet, int pname, int* value) {
            Pointers.glGetPathTexGenivNV(texCoordSet, pname, value);
        }
        
        public unsafe static void glGetPathTexGenivNV(int texCoordSet, int pname, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glGetPathTexGenivNV(texCoordSet, pname, value_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize_, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint* counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint* counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint* counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum_, counterDataTypeEnum, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong* rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue);
        }
        
        public unsafe static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint[] counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue) {
            fixed(uint* counterOffset_ = &counterOffset[0])
            fixed(uint* counterDataSize_ = &counterDataSize[0])
            fixed(uint* counterTypeEnum_ = &counterTypeEnum[0])
            fixed(uint* counterDataTypeEnum_ = &counterDataTypeEnum[0])
            fixed(ulong* rawCounterMaxValue_ = &rawCounterMaxValue[0])
                Pointers.glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset_, counterDataSize_, counterTypeEnum_, counterDataTypeEnum_, rawCounterMaxValue_);
        }
        
        public unsafe static void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint* data, int* bytesWritten) {
            Pointers.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
        }
        
        public unsafe static void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint* data, out int bytesWritten) {
            fixed(int* bytesWritten_ = &bytesWritten)
                Pointers.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten_);
        }
        
        public unsafe static void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint[] data, int* bytesWritten) {
            fixed(uint* data_ = &data[0])
                Pointers.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_, bytesWritten);
        }
        
        public unsafe static void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint[] data, out int bytesWritten) {
            fixed(uint* data_ = &data[0])
            fixed(int* bytesWritten_ = &bytesWritten)
                Pointers.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_, bytesWritten_);
        }
        
        public unsafe static void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, IntPtr data) {
            Pointers.glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
        }
        
        public unsafe static void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, StringBuilder counterString) {
            Pointers.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
        }
        
        public unsafe static void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, out int length, StringBuilder counterString) {
            fixed(int* length_ = &length)
                Pointers.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length_, counterString);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters) {
            Pointers.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint[] counters) {
            fixed(uint* counters_ = &counters[0])
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters_);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, int* numCounters, out int maxActiveCounters, int counterSize, uint* counters) {
            fixed(int* maxActiveCounters_ = &maxActiveCounters)
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters_, counterSize, counters);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, int* numCounters, out int maxActiveCounters, int counterSize, uint[] counters) {
            fixed(int* maxActiveCounters_ = &maxActiveCounters)
            fixed(uint* counters_ = &counters[0])
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters_, counterSize, counters_);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, out int numCounters, int* maxActiveCounters, int counterSize, uint* counters) {
            fixed(int* numCounters_ = &numCounters)
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters_, maxActiveCounters, counterSize, counters);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, out int numCounters, int* maxActiveCounters, int counterSize, uint[] counters) {
            fixed(int* numCounters_ = &numCounters)
            fixed(uint* counters_ = &counters[0])
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters_, maxActiveCounters, counterSize, counters_);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, uint* counters) {
            fixed(int* numCounters_ = &numCounters)
            fixed(int* maxActiveCounters_ = &maxActiveCounters)
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters_, maxActiveCounters_, counterSize, counters);
        }
        
        public unsafe static void glGetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, uint[] counters) {
            fixed(int* numCounters_ = &numCounters)
            fixed(int* maxActiveCounters_ = &maxActiveCounters)
            fixed(uint* counters_ = &counters[0])
                Pointers.glGetPerfMonitorCountersAMD(group, numCounters_, maxActiveCounters_, counterSize, counters_);
        }
        
        public unsafe static void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, StringBuilder groupString) {
            Pointers.glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
        }
        
        public unsafe static void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, out int length, StringBuilder groupString) {
            fixed(int* length_ = &length)
                Pointers.glGetPerfMonitorGroupStringAMD(group, bufSize, length_, groupString);
        }
        
        public unsafe static void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups) {
            Pointers.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
        }
        
        public unsafe static void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint[] groups) {
            fixed(uint* groups_ = &groups[0])
                Pointers.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups_);
        }
        
        public unsafe static void glGetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, uint* groups) {
            fixed(int* numGroups_ = &numGroups)
                Pointers.glGetPerfMonitorGroupsAMD(numGroups_, groupsSize, groups);
        }
        
        public unsafe static void glGetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, uint[] groups) {
            fixed(int* numGroups_ = &numGroups)
            fixed(uint* groups_ = &groups[0])
                Pointers.glGetPerfMonitorGroupsAMD(numGroups_, groupsSize, groups_);
        }
        
        public unsafe static void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, IntPtr data, uint* bytesWritten) {
            Pointers.glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
        }
        
        public unsafe static void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, IntPtr data, uint[] bytesWritten) {
            fixed(uint* bytesWritten_ = &bytesWritten[0])
                Pointers.glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten_);
        }
        
        public unsafe static void glGetPerfQueryIdByNameINTEL(StringBuilder queryName, uint* queryId) {
            Pointers.glGetPerfQueryIdByNameINTEL(queryName, queryId);
        }
        
        public unsafe static void glGetPerfQueryIdByNameINTEL(StringBuilder queryName, uint[] queryId) {
            fixed(uint* queryId_ = &queryId[0])
                Pointers.glGetPerfQueryIdByNameINTEL(queryName, queryId_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask) {
            Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint[] capsMask) {
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint* noCounters, uint[] noInstances, uint* capsMask) {
            fixed(uint* noInstances_ = &noInstances[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances_, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint* noCounters, uint[] noInstances, uint[] capsMask) {
            fixed(uint* noInstances_ = &noInstances[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances_, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint[] noCounters, uint* noInstances, uint* capsMask) {
            fixed(uint* noCounters_ = &noCounters[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters_, noInstances, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint[] noCounters, uint* noInstances, uint[] capsMask) {
            fixed(uint* noCounters_ = &noCounters[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters_, noInstances, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint[] noCounters, uint[] noInstances, uint* capsMask) {
            fixed(uint* noCounters_ = &noCounters[0])
            fixed(uint* noInstances_ = &noInstances[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters_, noInstances_, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint[] noCounters, uint[] noInstances, uint[] capsMask) {
            fixed(uint* noCounters_ = &noCounters[0])
            fixed(uint* noInstances_ = &noInstances[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters_, noInstances_, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint* noCounters, uint* noInstances, uint* capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters, noInstances, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint* noCounters, uint* noInstances, uint[] capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters, noInstances, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint* noCounters, uint[] noInstances, uint* capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* noInstances_ = &noInstances[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters, noInstances_, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint* noCounters, uint[] noInstances, uint[] capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* noInstances_ = &noInstances[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters, noInstances_, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint[] noCounters, uint* noInstances, uint* capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* noCounters_ = &noCounters[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters_, noInstances, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint[] noCounters, uint* noInstances, uint[] capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* noCounters_ = &noCounters[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters_, noInstances, capsMask_);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint[] noCounters, uint[] noInstances, uint* capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* noCounters_ = &noCounters[0])
            fixed(uint* noInstances_ = &noInstances[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters_, noInstances_, capsMask);
        }
        
        public unsafe static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint[] dataSize, uint[] noCounters, uint[] noInstances, uint[] capsMask) {
            fixed(uint* dataSize_ = &dataSize[0])
            fixed(uint* noCounters_ = &noCounters[0])
            fixed(uint* noInstances_ = &noInstances[0])
            fixed(uint* capsMask_ = &capsMask[0])
                Pointers.glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize_, noCounters_, noInstances_, capsMask_);
        }
        
        public unsafe static void glGetPixelMapfv(int map, float* values) {
            Pointers.glGetPixelMapfv(map, values);
        }
        
        public unsafe static void glGetPixelMapfv(int map, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glGetPixelMapfv(map, values_);
        }
        
        public unsafe static void glGetPixelMapuiv(int map, uint* values) {
            Pointers.glGetPixelMapuiv(map, values);
        }
        
        public unsafe static void glGetPixelMapuiv(int map, uint[] values) {
            fixed(uint* values_ = &values[0])
                Pointers.glGetPixelMapuiv(map, values_);
        }
        
        public unsafe static void glGetPixelMapusv(int map, ushort* values) {
            Pointers.glGetPixelMapusv(map, values);
        }
        
        public unsafe static void glGetPixelMapusv(int map, ushort[] values) {
            fixed(ushort* values_ = &values[0])
                Pointers.glGetPixelMapusv(map, values_);
        }
        
        public unsafe static void glGetPixelMapxv(int map, int size, IntPtr* values) {
            Pointers.glGetPixelMapxv(map, size, values);
        }
        
        public unsafe static void glGetPixelMapxv(int map, int size, IntPtr[] values) {
            fixed(IntPtr* values_ = &values[0])
                Pointers.glGetPixelMapxv(map, size, values_);
        }
        
        public unsafe static void glGetPixelTexGenParameterfvSGIS(int pname, float* _params) {
            Pointers.glGetPixelTexGenParameterfvSGIS(pname, _params);
        }
        
        public unsafe static void glGetPixelTexGenParameterfvSGIS(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetPixelTexGenParameterfvSGIS(pname, _params_);
        }
        
        public unsafe static void glGetPixelTexGenParameterivSGIS(int pname, int* _params) {
            Pointers.glGetPixelTexGenParameterivSGIS(pname, _params);
        }
        
        public unsafe static void glGetPixelTexGenParameterivSGIS(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetPixelTexGenParameterivSGIS(pname, _params_);
        }
        
        public unsafe static void glGetPixelTransformParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glGetPixelTransformParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glGetPixelTransformParameterfvEXT(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetPixelTransformParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetPixelTransformParameterivEXT(int target, int pname, int* _params) {
            Pointers.glGetPixelTransformParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetPixelTransformParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetPixelTransformParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetPointerIndexedvEXT(int target, uint index, IntPtr* data) {
            Pointers.glGetPointerIndexedvEXT(target, index, data);
        }
        
        public unsafe static void glGetPointerIndexedvEXT(int target, uint index, out IntPtr data) {
            fixed(IntPtr* data_ = &data)
                Pointers.glGetPointerIndexedvEXT(target, index, data_);
        }
        
        public unsafe static void glGetPointeri_vEXT(int pname, uint index, IntPtr* _params) {
            Pointers.glGetPointeri_vEXT(pname, index, _params);
        }
        
        public unsafe static void glGetPointeri_vEXT(int pname, uint index, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetPointeri_vEXT(pname, index, _params_);
        }
        
        public unsafe static void glGetPointerv(int pname, IntPtr* _params) {
            Pointers.glGetPointerv(pname, _params);
        }
        
        public unsafe static void glGetPointerv(int pname, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetPointerv(pname, _params_);
        }
        
        public unsafe static void glGetPointervEXT(int pname, IntPtr* _params) {
            Pointers.glGetPointervEXT(pname, _params);
        }
        
        public unsafe static void glGetPointervEXT(int pname, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetPointervEXT(pname, _params_);
        }
        
        public unsafe static void glGetPointervKHR(int pname, IntPtr* _params) {
            Pointers.glGetPointervKHR(pname, _params);
        }
        
        public unsafe static void glGetPointervKHR(int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetPointervKHR(pname, _params_);
        }
        
        public unsafe static void glGetPolygonStipple(byte* mask) {
            Pointers.glGetPolygonStipple(mask);
        }
        
        public unsafe static void glGetPolygonStipple(byte[] mask) {
            fixed(byte* mask_ = &mask[0])
                Pointers.glGetPolygonStipple(mask_);
        }
        
        public unsafe static void glGetProgramBinary(uint program, int bufSize, int* length, int* binaryFormat, IntPtr binary) {
            Pointers.glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
        }
        
        public unsafe static void glGetProgramBinary(uint program, int bufSize, int* length, out int binaryFormat, IntPtr binary) {
            fixed(int* binaryFormat_ = &binaryFormat)
                Pointers.glGetProgramBinary(program, bufSize, length, binaryFormat_, binary);
        }
        
        public unsafe static void glGetProgramBinary(uint program, int bufSize, out int length, int* binaryFormat, IntPtr binary) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramBinary(program, bufSize, length_, binaryFormat, binary);
        }
        
        public unsafe static void glGetProgramBinary(uint program, int bufSize, out int length, out int binaryFormat, IntPtr binary) {
            fixed(int* length_ = &length)
            fixed(int* binaryFormat_ = &binaryFormat)
                Pointers.glGetProgramBinary(program, bufSize, length_, binaryFormat_, binary);
        }
        
        public unsafe static void glGetProgramBinaryOES(uint program, int bufSize, int* length, int* binaryFormat, IntPtr binary) {
            Pointers.glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
        }
        
        public unsafe static void glGetProgramBinaryOES(uint program, int bufSize, int* length, out int binaryFormat, IntPtr binary) {
            fixed(int* binaryFormat_ = &binaryFormat)
                Pointers.glGetProgramBinaryOES(program, bufSize, length, binaryFormat_, binary);
        }
        
        public unsafe static void glGetProgramBinaryOES(uint program, int bufSize, out int length, int* binaryFormat, IntPtr binary) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramBinaryOES(program, bufSize, length_, binaryFormat, binary);
        }
        
        public unsafe static void glGetProgramBinaryOES(uint program, int bufSize, out int length, out int binaryFormat, IntPtr binary) {
            fixed(int* length_ = &length)
            fixed(int* binaryFormat_ = &binaryFormat)
                Pointers.glGetProgramBinaryOES(program, bufSize, length_, binaryFormat_, binary);
        }
        
        public unsafe static void glGetProgramEnvParameterIivNV(int target, uint index, int* _params) {
            Pointers.glGetProgramEnvParameterIivNV(target, index, _params);
        }
        
        public unsafe static void glGetProgramEnvParameterIivNV(int target, uint index, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramEnvParameterIivNV(target, index, _params_);
        }
        
        public unsafe static void glGetProgramEnvParameterIuivNV(int target, uint index, uint* _params) {
            Pointers.glGetProgramEnvParameterIuivNV(target, index, _params);
        }
        
        public unsafe static void glGetProgramEnvParameterIuivNV(int target, uint index, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetProgramEnvParameterIuivNV(target, index, _params_);
        }
        
        public unsafe static void glGetProgramEnvParameterdvARB(int target, uint index, double* _params) {
            Pointers.glGetProgramEnvParameterdvARB(target, index, _params);
        }
        
        public unsafe static void glGetProgramEnvParameterdvARB(int target, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetProgramEnvParameterdvARB(target, index, _params_);
        }
        
        public unsafe static void glGetProgramEnvParameterfvARB(int target, uint index, float* _params) {
            Pointers.glGetProgramEnvParameterfvARB(target, index, _params);
        }
        
        public unsafe static void glGetProgramEnvParameterfvARB(int target, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramEnvParameterfvARB(target, index, _params_);
        }
        
        public unsafe static void glGetProgramInfoLog(uint program, int bufSize, int* length, StringBuilder infoLog) {
            Pointers.glGetProgramInfoLog(program, bufSize, length, infoLog);
        }
        
        public unsafe static void glGetProgramInfoLog(uint program, int bufSize, out int length, StringBuilder infoLog) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramInfoLog(program, bufSize, length_, infoLog);
        }
        
        public unsafe static void glGetProgramInterfaceiv(uint program, int programInterface, int pname, int* _params) {
            Pointers.glGetProgramInterfaceiv(program, programInterface, pname, _params);
        }
        
        public unsafe static void glGetProgramInterfaceiv(uint program, int programInterface, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramInterfaceiv(program, programInterface, pname, _params_);
        }
        
        public unsafe static void glGetProgramLocalParameterIivNV(int target, uint index, int* _params) {
            Pointers.glGetProgramLocalParameterIivNV(target, index, _params);
        }
        
        public unsafe static void glGetProgramLocalParameterIivNV(int target, uint index, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramLocalParameterIivNV(target, index, _params_);
        }
        
        public unsafe static void glGetProgramLocalParameterIuivNV(int target, uint index, uint* _params) {
            Pointers.glGetProgramLocalParameterIuivNV(target, index, _params);
        }
        
        public unsafe static void glGetProgramLocalParameterIuivNV(int target, uint index, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetProgramLocalParameterIuivNV(target, index, _params_);
        }
        
        public unsafe static void glGetProgramLocalParameterdvARB(int target, uint index, double* _params) {
            Pointers.glGetProgramLocalParameterdvARB(target, index, _params);
        }
        
        public unsafe static void glGetProgramLocalParameterdvARB(int target, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetProgramLocalParameterdvARB(target, index, _params_);
        }
        
        public unsafe static void glGetProgramLocalParameterfvARB(int target, uint index, float* _params) {
            Pointers.glGetProgramLocalParameterfvARB(target, index, _params);
        }
        
        public unsafe static void glGetProgramLocalParameterfvARB(int target, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramLocalParameterfvARB(target, index, _params_);
        }
        
        public unsafe static void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double* _params) {
            Pointers.glGetProgramNamedParameterdvNV(id, len, name, _params);
        }
        
        public unsafe static void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetProgramNamedParameterdvNV(id, len, name, _params_);
        }
        
        public unsafe static void glGetProgramNamedParameterdvNV(uint id, int len, out byte name, double* _params) {
            fixed(byte* name_ = &name)
                Pointers.glGetProgramNamedParameterdvNV(id, len, name_, _params);
        }
        
        public unsafe static void glGetProgramNamedParameterdvNV(uint id, int len, out byte name, double[] _params) {
            fixed(byte* name_ = &name)
            fixed(double* _params_ = &_params[0])
                Pointers.glGetProgramNamedParameterdvNV(id, len, name_, _params_);
        }
        
        public unsafe static void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float* _params) {
            Pointers.glGetProgramNamedParameterfvNV(id, len, name, _params);
        }
        
        public unsafe static void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramNamedParameterfvNV(id, len, name, _params_);
        }
        
        public unsafe static void glGetProgramNamedParameterfvNV(uint id, int len, out byte name, float* _params) {
            fixed(byte* name_ = &name)
                Pointers.glGetProgramNamedParameterfvNV(id, len, name_, _params);
        }
        
        public unsafe static void glGetProgramNamedParameterfvNV(uint id, int len, out byte name, float[] _params) {
            fixed(byte* name_ = &name)
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramNamedParameterfvNV(id, len, name_, _params_);
        }
        
        public unsafe static void glGetProgramParameterdvNV(int target, uint index, int pname, double* _params) {
            Pointers.glGetProgramParameterdvNV(target, index, pname, _params);
        }
        
        public unsafe static void glGetProgramParameterdvNV(int target, uint index, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetProgramParameterdvNV(target, index, pname, _params_);
        }
        
        public unsafe static void glGetProgramParameterfvNV(int target, uint index, int pname, float* _params) {
            Pointers.glGetProgramParameterfvNV(target, index, pname, _params);
        }
        
        public unsafe static void glGetProgramParameterfvNV(int target, uint index, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramParameterfvNV(target, index, pname, _params_);
        }
        
        public unsafe static void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, StringBuilder infoLog) {
            Pointers.glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
        }
        
        public unsafe static void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, StringBuilder infoLog) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramPipelineInfoLog(pipeline, bufSize, length_, infoLog);
        }
        
        public unsafe static void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, int* length, StringBuilder infoLog) {
            Pointers.glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);
        }
        
        public unsafe static void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, out int length, StringBuilder infoLog) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length_, infoLog);
        }
        
        public unsafe static void glGetProgramPipelineiv(uint pipeline, int pname, int* _params) {
            Pointers.glGetProgramPipelineiv(pipeline, pname, _params);
        }
        
        public unsafe static void glGetProgramPipelineiv(uint pipeline, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramPipelineiv(pipeline, pname, _params_);
        }
        
        public unsafe static void glGetProgramPipelineivEXT(uint pipeline, int pname, int* _params) {
            Pointers.glGetProgramPipelineivEXT(pipeline, pname, _params);
        }
        
        public unsafe static void glGetProgramPipelineivEXT(uint pipeline, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramPipelineivEXT(pipeline, pname, _params_);
        }
        
        public unsafe static uint glGetProgramResourceIndex(uint program, int programInterface, string name) {
            return Pointers.glGetProgramResourceIndex(program, programInterface, name);
        }
        
        public unsafe static int glGetProgramResourceLocation(uint program, int programInterface, string name) {
            return Pointers.glGetProgramResourceLocation(program, programInterface, name);
        }
        
        public unsafe static int glGetProgramResourceLocationIndex(uint program, int programInterface, string name) {
            return Pointers.glGetProgramResourceLocationIndex(program, programInterface, name);
        }
        
        public unsafe static int glGetProgramResourceLocationIndexEXT(uint program, int programInterface, string name) {
            return Pointers.glGetProgramResourceLocationIndexEXT(program, programInterface, name);
        }
        
        public unsafe static void glGetProgramResourceName(uint program, int programInterface, uint index, int bufSize, int* length, StringBuilder name) {
            Pointers.glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
        }
        
        public unsafe static void glGetProgramResourceName(uint program, int programInterface, uint index, int bufSize, out int length, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramResourceName(program, programInterface, index, bufSize, length_, name);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, float* _params) {
            Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, _params);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, _params_);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int[] length, float* _params) {
            fixed(int* length_ = &length[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length_, _params);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int[] length, float[] _params) {
            fixed(int* length_ = &length[0])
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length_, _params_);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, int* length, float* _params) {
            fixed(uint* props_ = &props[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props_, bufSize, length, _params);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, int* length, float[] _params) {
            fixed(uint* props_ = &props[0])
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props_, bufSize, length, _params_);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, int[] length, float* _params) {
            fixed(uint* props_ = &props[0])
            fixed(int* length_ = &length[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props_, bufSize, length_, _params);
        }
        
        public unsafe static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, int[] length, float[] _params) {
            fixed(uint* props_ = &props[0])
            fixed(int* length_ = &length[0])
            fixed(float* _params_ = &_params[0])
                Pointers.glGetProgramResourcefvNV(program, programInterface, index, propCount, props_, bufSize, length_, _params_);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, int* _params) {
            Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, _params);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, _params_);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, out int length, int* _params) {
            fixed(int* length_ = &length)
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length_, _params);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, out int length, int[] _params) {
            fixed(int* length_ = &length)
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length_, _params_);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, int* length, int* _params) {
            fixed(uint* props_ = &props[0])
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props_, bufSize, length, _params);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, int* length, int[] _params) {
            fixed(uint* props_ = &props[0])
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props_, bufSize, length, _params_);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, out int length, int* _params) {
            fixed(uint* props_ = &props[0])
            fixed(int* length_ = &length)
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props_, bufSize, length_, _params);
        }
        
        public unsafe static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint[] props, int bufSize, out int length, int[] _params) {
            fixed(uint* props_ = &props[0])
            fixed(int* length_ = &length)
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramResourceiv(program, programInterface, index, propCount, props_, bufSize, length_, _params_);
        }
        
        public unsafe static void glGetProgramStageiv(uint program, int shadertype, int pname, int* values) {
            Pointers.glGetProgramStageiv(program, shadertype, pname, values);
        }
        
        public unsafe static void glGetProgramStageiv(uint program, int shadertype, int pname, out int values) {
            fixed(int* values_ = &values)
                Pointers.glGetProgramStageiv(program, shadertype, pname, values_);
        }
        
        public unsafe static void glGetProgramStageiv(uint program, Enums.ShaderType shadertype, int pname, int* values) {
            Pointers.glGetProgramStageiv(program, (int)shadertype, pname, values);
        }
        
        public unsafe static void glGetProgramStageiv(uint program, Enums.ShaderType shadertype, int pname, out int values) {
            fixed(int* values_ = &values)
                Pointers.glGetProgramStageiv(program, (int)shadertype, pname, values_);
        }
        
        public unsafe static void glGetProgramStringARB(int target, int pname, IntPtr _string) {
            Pointers.glGetProgramStringARB(target, pname, _string);
        }
        
        public unsafe static void glGetProgramStringNV(uint id, int pname, byte* program) {
            Pointers.glGetProgramStringNV(id, pname, program);
        }
        
        public unsafe static void glGetProgramStringNV(uint id, int pname, byte[] program) {
            fixed(byte* program_ = &program[0])
                Pointers.glGetProgramStringNV(id, pname, program_);
        }
        
        public unsafe static void glGetProgramSubroutineParameteruivNV(int target, uint index, uint* param) {
            Pointers.glGetProgramSubroutineParameteruivNV(target, index, param);
        }
        
        public unsafe static void glGetProgramSubroutineParameteruivNV(int target, uint index, uint[] param) {
            fixed(uint* param_ = &param[0])
                Pointers.glGetProgramSubroutineParameteruivNV(target, index, param_);
        }
        
        public unsafe static void glGetProgramiv(uint program, int pname, int* _params) {
            Pointers.glGetProgramiv(program, pname, _params);
        }
        
        public unsafe static void glGetProgramiv(uint program, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramiv(program, pname, _params_);
        }
        
        public unsafe static void glGetProgramivARB(int target, int pname, int* _params) {
            Pointers.glGetProgramivARB(target, pname, _params);
        }
        
        public unsafe static void glGetProgramivARB(int target, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetProgramivARB(target, pname, _params_);
        }
        
        public unsafe static void glGetProgramivNV(uint id, int pname, int* _params) {
            Pointers.glGetProgramivNV(id, pname, _params);
        }
        
        public unsafe static void glGetProgramivNV(uint id, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetProgramivNV(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryBufferObjecti64v(uint id, uint buffer, int pname, uint offset) {
            Pointers.glGetQueryBufferObjecti64v(id, buffer, pname, offset);
        }
        
        public unsafe static void glGetQueryBufferObjectiv(uint id, uint buffer, int pname, uint offset) {
            Pointers.glGetQueryBufferObjectiv(id, buffer, pname, offset);
        }
        
        public unsafe static void glGetQueryBufferObjectui64v(uint id, uint buffer, int pname, uint offset) {
            Pointers.glGetQueryBufferObjectui64v(id, buffer, pname, offset);
        }
        
        public unsafe static void glGetQueryBufferObjectuiv(uint id, uint buffer, int pname, uint offset) {
            Pointers.glGetQueryBufferObjectuiv(id, buffer, pname, offset);
        }
        
        public unsafe static void glGetQueryIndexediv(int target, uint index, int pname, int* _params) {
            Pointers.glGetQueryIndexediv(target, index, pname, _params);
        }
        
        public unsafe static void glGetQueryIndexediv(int target, uint index, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryIndexediv(target, index, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjecti64v(uint id, int pname, long* _params) {
            Pointers.glGetQueryObjecti64v(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjecti64v(uint id, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetQueryObjecti64v(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjecti64vEXT(uint id, int pname, long* _params) {
            Pointers.glGetQueryObjecti64vEXT(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjecti64vEXT(uint id, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetQueryObjecti64vEXT(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectiv(uint id, int pname, int* _params) {
            Pointers.glGetQueryObjectiv(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectiv(uint id, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryObjectiv(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectivARB(uint id, int pname, int* _params) {
            Pointers.glGetQueryObjectivARB(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectivARB(uint id, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryObjectivARB(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectivEXT(uint id, int pname, int* _params) {
            Pointers.glGetQueryObjectivEXT(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectivEXT(uint id, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryObjectivEXT(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectui64v(uint id, int pname, ulong* _params) {
            Pointers.glGetQueryObjectui64v(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectui64v(uint id, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetQueryObjectui64v(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectui64vEXT(uint id, int pname, ulong* _params) {
            Pointers.glGetQueryObjectui64vEXT(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectui64vEXT(uint id, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetQueryObjectui64vEXT(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectuiv(uint id, int pname, uint* _params) {
            Pointers.glGetQueryObjectuiv(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectuiv(uint id, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetQueryObjectuiv(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectuivARB(uint id, int pname, uint* _params) {
            Pointers.glGetQueryObjectuivARB(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectuivARB(uint id, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetQueryObjectuivARB(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryObjectuivEXT(uint id, int pname, uint* _params) {
            Pointers.glGetQueryObjectuivEXT(id, pname, _params);
        }
        
        public unsafe static void glGetQueryObjectuivEXT(uint id, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetQueryObjectuivEXT(id, pname, _params_);
        }
        
        public unsafe static void glGetQueryiv(int target, int pname, int* _params) {
            Pointers.glGetQueryiv(target, pname, _params);
        }
        
        public unsafe static void glGetQueryiv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryiv(target, pname, _params_);
        }
        
        public unsafe static void glGetQueryivARB(int target, int pname, int* _params) {
            Pointers.glGetQueryivARB(target, pname, _params);
        }
        
        public unsafe static void glGetQueryivARB(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryivARB(target, pname, _params_);
        }
        
        public unsafe static void glGetQueryivEXT(int target, int pname, int* _params) {
            Pointers.glGetQueryivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetQueryivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetQueryivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetRenderbufferParameteriv(int target, int pname, int* _params) {
            Pointers.glGetRenderbufferParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetRenderbufferParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetRenderbufferParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetRenderbufferParameterivEXT(int target, int pname, int* _params) {
            Pointers.glGetRenderbufferParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetRenderbufferParameterivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetRenderbufferParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetRenderbufferParameterivOES(int target, int pname, int* _params) {
            Pointers.glGetRenderbufferParameterivOES(target, pname, _params);
        }
        
        public unsafe static void glGetRenderbufferParameterivOES(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetRenderbufferParameterivOES(target, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterIiv(uint sampler, int pname, int* _params) {
            Pointers.glGetSamplerParameterIiv(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterIiv(uint sampler, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetSamplerParameterIiv(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterIivEXT(uint sampler, int pname, int* _params) {
            Pointers.glGetSamplerParameterIivEXT(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterIivEXT(uint sampler, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetSamplerParameterIivEXT(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterIivOES(uint sampler, int pname, int* _params) {
            Pointers.glGetSamplerParameterIivOES(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterIivOES(uint sampler, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetSamplerParameterIivOES(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterIuiv(uint sampler, int pname, uint* _params) {
            Pointers.glGetSamplerParameterIuiv(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterIuiv(uint sampler, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetSamplerParameterIuiv(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterIuivEXT(uint sampler, int pname, uint* _params) {
            Pointers.glGetSamplerParameterIuivEXT(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterIuivEXT(uint sampler, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetSamplerParameterIuivEXT(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterIuivOES(uint sampler, int pname, uint* _params) {
            Pointers.glGetSamplerParameterIuivOES(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterIuivOES(uint sampler, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetSamplerParameterIuivOES(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameterfv(uint sampler, int pname, float* _params) {
            Pointers.glGetSamplerParameterfv(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameterfv(uint sampler, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetSamplerParameterfv(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSamplerParameteriv(uint sampler, int pname, int* _params) {
            Pointers.glGetSamplerParameteriv(sampler, pname, _params);
        }
        
        public unsafe static void glGetSamplerParameteriv(uint sampler, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetSamplerParameteriv(sampler, pname, _params_);
        }
        
        public unsafe static void glGetSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* _params) {
            Pointers.glGetSemaphoreParameterui64vEXT(semaphore, pname, _params);
        }
        
        public unsafe static void glGetSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetSemaphoreParameterui64vEXT(semaphore, pname, _params_);
        }
        
        public unsafe static void glGetSeparableFilter(int target, int format, int type, IntPtr row, IntPtr column, IntPtr span) {
            Pointers.glGetSeparableFilter(target, format, type, row, column, span);
        }
        
        public unsafe static void glGetSeparableFilterEXT(int target, int format, int type, IntPtr row, IntPtr column, IntPtr span) {
            Pointers.glGetSeparableFilterEXT(target, format, type, row, column, span);
        }
        
        public unsafe static void glGetShaderInfoLog(uint shader, int bufSize, int* length, StringBuilder infoLog) {
            Pointers.glGetShaderInfoLog(shader, bufSize, length, infoLog);
        }
        
        public unsafe static void glGetShaderInfoLog(uint shader, int bufSize, out int length, StringBuilder infoLog) {
            fixed(int* length_ = &length)
                Pointers.glGetShaderInfoLog(shader, bufSize, length_, infoLog);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int* range, int* precision) {
            Pointers.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int* range, out int precision) {
            fixed(int* precision_ = &precision)
                Pointers.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision_);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int[] range, int* precision) {
            fixed(int* range_ = &range[0])
                Pointers.glGetShaderPrecisionFormat(shadertype, precisiontype, range_, precision);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int[] range, out int precision) {
            fixed(int* range_ = &range[0])
            fixed(int* precision_ = &precision)
                Pointers.glGetShaderPrecisionFormat(shadertype, precisiontype, range_, precision_);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(Enums.ShaderType shadertype, int precisiontype, int* range, int* precision) {
            Pointers.glGetShaderPrecisionFormat((int)shadertype, precisiontype, range, precision);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(Enums.ShaderType shadertype, int precisiontype, int* range, out int precision) {
            fixed(int* precision_ = &precision)
                Pointers.glGetShaderPrecisionFormat((int)shadertype, precisiontype, range, precision_);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(Enums.ShaderType shadertype, int precisiontype, int[] range, int* precision) {
            fixed(int* range_ = &range[0])
                Pointers.glGetShaderPrecisionFormat((int)shadertype, precisiontype, range_, precision);
        }
        
        public unsafe static void glGetShaderPrecisionFormat(Enums.ShaderType shadertype, int precisiontype, int[] range, out int precision) {
            fixed(int* range_ = &range[0])
            fixed(int* precision_ = &precision)
                Pointers.glGetShaderPrecisionFormat((int)shadertype, precisiontype, range_, precision_);
        }
        
        public unsafe static void glGetShaderSource(uint shader, int bufSize, int* length, StringBuilder source) {
            Pointers.glGetShaderSource(shader, bufSize, length, source);
        }
        
        public unsafe static void glGetShaderSource(uint shader, int bufSize, out int length, StringBuilder source) {
            fixed(int* length_ = &length)
                Pointers.glGetShaderSource(shader, bufSize, length_, source);
        }
        
        public unsafe static void glGetShaderSourceARB(uint obj, int maxLength, int* length, StringBuilder source) {
            Pointers.glGetShaderSourceARB(obj, maxLength, length, source);
        }
        
        public unsafe static void glGetShaderSourceARB(uint obj, int maxLength, out int length, StringBuilder source) {
            fixed(int* length_ = &length)
                Pointers.glGetShaderSourceARB(obj, maxLength, length_, source);
        }
        
        public unsafe static void glGetShaderiv(uint shader, int pname, int* _params) {
            Pointers.glGetShaderiv(shader, pname, _params);
        }
        
        public unsafe static void glGetShaderiv(uint shader, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetShaderiv(shader, pname, _params_);
        }
        
        public unsafe static void glGetSharpenTexFuncSGIS(int target, float* points) {
            Pointers.glGetSharpenTexFuncSGIS(target, points);
        }
        
        public unsafe static void glGetSharpenTexFuncSGIS(int target, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glGetSharpenTexFuncSGIS(target, points_);
        }
        
        public unsafe static ushort glGetStageIndexNV(int shadertype) {
            return Pointers.glGetStageIndexNV(shadertype);
        }
        
        public unsafe static ushort glGetStageIndexNV(Enums.ShaderType shadertype) {
            return Pointers.glGetStageIndexNV((int)shadertype);
        }
        
        public unsafe static string glGetString(int name) {
            return PtrToStringUTF8(Pointers.glGetString(name));
        }
        
        public unsafe static string glGetStringi(int name, uint index) {
            return PtrToStringUTF8(Pointers.glGetStringi(name, index));
        }
        
        public unsafe static uint glGetSubroutineIndex(uint program, int shadertype, string name) {
            return Pointers.glGetSubroutineIndex(program, shadertype, name);
        }
        
        public unsafe static uint glGetSubroutineIndex(uint program, Enums.ShaderType shadertype, string name) {
            return Pointers.glGetSubroutineIndex(program, (int)shadertype, name);
        }
        
        public unsafe static int glGetSubroutineUniformLocation(uint program, int shadertype, string name) {
            return Pointers.glGetSubroutineUniformLocation(program, shadertype, name);
        }
        
        public unsafe static int glGetSubroutineUniformLocation(uint program, Enums.ShaderType shadertype, string name) {
            return Pointers.glGetSubroutineUniformLocation(program, (int)shadertype, name);
        }
        
        public unsafe static void glGetSynciv(IntPtr sync, int pname, int bufSize, int* length, int* values) {
            Pointers.glGetSynciv(sync, pname, bufSize, length, values);
        }
        
        public unsafe static void glGetSynciv(IntPtr sync, int pname, int bufSize, int* length, int[] values) {
            fixed(int* values_ = &values[0])
                Pointers.glGetSynciv(sync, pname, bufSize, length, values_);
        }
        
        public unsafe static void glGetSynciv(IntPtr sync, int pname, int bufSize, out int length, int* values) {
            fixed(int* length_ = &length)
                Pointers.glGetSynciv(sync, pname, bufSize, length_, values);
        }
        
        public unsafe static void glGetSynciv(IntPtr sync, int pname, int bufSize, out int length, int[] values) {
            fixed(int* length_ = &length)
            fixed(int* values_ = &values[0])
                Pointers.glGetSynciv(sync, pname, bufSize, length_, values_);
        }
        
        public unsafe static void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, int* length, int* values) {
            Pointers.glGetSyncivAPPLE(sync, pname, bufSize, length, values);
        }
        
        public unsafe static void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, int* length, int[] values) {
            fixed(int* values_ = &values[0])
                Pointers.glGetSyncivAPPLE(sync, pname, bufSize, length, values_);
        }
        
        public unsafe static void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, int[] length, int* values) {
            fixed(int* length_ = &length[0])
                Pointers.glGetSyncivAPPLE(sync, pname, bufSize, length_, values);
        }
        
        public unsafe static void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, int[] length, int[] values) {
            fixed(int* length_ = &length[0])
            fixed(int* values_ = &values[0])
                Pointers.glGetSyncivAPPLE(sync, pname, bufSize, length_, values_);
        }
        
        public unsafe static void glGetTexBumpParameterfvATI(int pname, float* param) {
            Pointers.glGetTexBumpParameterfvATI(pname, param);
        }
        
        public unsafe static void glGetTexBumpParameterfvATI(int pname, float[] param) {
            fixed(float* param_ = &param[0])
                Pointers.glGetTexBumpParameterfvATI(pname, param_);
        }
        
        public unsafe static void glGetTexBumpParameterivATI(int pname, int* param) {
            Pointers.glGetTexBumpParameterivATI(pname, param);
        }
        
        public unsafe static void glGetTexBumpParameterivATI(int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetTexBumpParameterivATI(pname, param_);
        }
        
        public unsafe static void glGetTexEnvfv(int target, int pname, float* _params) {
            Pointers.glGetTexEnvfv(target, pname, _params);
        }
        
        public unsafe static void glGetTexEnvfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTexEnvfv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexEnviv(int target, int pname, int* _params) {
            Pointers.glGetTexEnviv(target, pname, _params);
        }
        
        public unsafe static void glGetTexEnviv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexEnviv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexEnvxv(int target, int pname, IntPtr* _params) {
            Pointers.glGetTexEnvxv(target, pname, _params);
        }
        
        public unsafe static void glGetTexEnvxv(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetTexEnvxv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexEnvxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glGetTexEnvxvOES(target, pname, _params);
        }
        
        public unsafe static void glGetTexEnvxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetTexEnvxvOES(target, pname, _params_);
        }
        
        public unsafe static void glGetTexFilterFuncSGIS(int target, int filter, float* weights) {
            Pointers.glGetTexFilterFuncSGIS(target, filter, weights);
        }
        
        public unsafe static void glGetTexFilterFuncSGIS(int target, int filter, float[] weights) {
            fixed(float* weights_ = &weights[0])
                Pointers.glGetTexFilterFuncSGIS(target, filter, weights_);
        }
        
        public unsafe static void glGetTexGendv(int coord, int pname, double* _params) {
            Pointers.glGetTexGendv(coord, pname, _params);
        }
        
        public unsafe static void glGetTexGendv(int coord, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetTexGendv(coord, pname, _params_);
        }
        
        public unsafe static void glGetTexGenfv(int coord, int pname, float* _params) {
            Pointers.glGetTexGenfv(coord, pname, _params);
        }
        
        public unsafe static void glGetTexGenfv(int coord, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTexGenfv(coord, pname, _params_);
        }
        
        public unsafe static void glGetTexGenfvOES(int coord, int pname, float* _params) {
            Pointers.glGetTexGenfvOES(coord, pname, _params);
        }
        
        public unsafe static void glGetTexGenfvOES(int coord, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTexGenfvOES(coord, pname, _params_);
        }
        
        public unsafe static void glGetTexGeniv(int coord, int pname, int* _params) {
            Pointers.glGetTexGeniv(coord, pname, _params);
        }
        
        public unsafe static void glGetTexGeniv(int coord, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexGeniv(coord, pname, _params_);
        }
        
        public unsafe static void glGetTexGenivOES(int coord, int pname, int* _params) {
            Pointers.glGetTexGenivOES(coord, pname, _params);
        }
        
        public unsafe static void glGetTexGenivOES(int coord, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexGenivOES(coord, pname, _params_);
        }
        
        public unsafe static void glGetTexGenxvOES(int coord, int pname, IntPtr* _params) {
            Pointers.glGetTexGenxvOES(coord, pname, _params);
        }
        
        public unsafe static void glGetTexGenxvOES(int coord, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetTexGenxvOES(coord, pname, _params_);
        }
        
        public unsafe static void glGetTexImage(int target, int level, int format, int type, IntPtr pixels) {
            Pointers.glGetTexImage(target, level, format, type, pixels);
        }
        
        public unsafe static void glGetTexLevelParameterfv(int target, int level, int pname, float* _params) {
            Pointers.glGetTexLevelParameterfv(target, level, pname, _params);
        }
        
        public unsafe static void glGetTexLevelParameterfv(int target, int level, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTexLevelParameterfv(target, level, pname, _params_);
        }
        
        public unsafe static void glGetTexLevelParameteriv(int target, int level, int pname, int* _params) {
            Pointers.glGetTexLevelParameteriv(target, level, pname, _params);
        }
        
        public unsafe static void glGetTexLevelParameteriv(int target, int level, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexLevelParameteriv(target, level, pname, _params_);
        }
        
        public unsafe static void glGetTexLevelParameterxvOES(int target, int level, int pname, IntPtr* _params) {
            Pointers.glGetTexLevelParameterxvOES(target, level, pname, _params);
        }
        
        public unsafe static void glGetTexLevelParameterxvOES(int target, int level, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetTexLevelParameterxvOES(target, level, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterIiv(int target, int pname, int* _params) {
            Pointers.glGetTexParameterIiv(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterIiv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexParameterIiv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterIivEXT(int target, int pname, int* _params) {
            Pointers.glGetTexParameterIivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterIivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexParameterIivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterIivOES(int target, int pname, int* _params) {
            Pointers.glGetTexParameterIivOES(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterIivOES(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexParameterIivOES(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterIuiv(int target, int pname, uint* _params) {
            Pointers.glGetTexParameterIuiv(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterIuiv(int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetTexParameterIuiv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterIuivEXT(int target, int pname, uint* _params) {
            Pointers.glGetTexParameterIuivEXT(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterIuivEXT(int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetTexParameterIuivEXT(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterIuivOES(int target, int pname, uint* _params) {
            Pointers.glGetTexParameterIuivOES(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterIuivOES(int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetTexParameterIuivOES(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterPointervAPPLE(int target, int pname, IntPtr* _params) {
            Pointers.glGetTexParameterPointervAPPLE(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterPointervAPPLE(int target, int pname, out IntPtr _params) {
            fixed(IntPtr* _params_ = &_params)
                Pointers.glGetTexParameterPointervAPPLE(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterfv(int target, int pname, float* _params) {
            Pointers.glGetTexParameterfv(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTexParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameteriv(int target, int pname, int* _params) {
            Pointers.glGetTexParameteriv(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTexParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterxv(int target, int pname, IntPtr* _params) {
            Pointers.glGetTexParameterxv(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterxv(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetTexParameterxv(target, pname, _params_);
        }
        
        public unsafe static void glGetTexParameterxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glGetTexParameterxvOES(target, pname, _params);
        }
        
        public unsafe static void glGetTexParameterxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glGetTexParameterxvOES(target, pname, _params_);
        }
        
        public unsafe static ulong glGetTextureHandleARB(uint texture) {
            return Pointers.glGetTextureHandleARB(texture);
        }
        
        public unsafe static ulong glGetTextureHandleIMG(uint texture) {
            return Pointers.glGetTextureHandleIMG(texture);
        }
        
        public unsafe static ulong glGetTextureHandleNV(uint texture) {
            return Pointers.glGetTextureHandleNV(texture);
        }
        
        public unsafe static void glGetTextureImage(uint texture, int level, int format, int type, int bufSize, IntPtr pixels) {
            Pointers.glGetTextureImage(texture, level, format, type, bufSize, pixels);
        }
        
        public unsafe static void glGetTextureImageEXT(uint texture, int target, int level, int format, int type, IntPtr pixels) {
            Pointers.glGetTextureImageEXT(texture, target, level, format, type, pixels);
        }
        
        public unsafe static void glGetTextureLevelParameterfv(uint texture, int level, int pname, float* _params) {
            Pointers.glGetTextureLevelParameterfv(texture, level, pname, _params);
        }
        
        public unsafe static void glGetTextureLevelParameterfv(uint texture, int level, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTextureLevelParameterfv(texture, level, pname, _params_);
        }
        
        public unsafe static void glGetTextureLevelParameterfvEXT(uint texture, int target, int level, int pname, float* _params) {
            Pointers.glGetTextureLevelParameterfvEXT(texture, target, level, pname, _params);
        }
        
        public unsafe static void glGetTextureLevelParameterfvEXT(uint texture, int target, int level, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTextureLevelParameterfvEXT(texture, target, level, pname, _params_);
        }
        
        public unsafe static void glGetTextureLevelParameteriv(uint texture, int level, int pname, int* _params) {
            Pointers.glGetTextureLevelParameteriv(texture, level, pname, _params);
        }
        
        public unsafe static void glGetTextureLevelParameteriv(uint texture, int level, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTextureLevelParameteriv(texture, level, pname, _params_);
        }
        
        public unsafe static void glGetTextureLevelParameterivEXT(uint texture, int target, int level, int pname, int* _params) {
            Pointers.glGetTextureLevelParameterivEXT(texture, target, level, pname, _params);
        }
        
        public unsafe static void glGetTextureLevelParameterivEXT(uint texture, int target, int level, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTextureLevelParameterivEXT(texture, target, level, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterIiv(uint texture, int pname, int* _params) {
            Pointers.glGetTextureParameterIiv(texture, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterIiv(uint texture, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTextureParameterIiv(texture, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterIivEXT(uint texture, int target, int pname, int* _params) {
            Pointers.glGetTextureParameterIivEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterIivEXT(uint texture, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTextureParameterIivEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterIuiv(uint texture, int pname, uint* _params) {
            Pointers.glGetTextureParameterIuiv(texture, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterIuiv(uint texture, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetTextureParameterIuiv(texture, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterIuivEXT(uint texture, int target, int pname, uint* _params) {
            Pointers.glGetTextureParameterIuivEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterIuivEXT(uint texture, int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetTextureParameterIuivEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterfv(uint texture, int pname, float* _params) {
            Pointers.glGetTextureParameterfv(texture, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterfv(uint texture, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTextureParameterfv(texture, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterfvEXT(uint texture, int target, int pname, float* _params) {
            Pointers.glGetTextureParameterfvEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterfvEXT(uint texture, int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetTextureParameterfvEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameteriv(uint texture, int pname, int* _params) {
            Pointers.glGetTextureParameteriv(texture, pname, _params);
        }
        
        public unsafe static void glGetTextureParameteriv(uint texture, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTextureParameteriv(texture, pname, _params_);
        }
        
        public unsafe static void glGetTextureParameterivEXT(uint texture, int target, int pname, int* _params) {
            Pointers.glGetTextureParameterivEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glGetTextureParameterivEXT(uint texture, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetTextureParameterivEXT(texture, target, pname, _params_);
        }
        
        public unsafe static ulong glGetTextureSamplerHandleARB(uint texture, uint sampler) {
            return Pointers.glGetTextureSamplerHandleARB(texture, sampler);
        }
        
        public unsafe static ulong glGetTextureSamplerHandleIMG(uint texture, uint sampler) {
            return Pointers.glGetTextureSamplerHandleIMG(texture, sampler);
        }
        
        public unsafe static ulong glGetTextureSamplerHandleNV(uint texture, uint sampler) {
            return Pointers.glGetTextureSamplerHandleNV(texture, sampler);
        }
        
        public unsafe static void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, IntPtr pixels) {
            Pointers.glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }
        
        public unsafe static void glGetTrackMatrixivNV(int target, uint address, int pname, int* _params) {
            Pointers.glGetTrackMatrixivNV(target, address, pname, _params);
        }
        
        public unsafe static void glGetTrackMatrixivNV(int target, uint address, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetTrackMatrixivNV(target, address, pname, _params_);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, out int type, StringBuilder name) {
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length, size, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length, size_, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, out int size, out int type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length, size_, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length_, size, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, int* size, out int type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length_, size, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length_, size_, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVarying(program, index, bufSize, length_, size_, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name) {
            Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, int* size, out int type, StringBuilder name) {
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, out int size, int* type, StringBuilder name) {
            fixed(int* size_ = &size)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size_, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, out int size, out int type, StringBuilder name) {
            fixed(int* size_ = &size)
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size_, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, out int length, int* size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length_, size, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, out int length, int* size, out int type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length_, size, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, out int length, out int size, int* type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length_, size_, type, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name) {
            fixed(int* length_ = &length)
            fixed(int* size_ = &size)
            fixed(int* type_ = &type)
                Pointers.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length_, size_, type_, name);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingNV(uint program, uint index, int* location) {
            Pointers.glGetTransformFeedbackVaryingNV(program, index, location);
        }
        
        public unsafe static void glGetTransformFeedbackVaryingNV(uint program, uint index, out int location) {
            fixed(int* location_ = &location)
                Pointers.glGetTransformFeedbackVaryingNV(program, index, location_);
        }
        
        public unsafe static void glGetTransformFeedbacki64_v(uint xfb, int pname, uint index, long* param) {
            Pointers.glGetTransformFeedbacki64_v(xfb, pname, index, param);
        }
        
        public unsafe static void glGetTransformFeedbacki64_v(uint xfb, int pname, uint index, long[] param) {
            fixed(long* param_ = &param[0])
                Pointers.glGetTransformFeedbacki64_v(xfb, pname, index, param_);
        }
        
        public unsafe static void glGetTransformFeedbacki_v(uint xfb, int pname, uint index, int* param) {
            Pointers.glGetTransformFeedbacki_v(xfb, pname, index, param);
        }
        
        public unsafe static void glGetTransformFeedbacki_v(uint xfb, int pname, uint index, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetTransformFeedbacki_v(xfb, pname, index, param_);
        }
        
        public unsafe static void glGetTransformFeedbackiv(uint xfb, int pname, int* param) {
            Pointers.glGetTransformFeedbackiv(xfb, pname, param);
        }
        
        public unsafe static void glGetTransformFeedbackiv(uint xfb, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetTransformFeedbackiv(xfb, pname, param_);
        }
        
        public unsafe static void glGetTranslatedShaderSourceANGLE(uint shader, int bufsize, int* length, StringBuilder source) {
            Pointers.glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);
        }
        
        public unsafe static void glGetTranslatedShaderSourceANGLE(uint shader, int bufsize, out int length, StringBuilder source) {
            fixed(int* length_ = &length)
                Pointers.glGetTranslatedShaderSourceANGLE(shader, bufsize, length_, source);
        }
        
        public unsafe static uint glGetUniformBlockIndex(uint program, string uniformBlockName) {
            return Pointers.glGetUniformBlockIndex(program, uniformBlockName);
        }
        
        public unsafe static int glGetUniformBufferSizeEXT(uint program, int location) {
            return Pointers.glGetUniformBufferSizeEXT(program, location);
        }
        
        public unsafe static void glGetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint* uniformIndices) {
            Pointers.glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
        }
        
        public unsafe static void glGetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint[] uniformIndices) {
            fixed(uint* uniformIndices_ = &uniformIndices[0])
                Pointers.glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices_);
        }
        
        public unsafe static int glGetUniformLocation(uint program, string name) {
            return Pointers.glGetUniformLocation(program, name);
        }
        
        public unsafe static int glGetUniformLocationARB(uint programObj, string name) {
            return Pointers.glGetUniformLocationARB(programObj, name);
        }
        
        public unsafe static uint glGetUniformOffsetEXT(uint program, int location) {
            return Pointers.glGetUniformOffsetEXT(program, location);
        }
        
        public unsafe static void glGetUniformSubroutineuiv(int shadertype, int location, uint* _params) {
            Pointers.glGetUniformSubroutineuiv(shadertype, location, _params);
        }
        
        public unsafe static void glGetUniformSubroutineuiv(int shadertype, int location, out uint _params) {
            fixed(uint* _params_ = &_params)
                Pointers.glGetUniformSubroutineuiv(shadertype, location, _params_);
        }
        
        public unsafe static void glGetUniformSubroutineuiv(Enums.ShaderType shadertype, int location, uint* _params) {
            Pointers.glGetUniformSubroutineuiv((int)shadertype, location, _params);
        }
        
        public unsafe static void glGetUniformSubroutineuiv(Enums.ShaderType shadertype, int location, out uint _params) {
            fixed(uint* _params_ = &_params)
                Pointers.glGetUniformSubroutineuiv((int)shadertype, location, _params_);
        }
        
        public unsafe static void glGetUniformdv(uint program, int location, double* _params) {
            Pointers.glGetUniformdv(program, location, _params);
        }
        
        public unsafe static void glGetUniformdv(uint program, int location, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetUniformdv(program, location, _params_);
        }
        
        public unsafe static void glGetUniformfv(uint program, int location, float* _params) {
            Pointers.glGetUniformfv(program, location, _params);
        }
        
        public unsafe static void glGetUniformfv(uint program, int location, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetUniformfv(program, location, _params_);
        }
        
        public unsafe static void glGetUniformfvARB(uint programObj, int location, float* _params) {
            Pointers.glGetUniformfvARB(programObj, location, _params);
        }
        
        public unsafe static void glGetUniformfvARB(uint programObj, int location, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetUniformfvARB(programObj, location, _params_);
        }
        
        public unsafe static void glGetUniformi64vARB(uint program, int location, long* _params) {
            Pointers.glGetUniformi64vARB(program, location, _params);
        }
        
        public unsafe static void glGetUniformi64vARB(uint program, int location, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetUniformi64vARB(program, location, _params_);
        }
        
        public unsafe static void glGetUniformi64vNV(uint program, int location, long* _params) {
            Pointers.glGetUniformi64vNV(program, location, _params);
        }
        
        public unsafe static void glGetUniformi64vNV(uint program, int location, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetUniformi64vNV(program, location, _params_);
        }
        
        public unsafe static void glGetUniformiv(uint program, int location, int* _params) {
            Pointers.glGetUniformiv(program, location, _params);
        }
        
        public unsafe static void glGetUniformiv(uint program, int location, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetUniformiv(program, location, _params_);
        }
        
        public unsafe static void glGetUniformivARB(uint programObj, int location, int* _params) {
            Pointers.glGetUniformivARB(programObj, location, _params);
        }
        
        public unsafe static void glGetUniformivARB(uint programObj, int location, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetUniformivARB(programObj, location, _params_);
        }
        
        public unsafe static void glGetUniformui64vARB(uint program, int location, ulong* _params) {
            Pointers.glGetUniformui64vARB(program, location, _params);
        }
        
        public unsafe static void glGetUniformui64vARB(uint program, int location, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetUniformui64vARB(program, location, _params_);
        }
        
        public unsafe static void glGetUniformui64vNV(uint program, int location, ulong* _params) {
            Pointers.glGetUniformui64vNV(program, location, _params);
        }
        
        public unsafe static void glGetUniformui64vNV(uint program, int location, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetUniformui64vNV(program, location, _params_);
        }
        
        public unsafe static void glGetUniformuiv(uint program, int location, uint* _params) {
            Pointers.glGetUniformuiv(program, location, _params);
        }
        
        public unsafe static void glGetUniformuiv(uint program, int location, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetUniformuiv(program, location, _params_);
        }
        
        public unsafe static void glGetUniformuivEXT(uint program, int location, uint* _params) {
            Pointers.glGetUniformuivEXT(program, location, _params);
        }
        
        public unsafe static void glGetUniformuivEXT(uint program, int location, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetUniformuivEXT(program, location, _params_);
        }
        
        public unsafe static void glGetUnsignedBytevEXT(int pname, byte* data) {
            Pointers.glGetUnsignedBytevEXT(pname, data);
        }
        
        public unsafe static void glGetUnsignedBytevEXT(int pname, byte[] data) {
            fixed(byte* data_ = &data[0])
                Pointers.glGetUnsignedBytevEXT(pname, data_);
        }
        
        public unsafe static void glGetUnsignedBytei_vEXT(int target, uint index, byte* data) {
            Pointers.glGetUnsignedBytei_vEXT(target, index, data);
        }
        
        public unsafe static void glGetUnsignedBytei_vEXT(int target, uint index, byte[] data) {
            fixed(byte* data_ = &data[0])
                Pointers.glGetUnsignedBytei_vEXT(target, index, data_);
        }
        
        public unsafe static void glGetVariantArrayObjectfvATI(uint id, int pname, float* _params) {
            Pointers.glGetVariantArrayObjectfvATI(id, pname, _params);
        }
        
        public unsafe static void glGetVariantArrayObjectfvATI(uint id, int pname, out float _params) {
            fixed(float* _params_ = &_params)
                Pointers.glGetVariantArrayObjectfvATI(id, pname, _params_);
        }
        
        public unsafe static void glGetVariantArrayObjectivATI(uint id, int pname, int* _params) {
            Pointers.glGetVariantArrayObjectivATI(id, pname, _params);
        }
        
        public unsafe static void glGetVariantArrayObjectivATI(uint id, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetVariantArrayObjectivATI(id, pname, _params_);
        }
        
        public unsafe static void glGetVariantBooleanvEXT(uint id, int value, bool* data) {
            Pointers.glGetVariantBooleanvEXT(id, value, data);
        }
        
        public unsafe static void glGetVariantBooleanvEXT(uint id, int value, bool[] data) {
            fixed(bool* data_ = &data[0])
                Pointers.glGetVariantBooleanvEXT(id, value, data_);
        }
        
        public unsafe static void glGetVariantFloatvEXT(uint id, int value, float* data) {
            Pointers.glGetVariantFloatvEXT(id, value, data);
        }
        
        public unsafe static void glGetVariantFloatvEXT(uint id, int value, float[] data) {
            fixed(float* data_ = &data[0])
                Pointers.glGetVariantFloatvEXT(id, value, data_);
        }
        
        public unsafe static void glGetVariantIntegervEXT(uint id, int value, int* data) {
            Pointers.glGetVariantIntegervEXT(id, value, data);
        }
        
        public unsafe static void glGetVariantIntegervEXT(uint id, int value, int[] data) {
            fixed(int* data_ = &data[0])
                Pointers.glGetVariantIntegervEXT(id, value, data_);
        }
        
        public unsafe static void glGetVariantPointervEXT(uint id, int value, IntPtr* data) {
            Pointers.glGetVariantPointervEXT(id, value, data);
        }
        
        public unsafe static void glGetVariantPointervEXT(uint id, int value, IntPtr[] data) {
            fixed(IntPtr* data_ = &data[0])
                Pointers.glGetVariantPointervEXT(id, value, data_);
        }
        
        public unsafe static int glGetVaryingLocationNV(uint program, string name) {
            return Pointers.glGetVaryingLocationNV(program, name);
        }
        
        public unsafe static void glGetVertexArrayIndexed64iv(uint vaobj, uint index, int pname, long* param) {
            Pointers.glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
        }
        
        public unsafe static void glGetVertexArrayIndexed64iv(uint vaobj, uint index, int pname, long[] param) {
            fixed(long* param_ = &param[0])
                Pointers.glGetVertexArrayIndexed64iv(vaobj, index, pname, param_);
        }
        
        public unsafe static void glGetVertexArrayIndexediv(uint vaobj, uint index, int pname, int* param) {
            Pointers.glGetVertexArrayIndexediv(vaobj, index, pname, param);
        }
        
        public unsafe static void glGetVertexArrayIndexediv(uint vaobj, uint index, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetVertexArrayIndexediv(vaobj, index, pname, param_);
        }
        
        public unsafe static void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, int pname, int* param) {
            Pointers.glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
        }
        
        public unsafe static void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param_);
        }
        
        public unsafe static void glGetVertexArrayIntegervEXT(uint vaobj, int pname, int* param) {
            Pointers.glGetVertexArrayIntegervEXT(vaobj, pname, param);
        }
        
        public unsafe static void glGetVertexArrayIntegervEXT(uint vaobj, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetVertexArrayIntegervEXT(vaobj, pname, param_);
        }
        
        public unsafe static void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, int pname, IntPtr* param) {
            Pointers.glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
        }
        
        public unsafe static void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param_);
        }
        
        public unsafe static void glGetVertexArrayPointervEXT(uint vaobj, int pname, IntPtr* param) {
            Pointers.glGetVertexArrayPointervEXT(vaobj, pname, param);
        }
        
        public unsafe static void glGetVertexArrayPointervEXT(uint vaobj, int pname, out IntPtr param) {
            fixed(IntPtr* param_ = &param)
                Pointers.glGetVertexArrayPointervEXT(vaobj, pname, param_);
        }
        
        public unsafe static void glGetVertexArrayiv(uint vaobj, int pname, int* param) {
            Pointers.glGetVertexArrayiv(vaobj, pname, param);
        }
        
        public unsafe static void glGetVertexArrayiv(uint vaobj, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glGetVertexArrayiv(vaobj, pname, param_);
        }
        
        public unsafe static void glGetVertexAttribArrayObjectfvATI(uint index, int pname, float* _params) {
            Pointers.glGetVertexAttribArrayObjectfvATI(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribArrayObjectfvATI(uint index, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetVertexAttribArrayObjectfvATI(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribArrayObjectivATI(uint index, int pname, int* _params) {
            Pointers.glGetVertexAttribArrayObjectivATI(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribArrayObjectivATI(uint index, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetVertexAttribArrayObjectivATI(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribIiv(uint index, int pname, int* _params) {
            Pointers.glGetVertexAttribIiv(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribIiv(uint index, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetVertexAttribIiv(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribIivEXT(uint index, int pname, int* _params) {
            Pointers.glGetVertexAttribIivEXT(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribIivEXT(uint index, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetVertexAttribIivEXT(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribIuiv(uint index, int pname, uint* _params) {
            Pointers.glGetVertexAttribIuiv(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribIuiv(uint index, int pname, out uint _params) {
            fixed(uint* _params_ = &_params)
                Pointers.glGetVertexAttribIuiv(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribIuivEXT(uint index, int pname, uint* _params) {
            Pointers.glGetVertexAttribIuivEXT(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribIuivEXT(uint index, int pname, out uint _params) {
            fixed(uint* _params_ = &_params)
                Pointers.glGetVertexAttribIuivEXT(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribLdv(uint index, int pname, double* _params) {
            Pointers.glGetVertexAttribLdv(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribLdv(uint index, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetVertexAttribLdv(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribLdvEXT(uint index, int pname, double* _params) {
            Pointers.glGetVertexAttribLdvEXT(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribLdvEXT(uint index, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetVertexAttribLdvEXT(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribLi64vNV(uint index, int pname, long* _params) {
            Pointers.glGetVertexAttribLi64vNV(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribLi64vNV(uint index, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetVertexAttribLi64vNV(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribLui64vARB(uint index, int pname, ulong* _params) {
            Pointers.glGetVertexAttribLui64vARB(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribLui64vARB(uint index, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetVertexAttribLui64vARB(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribLui64vNV(uint index, int pname, ulong* _params) {
            Pointers.glGetVertexAttribLui64vNV(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribLui64vNV(uint index, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetVertexAttribLui64vNV(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribPointerv(uint index, int pname, IntPtr* pointer) {
            Pointers.glGetVertexAttribPointerv(index, pname, pointer);
        }
        
        public unsafe static void glGetVertexAttribPointerv(uint index, int pname, out IntPtr pointer) {
            fixed(IntPtr* pointer_ = &pointer)
                Pointers.glGetVertexAttribPointerv(index, pname, pointer_);
        }
        
        public unsafe static void glGetVertexAttribPointervARB(uint index, int pname, IntPtr* pointer) {
            Pointers.glGetVertexAttribPointervARB(index, pname, pointer);
        }
        
        public unsafe static void glGetVertexAttribPointervARB(uint index, int pname, out IntPtr pointer) {
            fixed(IntPtr* pointer_ = &pointer)
                Pointers.glGetVertexAttribPointervARB(index, pname, pointer_);
        }
        
        public unsafe static void glGetVertexAttribPointervNV(uint index, int pname, IntPtr* pointer) {
            Pointers.glGetVertexAttribPointervNV(index, pname, pointer);
        }
        
        public unsafe static void glGetVertexAttribPointervNV(uint index, int pname, out IntPtr pointer) {
            fixed(IntPtr* pointer_ = &pointer)
                Pointers.glGetVertexAttribPointervNV(index, pname, pointer_);
        }
        
        public unsafe static void glGetVertexAttribdv(uint index, int pname, double* _params) {
            Pointers.glGetVertexAttribdv(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribdv(uint index, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetVertexAttribdv(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribdvARB(uint index, int pname, double* _params) {
            Pointers.glGetVertexAttribdvARB(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribdvARB(uint index, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetVertexAttribdvARB(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribdvNV(uint index, int pname, double* _params) {
            Pointers.glGetVertexAttribdvNV(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribdvNV(uint index, int pname, out double _params) {
            fixed(double* _params_ = &_params)
                Pointers.glGetVertexAttribdvNV(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribfv(uint index, int pname, float* _params) {
            Pointers.glGetVertexAttribfv(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribfv(uint index, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetVertexAttribfv(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribfvARB(uint index, int pname, float* _params) {
            Pointers.glGetVertexAttribfvARB(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribfvARB(uint index, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetVertexAttribfvARB(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribfvNV(uint index, int pname, float* _params) {
            Pointers.glGetVertexAttribfvNV(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribfvNV(uint index, int pname, out float _params) {
            fixed(float* _params_ = &_params)
                Pointers.glGetVertexAttribfvNV(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribiv(uint index, int pname, int* _params) {
            Pointers.glGetVertexAttribiv(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribiv(uint index, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetVertexAttribiv(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribivARB(uint index, int pname, int* _params) {
            Pointers.glGetVertexAttribivARB(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribivARB(uint index, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetVertexAttribivARB(index, pname, _params_);
        }
        
        public unsafe static void glGetVertexAttribivNV(uint index, int pname, int* _params) {
            Pointers.glGetVertexAttribivNV(index, pname, _params);
        }
        
        public unsafe static void glGetVertexAttribivNV(uint index, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glGetVertexAttribivNV(index, pname, _params_);
        }
        
        public unsafe static void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, double* _params) {
            Pointers.glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, _params);
        }
        
        public unsafe static void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, _params_);
        }
        
        public unsafe static void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, float* _params) {
            Pointers.glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, _params);
        }
        
        public unsafe static void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, _params_);
        }
        
        public unsafe static void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, int* _params) {
            Pointers.glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, _params);
        }
        
        public unsafe static void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, _params_);
        }
        
        public unsafe static void glGetVideoCaptureivNV(uint video_capture_slot, int pname, int* _params) {
            Pointers.glGetVideoCaptureivNV(video_capture_slot, pname, _params);
        }
        
        public unsafe static void glGetVideoCaptureivNV(uint video_capture_slot, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetVideoCaptureivNV(video_capture_slot, pname, _params_);
        }
        
        public unsafe static void glGetVideoi64vNV(uint video_slot, int pname, long* _params) {
            Pointers.glGetVideoi64vNV(video_slot, pname, _params);
        }
        
        public unsafe static void glGetVideoi64vNV(uint video_slot, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetVideoi64vNV(video_slot, pname, _params_);
        }
        
        public unsafe static void glGetVideoivNV(uint video_slot, int pname, int* _params) {
            Pointers.glGetVideoivNV(video_slot, pname, _params);
        }
        
        public unsafe static void glGetVideoivNV(uint video_slot, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetVideoivNV(video_slot, pname, _params_);
        }
        
        public unsafe static void glGetVideoui64vNV(uint video_slot, int pname, ulong* _params) {
            Pointers.glGetVideoui64vNV(video_slot, pname, _params);
        }
        
        public unsafe static void glGetVideoui64vNV(uint video_slot, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetVideoui64vNV(video_slot, pname, _params_);
        }
        
        public unsafe static void glGetVideouivNV(uint video_slot, int pname, uint* _params) {
            Pointers.glGetVideouivNV(video_slot, pname, _params);
        }
        
        public unsafe static void glGetVideouivNV(uint video_slot, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetVideouivNV(video_slot, pname, _params_);
        }
        
        public unsafe static void glGetnColorTable(int target, int format, int type, int bufSize, IntPtr table) {
            Pointers.glGetnColorTable(target, format, type, bufSize, table);
        }
        
        public unsafe static void glGetnColorTableARB(int target, int format, int type, int bufSize, IntPtr table) {
            Pointers.glGetnColorTableARB(target, format, type, bufSize, table);
        }
        
        public unsafe static void glGetnCompressedTexImage(int target, int lod, int bufSize, IntPtr pixels) {
            Pointers.glGetnCompressedTexImage(target, lod, bufSize, pixels);
        }
        
        public unsafe static void glGetnCompressedTexImageARB(int target, int lod, int bufSize, IntPtr img) {
            Pointers.glGetnCompressedTexImageARB(target, lod, bufSize, img);
        }
        
        public unsafe static void glGetnConvolutionFilter(int target, int format, int type, int bufSize, IntPtr image) {
            Pointers.glGetnConvolutionFilter(target, format, type, bufSize, image);
        }
        
        public unsafe static void glGetnConvolutionFilterARB(int target, int format, int type, int bufSize, IntPtr image) {
            Pointers.glGetnConvolutionFilterARB(target, format, type, bufSize, image);
        }
        
        public unsafe static void glGetnHistogram(int target, bool reset, int format, int type, int bufSize, IntPtr values) {
            Pointers.glGetnHistogram(target, reset, format, type, bufSize, values);
        }
        
        public unsafe static void glGetnHistogramARB(int target, bool reset, int format, int type, int bufSize, IntPtr values) {
            Pointers.glGetnHistogramARB(target, reset, format, type, bufSize, values);
        }
        
        public unsafe static void glGetnMapdv(int target, int query, int bufSize, double* v) {
            Pointers.glGetnMapdv(target, query, bufSize, v);
        }
        
        public unsafe static void glGetnMapdv(int target, int query, int bufSize, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glGetnMapdv(target, query, bufSize, v_);
        }
        
        public unsafe static void glGetnMapdvARB(int target, int query, int bufSize, double* v) {
            Pointers.glGetnMapdvARB(target, query, bufSize, v);
        }
        
        public unsafe static void glGetnMapdvARB(int target, int query, int bufSize, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glGetnMapdvARB(target, query, bufSize, v_);
        }
        
        public unsafe static void glGetnMapfv(int target, int query, int bufSize, float* v) {
            Pointers.glGetnMapfv(target, query, bufSize, v);
        }
        
        public unsafe static void glGetnMapfv(int target, int query, int bufSize, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glGetnMapfv(target, query, bufSize, v_);
        }
        
        public unsafe static void glGetnMapfvARB(int target, int query, int bufSize, float* v) {
            Pointers.glGetnMapfvARB(target, query, bufSize, v);
        }
        
        public unsafe static void glGetnMapfvARB(int target, int query, int bufSize, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glGetnMapfvARB(target, query, bufSize, v_);
        }
        
        public unsafe static void glGetnMapiv(int target, int query, int bufSize, int* v) {
            Pointers.glGetnMapiv(target, query, bufSize, v);
        }
        
        public unsafe static void glGetnMapiv(int target, int query, int bufSize, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glGetnMapiv(target, query, bufSize, v_);
        }
        
        public unsafe static void glGetnMapivARB(int target, int query, int bufSize, int* v) {
            Pointers.glGetnMapivARB(target, query, bufSize, v);
        }
        
        public unsafe static void glGetnMapivARB(int target, int query, int bufSize, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glGetnMapivARB(target, query, bufSize, v_);
        }
        
        public unsafe static void glGetnMinmax(int target, bool reset, int format, int type, int bufSize, IntPtr values) {
            Pointers.glGetnMinmax(target, reset, format, type, bufSize, values);
        }
        
        public unsafe static void glGetnMinmaxARB(int target, bool reset, int format, int type, int bufSize, IntPtr values) {
            Pointers.glGetnMinmaxARB(target, reset, format, type, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapfv(int map, int bufSize, float* values) {
            Pointers.glGetnPixelMapfv(map, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapfv(int map, int bufSize, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glGetnPixelMapfv(map, bufSize, values_);
        }
        
        public unsafe static void glGetnPixelMapfvARB(int map, int bufSize, float* values) {
            Pointers.glGetnPixelMapfvARB(map, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapfvARB(int map, int bufSize, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glGetnPixelMapfvARB(map, bufSize, values_);
        }
        
        public unsafe static void glGetnPixelMapuiv(int map, int bufSize, uint* values) {
            Pointers.glGetnPixelMapuiv(map, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapuiv(int map, int bufSize, uint[] values) {
            fixed(uint* values_ = &values[0])
                Pointers.glGetnPixelMapuiv(map, bufSize, values_);
        }
        
        public unsafe static void glGetnPixelMapuivARB(int map, int bufSize, uint* values) {
            Pointers.glGetnPixelMapuivARB(map, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapuivARB(int map, int bufSize, uint[] values) {
            fixed(uint* values_ = &values[0])
                Pointers.glGetnPixelMapuivARB(map, bufSize, values_);
        }
        
        public unsafe static void glGetnPixelMapusv(int map, int bufSize, ushort* values) {
            Pointers.glGetnPixelMapusv(map, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapusv(int map, int bufSize, ushort[] values) {
            fixed(ushort* values_ = &values[0])
                Pointers.glGetnPixelMapusv(map, bufSize, values_);
        }
        
        public unsafe static void glGetnPixelMapusvARB(int map, int bufSize, ushort* values) {
            Pointers.glGetnPixelMapusvARB(map, bufSize, values);
        }
        
        public unsafe static void glGetnPixelMapusvARB(int map, int bufSize, ushort[] values) {
            fixed(ushort* values_ = &values[0])
                Pointers.glGetnPixelMapusvARB(map, bufSize, values_);
        }
        
        public unsafe static void glGetnPolygonStipple(int bufSize, byte* pattern) {
            Pointers.glGetnPolygonStipple(bufSize, pattern);
        }
        
        public unsafe static void glGetnPolygonStipple(int bufSize, byte[] pattern) {
            fixed(byte* pattern_ = &pattern[0])
                Pointers.glGetnPolygonStipple(bufSize, pattern_);
        }
        
        public unsafe static void glGetnPolygonStippleARB(int bufSize, byte* pattern) {
            Pointers.glGetnPolygonStippleARB(bufSize, pattern);
        }
        
        public unsafe static void glGetnPolygonStippleARB(int bufSize, byte[] pattern) {
            fixed(byte* pattern_ = &pattern[0])
                Pointers.glGetnPolygonStippleARB(bufSize, pattern_);
        }
        
        public unsafe static void glGetnSeparableFilter(int target, int format, int type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span) {
            Pointers.glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }
        
        public unsafe static void glGetnSeparableFilterARB(int target, int format, int type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span) {
            Pointers.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }
        
        public unsafe static void glGetnTexImage(int target, int level, int format, int type, int bufSize, IntPtr pixels) {
            Pointers.glGetnTexImage(target, level, format, type, bufSize, pixels);
        }
        
        public unsafe static void glGetnTexImageARB(int target, int level, int format, int type, int bufSize, IntPtr img) {
            Pointers.glGetnTexImageARB(target, level, format, type, bufSize, img);
        }
        
        public unsafe static void glGetnUniformdv(uint program, int location, int bufSize, double* _params) {
            Pointers.glGetnUniformdv(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformdv(uint program, int location, int bufSize, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetnUniformdv(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformdvARB(uint program, int location, int bufSize, double* _params) {
            Pointers.glGetnUniformdvARB(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformdvARB(uint program, int location, int bufSize, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glGetnUniformdvARB(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformfv(uint program, int location, int bufSize, float* _params) {
            Pointers.glGetnUniformfv(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformfv(uint program, int location, int bufSize, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetnUniformfv(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformfvARB(uint program, int location, int bufSize, float* _params) {
            Pointers.glGetnUniformfvARB(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformfvARB(uint program, int location, int bufSize, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetnUniformfvARB(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformfvEXT(uint program, int location, int bufSize, float* _params) {
            Pointers.glGetnUniformfvEXT(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformfvEXT(uint program, int location, int bufSize, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetnUniformfvEXT(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformfvKHR(uint program, int location, int bufSize, float* _params) {
            Pointers.glGetnUniformfvKHR(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformfvKHR(uint program, int location, int bufSize, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glGetnUniformfvKHR(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformi64vARB(uint program, int location, int bufSize, long* _params) {
            Pointers.glGetnUniformi64vARB(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformi64vARB(uint program, int location, int bufSize, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glGetnUniformi64vARB(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformiv(uint program, int location, int bufSize, int* _params) {
            Pointers.glGetnUniformiv(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformiv(uint program, int location, int bufSize, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetnUniformiv(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformivARB(uint program, int location, int bufSize, int* _params) {
            Pointers.glGetnUniformivARB(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformivARB(uint program, int location, int bufSize, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetnUniformivARB(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformivEXT(uint program, int location, int bufSize, int* _params) {
            Pointers.glGetnUniformivEXT(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformivEXT(uint program, int location, int bufSize, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetnUniformivEXT(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformivKHR(uint program, int location, int bufSize, int* _params) {
            Pointers.glGetnUniformivKHR(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformivKHR(uint program, int location, int bufSize, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glGetnUniformivKHR(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong* _params) {
            Pointers.glGetnUniformui64vARB(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glGetnUniformui64vARB(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformuiv(uint program, int location, int bufSize, uint* _params) {
            Pointers.glGetnUniformuiv(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformuiv(uint program, int location, int bufSize, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetnUniformuiv(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformuivARB(uint program, int location, int bufSize, uint* _params) {
            Pointers.glGetnUniformuivARB(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformuivARB(uint program, int location, int bufSize, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetnUniformuivARB(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGetnUniformuivKHR(uint program, int location, int bufSize, uint* _params) {
            Pointers.glGetnUniformuivKHR(program, location, bufSize, _params);
        }
        
        public unsafe static void glGetnUniformuivKHR(uint program, int location, int bufSize, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glGetnUniformuivKHR(program, location, bufSize, _params_);
        }
        
        public unsafe static void glGlobalAlphaFactorbSUN(sbyte factor) {
            Pointers.glGlobalAlphaFactorbSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactordSUN(double factor) {
            Pointers.glGlobalAlphaFactordSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactorfSUN(float factor) {
            Pointers.glGlobalAlphaFactorfSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactoriSUN(int factor) {
            Pointers.glGlobalAlphaFactoriSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactorsSUN(short factor) {
            Pointers.glGlobalAlphaFactorsSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactorubSUN(byte factor) {
            Pointers.glGlobalAlphaFactorubSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactoruiSUN(uint factor) {
            Pointers.glGlobalAlphaFactoruiSUN(factor);
        }
        
        public unsafe static void glGlobalAlphaFactorusSUN(ushort factor) {
            Pointers.glGlobalAlphaFactorusSUN(factor);
        }
        
        public unsafe static void glHint(int target, int mode) {
            Pointers.glHint(target, mode);
        }
        
        public unsafe static void glHintPGI(int target, int mode) {
            Pointers.glHintPGI(target, mode);
        }
        
        public unsafe static void glHistogram(int target, int width, int internalformat, bool sink) {
            Pointers.glHistogram(target, width, internalformat, sink);
        }
        
        public unsafe static void glHistogramEXT(int target, int width, int internalformat, bool sink) {
            Pointers.glHistogramEXT(target, width, internalformat, sink);
        }
        
        public unsafe static void glIglooInterfaceSGIX(int pname, IntPtr _params) {
            Pointers.glIglooInterfaceSGIX(pname, _params);
        }
        
        public unsafe static void glImageTransformParameterfHP(int target, int pname, float param) {
            Pointers.glImageTransformParameterfHP(target, pname, param);
        }
        
        public unsafe static void glImageTransformParameterfvHP(int target, int pname, float* _params) {
            Pointers.glImageTransformParameterfvHP(target, pname, _params);
        }
        
        public unsafe static void glImageTransformParameterfvHP(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glImageTransformParameterfvHP(target, pname, _params_);
        }
        
        public unsafe static void glImageTransformParameteriHP(int target, int pname, int param) {
            Pointers.glImageTransformParameteriHP(target, pname, param);
        }
        
        public unsafe static void glImageTransformParameterivHP(int target, int pname, int* _params) {
            Pointers.glImageTransformParameterivHP(target, pname, _params);
        }
        
        public unsafe static void glImageTransformParameterivHP(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glImageTransformParameterivHP(target, pname, _params_);
        }
        
        public unsafe static void glImportMemoryFdEXT(uint memory, ulong size, int handleType, int fd) {
            Pointers.glImportMemoryFdEXT(memory, size, handleType, fd);
        }
        
        public unsafe static void glImportMemoryWin32HandleEXT(uint memory, ulong size, int handleType, IntPtr handle) {
            Pointers.glImportMemoryWin32HandleEXT(memory, size, handleType, handle);
        }
        
        public unsafe static void glImportMemoryWin32NameEXT(uint memory, ulong size, int handleType, IntPtr name) {
            Pointers.glImportMemoryWin32NameEXT(memory, size, handleType, name);
        }
        
        public unsafe static void glImportSemaphoreFdEXT(uint semaphore, int handleType, int fd) {
            Pointers.glImportSemaphoreFdEXT(semaphore, handleType, fd);
        }
        
        public unsafe static void glImportSemaphoreWin32HandleEXT(uint semaphore, int handleType, IntPtr handle) {
            Pointers.glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
        }
        
        public unsafe static void glImportSemaphoreWin32NameEXT(uint semaphore, int handleType, IntPtr name) {
            Pointers.glImportSemaphoreWin32NameEXT(semaphore, handleType, name);
        }
        
        public unsafe static IntPtr glImportSyncEXT(int external_sync_type, uint external_sync, uint flags) {
            return Pointers.glImportSyncEXT(external_sync_type, external_sync, flags);
        }
        
        public unsafe static void glIndexFormatNV(int type, int stride) {
            Pointers.glIndexFormatNV(type, stride);
        }
        
        public unsafe static void glIndexFuncEXT(int func, float _ref) {
            Pointers.glIndexFuncEXT(func, _ref);
        }
        
        public unsafe static void glIndexMask(uint mask) {
            Pointers.glIndexMask(mask);
        }
        
        public unsafe static void glIndexMaterialEXT(int face, int mode) {
            Pointers.glIndexMaterialEXT(face, mode);
        }
        
        public unsafe static void glIndexPointer(int type, int stride, IntPtr pointer) {
            Pointers.glIndexPointer(type, stride, pointer);
        }
        
        public unsafe static void glIndexPointerEXT(int type, int stride, int count, IntPtr pointer) {
            Pointers.glIndexPointerEXT(type, stride, count, pointer);
        }
        
        public unsafe static void glIndexPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glIndexPointerListIBM(type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glIndexPointerListIBM(int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glIndexPointerListIBM(type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glIndexd(double c) {
            Pointers.glIndexd(c);
        }
        
        public unsafe static void glIndexdv(double* c) {
            Pointers.glIndexdv(c);
        }
        
        public unsafe static void glIndexdv(out double c) {
            fixed(double* c_ = &c)
                Pointers.glIndexdv(c_);
        }
        
        public unsafe static void glIndexf(float c) {
            Pointers.glIndexf(c);
        }
        
        public unsafe static void glIndexfv(float* c) {
            Pointers.glIndexfv(c);
        }
        
        public unsafe static void glIndexfv(out float c) {
            fixed(float* c_ = &c)
                Pointers.glIndexfv(c_);
        }
        
        public unsafe static void glIndexi(int c) {
            Pointers.glIndexi(c);
        }
        
        public unsafe static void glIndexiv(int* c) {
            Pointers.glIndexiv(c);
        }
        
        public unsafe static void glIndexiv(out int c) {
            fixed(int* c_ = &c)
                Pointers.glIndexiv(c_);
        }
        
        public unsafe static void glIndexs(short c) {
            Pointers.glIndexs(c);
        }
        
        public unsafe static void glIndexsv(short* c) {
            Pointers.glIndexsv(c);
        }
        
        public unsafe static void glIndexsv(out short c) {
            fixed(short* c_ = &c)
                Pointers.glIndexsv(c_);
        }
        
        public unsafe static void glIndexub(byte c) {
            Pointers.glIndexub(c);
        }
        
        public unsafe static void glIndexubv(byte* c) {
            Pointers.glIndexubv(c);
        }
        
        public unsafe static void glIndexubv(out byte c) {
            fixed(byte* c_ = &c)
                Pointers.glIndexubv(c_);
        }
        
        public unsafe static void glIndexxOES(IntPtr component) {
            Pointers.glIndexxOES(component);
        }
        
        public unsafe static void glIndexxvOES(IntPtr* component) {
            Pointers.glIndexxvOES(component);
        }
        
        public unsafe static void glIndexxvOES(out IntPtr component) {
            fixed(IntPtr* component_ = &component)
                Pointers.glIndexxvOES(component_);
        }
        
        public unsafe static void glInitNames() {
            Pointers.glInitNames();
        }
        
        public unsafe static void glInsertComponentEXT(uint res, uint src, uint num) {
            Pointers.glInsertComponentEXT(res, src, num);
        }
        
        public unsafe static void glInsertEventMarkerEXT(int length, string marker) {
            Pointers.glInsertEventMarkerEXT(length, marker);
        }
        
        public unsafe static void glInstrumentsBufferSGIX(int size, int* buffer) {
            Pointers.glInstrumentsBufferSGIX(size, buffer);
        }
        
        public unsafe static void glInstrumentsBufferSGIX(int size, int[] buffer) {
            fixed(int* buffer_ = &buffer[0])
                Pointers.glInstrumentsBufferSGIX(size, buffer_);
        }
        
        public unsafe static void glInterleavedArrays(int format, int stride, IntPtr pointer) {
            Pointers.glInterleavedArrays(format, stride, pointer);
        }
        
        public unsafe static void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight) {
            Pointers.glInterpolatePathsNV(resultPath, pathA, pathB, weight);
        }
        
        public unsafe static void glInvalidateBufferData(uint buffer) {
            Pointers.glInvalidateBufferData(buffer);
        }
        
        public unsafe static void glInvalidateBufferSubData(uint buffer, uint offset, uint length) {
            Pointers.glInvalidateBufferSubData(buffer, offset, length);
        }
        
        public unsafe static void glInvalidateFramebuffer(int target, int numAttachments, uint* attachments) {
            Pointers.glInvalidateFramebuffer(target, numAttachments, attachments);
        }
        
        public unsafe static void glInvalidateFramebuffer(int target, int numAttachments, uint[] attachments) {
            fixed(uint* attachments_ = &attachments[0])
                Pointers.glInvalidateFramebuffer(target, numAttachments, attachments_);
        }
        
        public unsafe static void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments) {
            Pointers.glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
        }
        
        public unsafe static void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint[] attachments) {
            fixed(uint* attachments_ = &attachments[0])
                Pointers.glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_);
        }
        
        public unsafe static void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height) {
            Pointers.glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
        }
        
        public unsafe static void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint[] attachments, int x, int y, int width, int height) {
            fixed(uint* attachments_ = &attachments[0])
                Pointers.glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_, x, y, width, height);
        }
        
        public unsafe static void glInvalidateSubFramebuffer(int target, int numAttachments, uint* attachments, int x, int y, int width, int height) {
            Pointers.glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
        }
        
        public unsafe static void glInvalidateSubFramebuffer(int target, int numAttachments, uint[] attachments, int x, int y, int width, int height) {
            fixed(uint* attachments_ = &attachments[0])
                Pointers.glInvalidateSubFramebuffer(target, numAttachments, attachments_, x, y, width, height);
        }
        
        public unsafe static void glInvalidateTexImage(uint texture, int level) {
            Pointers.glInvalidateTexImage(texture, level);
        }
        
        public unsafe static void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) {
            Pointers.glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        
        public unsafe static bool glIsAsyncMarkerSGIX(uint marker) {
            return Pointers.glIsAsyncMarkerSGIX(marker);
        }
        
        public unsafe static bool glIsBuffer(uint buffer) {
            return Pointers.glIsBuffer(buffer);
        }
        
        public unsafe static bool glIsBufferARB(uint buffer) {
            return Pointers.glIsBufferARB(buffer);
        }
        
        public unsafe static bool glIsBufferResidentNV(int target) {
            return Pointers.glIsBufferResidentNV(target);
        }
        
        public unsafe static bool glIsCommandListNV(uint list) {
            return Pointers.glIsCommandListNV(list);
        }
        
        public unsafe static bool glIsEnabled(int cap) {
            return Pointers.glIsEnabled(cap);
        }
        
        public unsafe static bool glIsEnabledIndexedEXT(int target, uint index) {
            return Pointers.glIsEnabledIndexedEXT(target, index);
        }
        
        public unsafe static bool glIsEnabledi(int target, uint index) {
            return Pointers.glIsEnabledi(target, index);
        }
        
        public unsafe static bool glIsEnablediEXT(int target, uint index) {
            return Pointers.glIsEnablediEXT(target, index);
        }
        
        public unsafe static bool glIsEnablediNV(int target, uint index) {
            return Pointers.glIsEnablediNV(target, index);
        }
        
        public unsafe static bool glIsEnablediOES(int target, uint index) {
            return Pointers.glIsEnablediOES(target, index);
        }
        
        public unsafe static bool glIsFenceAPPLE(uint fence) {
            return Pointers.glIsFenceAPPLE(fence);
        }
        
        public unsafe static bool glIsFenceNV(uint fence) {
            return Pointers.glIsFenceNV(fence);
        }
        
        public unsafe static bool glIsFramebuffer(uint framebuffer) {
            return Pointers.glIsFramebuffer(framebuffer);
        }
        
        public unsafe static bool glIsFramebufferEXT(uint framebuffer) {
            return Pointers.glIsFramebufferEXT(framebuffer);
        }
        
        public unsafe static bool glIsFramebufferOES(uint framebuffer) {
            return Pointers.glIsFramebufferOES(framebuffer);
        }
        
        public unsafe static bool glIsImageHandleResidentARB(ulong handle) {
            return Pointers.glIsImageHandleResidentARB(handle);
        }
        
        public unsafe static bool glIsImageHandleResidentNV(ulong handle) {
            return Pointers.glIsImageHandleResidentNV(handle);
        }
        
        public unsafe static bool glIsList(uint list) {
            return Pointers.glIsList(list);
        }
        
        public unsafe static bool glIsMemoryObjectEXT(uint memoryObject) {
            return Pointers.glIsMemoryObjectEXT(memoryObject);
        }
        
        public unsafe static bool glIsNameAMD(int identifier, uint name) {
            return Pointers.glIsNameAMD(identifier, name);
        }
        
        public unsafe static bool glIsNamedBufferResidentNV(uint buffer) {
            return Pointers.glIsNamedBufferResidentNV(buffer);
        }
        
        public unsafe static bool glIsNamedStringARB(int namelen, string name) {
            return Pointers.glIsNamedStringARB(namelen, name);
        }
        
        public unsafe static bool glIsObjectBufferATI(uint buffer) {
            return Pointers.glIsObjectBufferATI(buffer);
        }
        
        public unsafe static bool glIsOcclusionQueryNV(uint id) {
            return Pointers.glIsOcclusionQueryNV(id);
        }
        
        public unsafe static bool glIsPathNV(uint path) {
            return Pointers.glIsPathNV(path);
        }
        
        public unsafe static bool glIsPointInFillPathNV(uint path, uint mask, float x, float y) {
            return Pointers.glIsPointInFillPathNV(path, mask, x, y);
        }
        
        public unsafe static bool glIsPointInStrokePathNV(uint path, float x, float y) {
            return Pointers.glIsPointInStrokePathNV(path, x, y);
        }
        
        public unsafe static bool glIsProgram(uint program) {
            return Pointers.glIsProgram(program);
        }
        
        public unsafe static bool glIsProgramARB(uint program) {
            return Pointers.glIsProgramARB(program);
        }
        
        public unsafe static bool glIsProgramNV(uint id) {
            return Pointers.glIsProgramNV(id);
        }
        
        public unsafe static bool glIsProgramPipeline(uint pipeline) {
            return Pointers.glIsProgramPipeline(pipeline);
        }
        
        public unsafe static bool glIsProgramPipelineEXT(uint pipeline) {
            return Pointers.glIsProgramPipelineEXT(pipeline);
        }
        
        public unsafe static bool glIsQuery(uint id) {
            return Pointers.glIsQuery(id);
        }
        
        public unsafe static bool glIsQueryARB(uint id) {
            return Pointers.glIsQueryARB(id);
        }
        
        public unsafe static bool glIsQueryEXT(uint id) {
            return Pointers.glIsQueryEXT(id);
        }
        
        public unsafe static bool glIsRenderbuffer(uint renderbuffer) {
            return Pointers.glIsRenderbuffer(renderbuffer);
        }
        
        public unsafe static bool glIsRenderbufferEXT(uint renderbuffer) {
            return Pointers.glIsRenderbufferEXT(renderbuffer);
        }
        
        public unsafe static bool glIsRenderbufferOES(uint renderbuffer) {
            return Pointers.glIsRenderbufferOES(renderbuffer);
        }
        
        public unsafe static bool glIsSemaphoreEXT(uint semaphore) {
            return Pointers.glIsSemaphoreEXT(semaphore);
        }
        
        public unsafe static bool glIsSampler(uint sampler) {
            return Pointers.glIsSampler(sampler);
        }
        
        public unsafe static bool glIsShader(uint shader) {
            return Pointers.glIsShader(shader);
        }
        
        public unsafe static bool glIsStateNV(uint state) {
            return Pointers.glIsStateNV(state);
        }
        
        public unsafe static bool glIsSync(IntPtr sync) {
            return Pointers.glIsSync(sync);
        }
        
        public unsafe static bool glIsSyncAPPLE(IntPtr sync) {
            return Pointers.glIsSyncAPPLE(sync);
        }
        
        public unsafe static bool glIsTexture(uint texture) {
            return Pointers.glIsTexture(texture);
        }
        
        public unsafe static bool glIsTextureEXT(uint texture) {
            return Pointers.glIsTextureEXT(texture);
        }
        
        public unsafe static bool glIsTextureHandleResidentARB(ulong handle) {
            return Pointers.glIsTextureHandleResidentARB(handle);
        }
        
        public unsafe static bool glIsTextureHandleResidentNV(ulong handle) {
            return Pointers.glIsTextureHandleResidentNV(handle);
        }
        
        public unsafe static bool glIsTransformFeedback(uint id) {
            return Pointers.glIsTransformFeedback(id);
        }
        
        public unsafe static bool glIsTransformFeedbackNV(uint id) {
            return Pointers.glIsTransformFeedbackNV(id);
        }
        
        public unsafe static bool glIsVariantEnabledEXT(uint id, int cap) {
            return Pointers.glIsVariantEnabledEXT(id, cap);
        }
        
        public unsafe static bool glIsVertexArray(uint array) {
            return Pointers.glIsVertexArray(array);
        }
        
        public unsafe static bool glIsVertexArrayAPPLE(uint array) {
            return Pointers.glIsVertexArrayAPPLE(array);
        }
        
        public unsafe static bool glIsVertexArrayOES(uint array) {
            return Pointers.glIsVertexArrayOES(array);
        }
        
        public unsafe static bool glIsVertexAttribEnabledAPPLE(uint index, int pname) {
            return Pointers.glIsVertexAttribEnabledAPPLE(index, pname);
        }
        
        public unsafe static void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) {
            Pointers.glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        public unsafe static void glLGPUInterlockNVX() {
            Pointers.glLGPUInterlockNVX();
        }
        
        public unsafe static void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, uint offset, uint size, IntPtr data) {
            Pointers.glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
        }
        
        public unsafe static void glLabelObjectEXT(int type, uint _object, int length, string label) {
            Pointers.glLabelObjectEXT(type, _object, length, label);
        }
        
        public unsafe static void glLightEnviSGIX(int pname, int param) {
            Pointers.glLightEnviSGIX(pname, param);
        }
        
        public unsafe static void glLightModelf(int pname, float param) {
            Pointers.glLightModelf(pname, param);
        }
        
        public unsafe static void glLightModelfv(int pname, float* _params) {
            Pointers.glLightModelfv(pname, _params);
        }
        
        public unsafe static void glLightModelfv(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glLightModelfv(pname, _params_);
        }
        
        public unsafe static void glLightModeli(int pname, int param) {
            Pointers.glLightModeli(pname, param);
        }
        
        public unsafe static void glLightModeliv(int pname, int* _params) {
            Pointers.glLightModeliv(pname, _params);
        }
        
        public unsafe static void glLightModeliv(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glLightModeliv(pname, _params_);
        }
        
        public unsafe static void glLightModelx(int pname, IntPtr param) {
            Pointers.glLightModelx(pname, param);
        }
        
        public unsafe static void glLightModelxOES(int pname, IntPtr param) {
            Pointers.glLightModelxOES(pname, param);
        }
        
        public unsafe static void glLightModelxv(int pname, IntPtr* param) {
            Pointers.glLightModelxv(pname, param);
        }
        
        public unsafe static void glLightModelxv(int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glLightModelxv(pname, param_);
        }
        
        public unsafe static void glLightModelxvOES(int pname, IntPtr* param) {
            Pointers.glLightModelxvOES(pname, param);
        }
        
        public unsafe static void glLightModelxvOES(int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glLightModelxvOES(pname, param_);
        }
        
        public unsafe static void glLightf(int light, int pname, float param) {
            Pointers.glLightf(light, pname, param);
        }
        
        public unsafe static void glLightfv(int light, int pname, float* _params) {
            Pointers.glLightfv(light, pname, _params);
        }
        
        public unsafe static void glLightfv(int light, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glLightfv(light, pname, _params_);
        }
        
        public unsafe static void glLighti(int light, int pname, int param) {
            Pointers.glLighti(light, pname, param);
        }
        
        public unsafe static void glLightiv(int light, int pname, int* _params) {
            Pointers.glLightiv(light, pname, _params);
        }
        
        public unsafe static void glLightiv(int light, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glLightiv(light, pname, _params_);
        }
        
        public unsafe static void glLightx(int light, int pname, IntPtr param) {
            Pointers.glLightx(light, pname, param);
        }
        
        public unsafe static void glLightxOES(int light, int pname, IntPtr param) {
            Pointers.glLightxOES(light, pname, param);
        }
        
        public unsafe static void glLightxv(int light, int pname, IntPtr* _params) {
            Pointers.glLightxv(light, pname, _params);
        }
        
        public unsafe static void glLightxv(int light, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glLightxv(light, pname, _params_);
        }
        
        public unsafe static void glLightxvOES(int light, int pname, IntPtr* _params) {
            Pointers.glLightxvOES(light, pname, _params);
        }
        
        public unsafe static void glLightxvOES(int light, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glLightxvOES(light, pname, _params_);
        }
        
        public unsafe static void glLineStipple(int factor, ushort pattern) {
            Pointers.glLineStipple(factor, pattern);
        }
        
        public unsafe static void glLineWidth(float width) {
            Pointers.glLineWidth(width);
        }
        
        public unsafe static void glLineWidthx(IntPtr width) {
            Pointers.glLineWidthx(width);
        }
        
        public unsafe static void glLineWidthxOES(IntPtr width) {
            Pointers.glLineWidthxOES(width);
        }
        
        public unsafe static void glLinkProgram(uint program) {
            Pointers.glLinkProgram(program);
        }
        
        public unsafe static void glLinkProgramARB(uint programObj) {
            Pointers.glLinkProgramARB(programObj);
        }
        
        public unsafe static void glListBase(uint _base) {
            Pointers.glListBase(_base);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count) {
            Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int* sizes, uint* states, uint[] fbos, uint count) {
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int* sizes, uint[] states, uint* fbos, uint count) {
            fixed(uint* states_ = &states[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states_, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int* sizes, uint[] states, uint[] fbos, uint count) {
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states_, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int[] sizes, uint* states, uint* fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes_, states, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int[] sizes, uint* states, uint[] fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes_, states, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int[] sizes, uint[] states, uint* fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes_, states_, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int[] sizes, uint[] states, uint[] fbos, uint count) {
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects, sizes_, states_, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int* sizes, uint* states, uint* fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes, states, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int* sizes, uint* states, uint[] fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes, states, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int* sizes, uint[] states, uint* fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(uint* states_ = &states[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes, states_, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int* sizes, uint[] states, uint[] fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes, states_, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int[] sizes, uint* states, uint* fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes_, states, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int[] sizes, uint* states, uint[] fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes_, states, fbos_, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int[] sizes, uint[] states, uint* fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes_, states_, fbos, count);
        }
        
        public unsafe static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count) {
            fixed(IntPtr* indirects_ = &indirects[0])
            fixed(int* sizes_ = &sizes[0])
            fixed(uint* states_ = &states[0])
            fixed(uint* fbos_ = &fbos[0])
                Pointers.glListDrawCommandsStatesClientNV(list, segment, indirects_, sizes_, states_, fbos_, count);
        }
        
        public unsafe static void glListParameterfSGIX(uint list, int pname, float param) {
            Pointers.glListParameterfSGIX(list, pname, param);
        }
        
        public unsafe static void glListParameterfvSGIX(uint list, int pname, float* _params) {
            Pointers.glListParameterfvSGIX(list, pname, _params);
        }
        
        public unsafe static void glListParameterfvSGIX(uint list, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glListParameterfvSGIX(list, pname, _params_);
        }
        
        public unsafe static void glListParameteriSGIX(uint list, int pname, int param) {
            Pointers.glListParameteriSGIX(list, pname, param);
        }
        
        public unsafe static void glListParameterivSGIX(uint list, int pname, int* _params) {
            Pointers.glListParameterivSGIX(list, pname, _params);
        }
        
        public unsafe static void glListParameterivSGIX(uint list, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glListParameterivSGIX(list, pname, _params_);
        }
        
        public unsafe static void glLoadIdentity() {
            Pointers.glLoadIdentity();
        }
        
        public unsafe static void glLoadIdentityDeformationMapSGIX(uint mask) {
            Pointers.glLoadIdentityDeformationMapSGIX(mask);
        }
        
        public unsafe static void glLoadIdentityDeformationMapSGIX(Enums.FfdMaskSGIX mask) {
            Pointers.glLoadIdentityDeformationMapSGIX((uint)mask);
        }
        
        public unsafe static void glLoadMatrixd(double* m) {
            Pointers.glLoadMatrixd(m);
        }
        
        public unsafe static void glLoadMatrixd(double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glLoadMatrixd(m_);
        }
        
        public unsafe static void glLoadMatrixf(float* m) {
            Pointers.glLoadMatrixf(m);
        }
        
        public unsafe static void glLoadMatrixf(float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glLoadMatrixf(m_);
        }
        
        public unsafe static void glLoadMatrixx(IntPtr* m) {
            Pointers.glLoadMatrixx(m);
        }
        
        public unsafe static void glLoadMatrixx(IntPtr[] m) {
            fixed(IntPtr* m_ = &m[0])
                Pointers.glLoadMatrixx(m_);
        }
        
        public unsafe static void glLoadMatrixxOES(IntPtr* m) {
            Pointers.glLoadMatrixxOES(m);
        }
        
        public unsafe static void glLoadMatrixxOES(IntPtr[] m) {
            fixed(IntPtr* m_ = &m[0])
                Pointers.glLoadMatrixxOES(m_);
        }
        
        public unsafe static void glLoadName(uint name) {
            Pointers.glLoadName(name);
        }
        
        public unsafe static void glLoadPaletteFromModelViewMatrixOES() {
            Pointers.glLoadPaletteFromModelViewMatrixOES();
        }
        
        public unsafe static void glLoadProgramNV(int target, uint id, int len, byte* program) {
            Pointers.glLoadProgramNV(target, id, len, program);
        }
        
        public unsafe static void glLoadProgramNV(int target, uint id, int len, byte[] program) {
            fixed(byte* program_ = &program[0])
                Pointers.glLoadProgramNV(target, id, len, program_);
        }
        
        public unsafe static void glLoadTransposeMatrixd(double* m) {
            Pointers.glLoadTransposeMatrixd(m);
        }
        
        public unsafe static void glLoadTransposeMatrixd(double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glLoadTransposeMatrixd(m_);
        }
        
        public unsafe static void glLoadTransposeMatrixdARB(double* m) {
            Pointers.glLoadTransposeMatrixdARB(m);
        }
        
        public unsafe static void glLoadTransposeMatrixdARB(double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glLoadTransposeMatrixdARB(m_);
        }
        
        public unsafe static void glLoadTransposeMatrixf(float* m) {
            Pointers.glLoadTransposeMatrixf(m);
        }
        
        public unsafe static void glLoadTransposeMatrixf(float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glLoadTransposeMatrixf(m_);
        }
        
        public unsafe static void glLoadTransposeMatrixfARB(float* m) {
            Pointers.glLoadTransposeMatrixfARB(m);
        }
        
        public unsafe static void glLoadTransposeMatrixfARB(float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glLoadTransposeMatrixfARB(m_);
        }
        
        public unsafe static void glLoadTransposeMatrixxOES(IntPtr* m) {
            Pointers.glLoadTransposeMatrixxOES(m);
        }
        
        public unsafe static void glLoadTransposeMatrixxOES(IntPtr[] m) {
            fixed(IntPtr* m_ = &m[0])
                Pointers.glLoadTransposeMatrixxOES(m_);
        }
        
        public unsafe static void glLockArraysEXT(int first, int count) {
            Pointers.glLockArraysEXT(first, count);
        }
        
        public unsafe static void glLogicOp(int opcode) {
            Pointers.glLogicOp(opcode);
        }
        
        public unsafe static void glMakeBufferNonResidentNV(int target) {
            Pointers.glMakeBufferNonResidentNV(target);
        }
        
        public unsafe static void glMakeBufferResidentNV(int target, int access) {
            Pointers.glMakeBufferResidentNV(target, access);
        }
        
        public unsafe static void glMakeImageHandleNonResidentARB(ulong handle) {
            Pointers.glMakeImageHandleNonResidentARB(handle);
        }
        
        public unsafe static void glMakeImageHandleNonResidentNV(ulong handle) {
            Pointers.glMakeImageHandleNonResidentNV(handle);
        }
        
        public unsafe static void glMakeImageHandleResidentARB(ulong handle, int access) {
            Pointers.glMakeImageHandleResidentARB(handle, access);
        }
        
        public unsafe static void glMakeImageHandleResidentNV(ulong handle, int access) {
            Pointers.glMakeImageHandleResidentNV(handle, access);
        }
        
        public unsafe static void glMakeNamedBufferNonResidentNV(uint buffer) {
            Pointers.glMakeNamedBufferNonResidentNV(buffer);
        }
        
        public unsafe static void glMakeNamedBufferResidentNV(uint buffer, int access) {
            Pointers.glMakeNamedBufferResidentNV(buffer, access);
        }
        
        public unsafe static void glMakeTextureHandleNonResidentARB(ulong handle) {
            Pointers.glMakeTextureHandleNonResidentARB(handle);
        }
        
        public unsafe static void glMakeTextureHandleNonResidentNV(ulong handle) {
            Pointers.glMakeTextureHandleNonResidentNV(handle);
        }
        
        public unsafe static void glMakeTextureHandleResidentARB(ulong handle) {
            Pointers.glMakeTextureHandleResidentARB(handle);
        }
        
        public unsafe static void glMakeTextureHandleResidentNV(ulong handle) {
            Pointers.glMakeTextureHandleResidentNV(handle);
        }
        
        public unsafe static void glMap1d(int target, double u1, double u2, int stride, int order, double* points) {
            Pointers.glMap1d(target, u1, u2, stride, order, points);
        }
        
        public unsafe static void glMap1d(int target, double u1, double u2, int stride, int order, double[] points) {
            fixed(double* points_ = &points[0])
                Pointers.glMap1d(target, u1, u2, stride, order, points_);
        }
        
        public unsafe static void glMap1f(int target, float u1, float u2, int stride, int order, float* points) {
            Pointers.glMap1f(target, u1, u2, stride, order, points);
        }
        
        public unsafe static void glMap1f(int target, float u1, float u2, int stride, int order, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glMap1f(target, u1, u2, stride, order, points_);
        }
        
        public unsafe static void glMap1xOES(int target, IntPtr u1, IntPtr u2, int stride, int order, IntPtr points) {
            Pointers.glMap1xOES(target, u1, u2, stride, order, points);
        }
        
        public unsafe static void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points) {
            Pointers.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public unsafe static void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points) {
            fixed(double* points_ = &points[0])
                Pointers.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_);
        }
        
        public unsafe static void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points) {
            Pointers.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public unsafe static void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_);
        }
        
        public unsafe static void glMap2xOES(int target, IntPtr u1, IntPtr u2, int ustride, int uorder, IntPtr v1, IntPtr v2, int vstride, int vorder, IntPtr points) {
            Pointers.glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public unsafe static IntPtr glMapBuffer(int target, int access) {
            return Pointers.glMapBuffer(target, access);
        }
        
        public unsafe static IntPtr glMapBufferARB(int target, int access) {
            return Pointers.glMapBufferARB(target, access);
        }
        
        public unsafe static IntPtr glMapBufferOES(int target, int access) {
            return Pointers.glMapBufferOES(target, access);
        }
        
        public unsafe static IntPtr glMapBufferRange(int target, uint offset, uint length, uint access) {
            return Pointers.glMapBufferRange(target, offset, length, access);
        }
        
        public unsafe static IntPtr glMapBufferRange(int target, uint offset, uint length, Enums.BufferAccessMask access) {
            return Pointers.glMapBufferRange(target, offset, length, (uint)access);
        }
        
        public unsafe static IntPtr glMapBufferRangeEXT(int target, uint offset, uint length, uint access) {
            return Pointers.glMapBufferRangeEXT(target, offset, length, access);
        }
        
        public unsafe static IntPtr glMapBufferRangeEXT(int target, uint offset, uint length, Enums.BufferAccessMask access) {
            return Pointers.glMapBufferRangeEXT(target, offset, length, (uint)access);
        }
        
        public unsafe static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points) {
            Pointers.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }
        
        public unsafe static void glMapGrid1d(int un, double u1, double u2) {
            Pointers.glMapGrid1d(un, u1, u2);
        }
        
        public unsafe static void glMapGrid1f(int un, float u1, float u2) {
            Pointers.glMapGrid1f(un, u1, u2);
        }
        
        public unsafe static void glMapGrid1xOES(int n, IntPtr u1, IntPtr u2) {
            Pointers.glMapGrid1xOES(n, u1, u2);
        }
        
        public unsafe static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) {
            Pointers.glMapGrid2d(un, u1, u2, vn, v1, v2);
        }
        
        public unsafe static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2) {
            Pointers.glMapGrid2f(un, u1, u2, vn, v1, v2);
        }
        
        public unsafe static void glMapGrid2xOES(int n, IntPtr u1, IntPtr u2, IntPtr v1, IntPtr v2) {
            Pointers.glMapGrid2xOES(n, u1, u2, v1, v2);
        }
        
        public unsafe static IntPtr glMapNamedBuffer(uint buffer, int access) {
            return Pointers.glMapNamedBuffer(buffer, access);
        }
        
        public unsafe static IntPtr glMapNamedBufferEXT(uint buffer, int access) {
            return Pointers.glMapNamedBufferEXT(buffer, access);
        }
        
        public unsafe static IntPtr glMapNamedBufferRange(uint buffer, uint offset, uint length, uint access) {
            return Pointers.glMapNamedBufferRange(buffer, offset, length, access);
        }
        
        public unsafe static IntPtr glMapNamedBufferRange(uint buffer, uint offset, uint length, Enums.BufferAccessMask access) {
            return Pointers.glMapNamedBufferRange(buffer, offset, length, (uint)access);
        }
        
        public unsafe static IntPtr glMapNamedBufferRangeEXT(uint buffer, uint offset, uint length, uint access) {
            return Pointers.glMapNamedBufferRangeEXT(buffer, offset, length, access);
        }
        
        public unsafe static IntPtr glMapNamedBufferRangeEXT(uint buffer, uint offset, uint length, Enums.BufferAccessMask access) {
            return Pointers.glMapNamedBufferRangeEXT(buffer, offset, length, (uint)access);
        }
        
        public unsafe static IntPtr glMapObjectBufferATI(uint buffer) {
            return Pointers.glMapObjectBufferATI(buffer);
        }
        
        public unsafe static void glMapParameterfvNV(int target, int pname, float* _params) {
            Pointers.glMapParameterfvNV(target, pname, _params);
        }
        
        public unsafe static void glMapParameterfvNV(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glMapParameterfvNV(target, pname, _params_);
        }
        
        public unsafe static void glMapParameterivNV(int target, int pname, int* _params) {
            Pointers.glMapParameterivNV(target, pname, _params);
        }
        
        public unsafe static void glMapParameterivNV(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMapParameterivNV(target, pname, _params_);
        }
        
        public unsafe static IntPtr glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, int* layout) {
            return Pointers.glMapTexture2DINTEL(texture, level, access, stride, layout);
        }
        
        public unsafe static IntPtr glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, out int layout) {
            fixed(int* layout_ = &layout)
                return Pointers.glMapTexture2DINTEL(texture, level, access, stride, layout_);
        }
        
        public unsafe static IntPtr glMapTexture2DINTEL(uint texture, int level, uint access, out int stride, int* layout) {
            fixed(int* stride_ = &stride)
                return Pointers.glMapTexture2DINTEL(texture, level, access, stride_, layout);
        }
        
        public unsafe static IntPtr glMapTexture2DINTEL(uint texture, int level, uint access, out int stride, out int layout) {
            fixed(int* stride_ = &stride)
            fixed(int* layout_ = &layout)
                return Pointers.glMapTexture2DINTEL(texture, level, access, stride_, layout_);
        }
        
        public unsafe static void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points) {
            Pointers.glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
        }
        
        public unsafe static void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double[] points) {
            fixed(double* points_ = &points[0])
                Pointers.glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_);
        }
        
        public unsafe static void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points) {
            Pointers.glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
        }
        
        public unsafe static void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_);
        }
        
        public unsafe static void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points) {
            Pointers.glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public unsafe static void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points) {
            fixed(double* points_ = &points[0])
                Pointers.glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_);
        }
        
        public unsafe static void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points) {
            Pointers.glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public unsafe static void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_);
        }
        
        public unsafe static void glMaterialf(int face, int pname, float param) {
            Pointers.glMaterialf(face, pname, param);
        }
        
        public unsafe static void glMaterialfv(int face, int pname, float* _params) {
            Pointers.glMaterialfv(face, pname, _params);
        }
        
        public unsafe static void glMaterialfv(int face, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glMaterialfv(face, pname, _params_);
        }
        
        public unsafe static void glMateriali(int face, int pname, int param) {
            Pointers.glMateriali(face, pname, param);
        }
        
        public unsafe static void glMaterialiv(int face, int pname, int* _params) {
            Pointers.glMaterialiv(face, pname, _params);
        }
        
        public unsafe static void glMaterialiv(int face, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMaterialiv(face, pname, _params_);
        }
        
        public unsafe static void glMaterialx(int face, int pname, IntPtr param) {
            Pointers.glMaterialx(face, pname, param);
        }
        
        public unsafe static void glMaterialxOES(int face, int pname, IntPtr param) {
            Pointers.glMaterialxOES(face, pname, param);
        }
        
        public unsafe static void glMaterialxv(int face, int pname, IntPtr* param) {
            Pointers.glMaterialxv(face, pname, param);
        }
        
        public unsafe static void glMaterialxv(int face, int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glMaterialxv(face, pname, param_);
        }
        
        public unsafe static void glMaterialxvOES(int face, int pname, IntPtr* param) {
            Pointers.glMaterialxvOES(face, pname, param);
        }
        
        public unsafe static void glMaterialxvOES(int face, int pname, IntPtr[] param) {
            fixed(IntPtr* param_ = &param[0])
                Pointers.glMaterialxvOES(face, pname, param_);
        }
        
        public unsafe static void glMatrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar) {
            Pointers.glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
        }
        
        public unsafe static void glMatrixIndexPointerARB(int size, int type, int stride, IntPtr pointer) {
            Pointers.glMatrixIndexPointerARB(size, type, stride, pointer);
        }
        
        public unsafe static void glMatrixIndexPointerOES(int size, int type, int stride, IntPtr pointer) {
            Pointers.glMatrixIndexPointerOES(size, type, stride, pointer);
        }
        
        public unsafe static void glMatrixIndexubvARB(int size, byte* indices) {
            Pointers.glMatrixIndexubvARB(size, indices);
        }
        
        public unsafe static void glMatrixIndexubvARB(int size, byte[] indices) {
            fixed(byte* indices_ = &indices[0])
                Pointers.glMatrixIndexubvARB(size, indices_);
        }
        
        public unsafe static void glMatrixIndexuivARB(int size, uint* indices) {
            Pointers.glMatrixIndexuivARB(size, indices);
        }
        
        public unsafe static void glMatrixIndexuivARB(int size, uint[] indices) {
            fixed(uint* indices_ = &indices[0])
                Pointers.glMatrixIndexuivARB(size, indices_);
        }
        
        public unsafe static void glMatrixIndexusvARB(int size, ushort* indices) {
            Pointers.glMatrixIndexusvARB(size, indices);
        }
        
        public unsafe static void glMatrixIndexusvARB(int size, ushort[] indices) {
            fixed(ushort* indices_ = &indices[0])
                Pointers.glMatrixIndexusvARB(size, indices_);
        }
        
        public unsafe static void glMatrixLoad3x2fNV(int matrixMode, float* m) {
            Pointers.glMatrixLoad3x2fNV(matrixMode, m);
        }
        
        public unsafe static void glMatrixLoad3x2fNV(int matrixMode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixLoad3x2fNV(matrixMode, m_);
        }
        
        public unsafe static void glMatrixLoad3x3fNV(int matrixMode, float* m) {
            Pointers.glMatrixLoad3x3fNV(matrixMode, m);
        }
        
        public unsafe static void glMatrixLoad3x3fNV(int matrixMode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixLoad3x3fNV(matrixMode, m_);
        }
        
        public unsafe static void glMatrixLoadIdentityEXT(int mode) {
            Pointers.glMatrixLoadIdentityEXT(mode);
        }
        
        public unsafe static void glMatrixLoadTranspose3x3fNV(int matrixMode, float* m) {
            Pointers.glMatrixLoadTranspose3x3fNV(matrixMode, m);
        }
        
        public unsafe static void glMatrixLoadTranspose3x3fNV(int matrixMode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixLoadTranspose3x3fNV(matrixMode, m_);
        }
        
        public unsafe static void glMatrixLoadTransposedEXT(int mode, double* m) {
            Pointers.glMatrixLoadTransposedEXT(mode, m);
        }
        
        public unsafe static void glMatrixLoadTransposedEXT(int mode, double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMatrixLoadTransposedEXT(mode, m_);
        }
        
        public unsafe static void glMatrixLoadTransposefEXT(int mode, float* m) {
            Pointers.glMatrixLoadTransposefEXT(mode, m);
        }
        
        public unsafe static void glMatrixLoadTransposefEXT(int mode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixLoadTransposefEXT(mode, m_);
        }
        
        public unsafe static void glMatrixLoaddEXT(int mode, double* m) {
            Pointers.glMatrixLoaddEXT(mode, m);
        }
        
        public unsafe static void glMatrixLoaddEXT(int mode, double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMatrixLoaddEXT(mode, m_);
        }
        
        public unsafe static void glMatrixLoadfEXT(int mode, float* m) {
            Pointers.glMatrixLoadfEXT(mode, m);
        }
        
        public unsafe static void glMatrixLoadfEXT(int mode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixLoadfEXT(mode, m_);
        }
        
        public unsafe static void glMatrixMode(int mode) {
            Pointers.glMatrixMode(mode);
        }
        
        public unsafe static void glMatrixMult3x2fNV(int matrixMode, float* m) {
            Pointers.glMatrixMult3x2fNV(matrixMode, m);
        }
        
        public unsafe static void glMatrixMult3x2fNV(int matrixMode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixMult3x2fNV(matrixMode, m_);
        }
        
        public unsafe static void glMatrixMult3x3fNV(int matrixMode, float* m) {
            Pointers.glMatrixMult3x3fNV(matrixMode, m);
        }
        
        public unsafe static void glMatrixMult3x3fNV(int matrixMode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixMult3x3fNV(matrixMode, m_);
        }
        
        public unsafe static void glMatrixMultTranspose3x3fNV(int matrixMode, float* m) {
            Pointers.glMatrixMultTranspose3x3fNV(matrixMode, m);
        }
        
        public unsafe static void glMatrixMultTranspose3x3fNV(int matrixMode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixMultTranspose3x3fNV(matrixMode, m_);
        }
        
        public unsafe static void glMatrixMultTransposedEXT(int mode, double* m) {
            Pointers.glMatrixMultTransposedEXT(mode, m);
        }
        
        public unsafe static void glMatrixMultTransposedEXT(int mode, double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMatrixMultTransposedEXT(mode, m_);
        }
        
        public unsafe static void glMatrixMultTransposefEXT(int mode, float* m) {
            Pointers.glMatrixMultTransposefEXT(mode, m);
        }
        
        public unsafe static void glMatrixMultTransposefEXT(int mode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixMultTransposefEXT(mode, m_);
        }
        
        public unsafe static void glMatrixMultdEXT(int mode, double* m) {
            Pointers.glMatrixMultdEXT(mode, m);
        }
        
        public unsafe static void glMatrixMultdEXT(int mode, double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMatrixMultdEXT(mode, m_);
        }
        
        public unsafe static void glMatrixMultfEXT(int mode, float* m) {
            Pointers.glMatrixMultfEXT(mode, m);
        }
        
        public unsafe static void glMatrixMultfEXT(int mode, float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMatrixMultfEXT(mode, m_);
        }
        
        public unsafe static void glMatrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar) {
            Pointers.glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
        }
        
        public unsafe static void glMatrixPopEXT(int mode) {
            Pointers.glMatrixPopEXT(mode);
        }
        
        public unsafe static void glMatrixPushEXT(int mode) {
            Pointers.glMatrixPushEXT(mode);
        }
        
        public unsafe static void glMatrixRotatedEXT(int mode, double angle, double x, double y, double z) {
            Pointers.glMatrixRotatedEXT(mode, angle, x, y, z);
        }
        
        public unsafe static void glMatrixRotatefEXT(int mode, float angle, float x, float y, float z) {
            Pointers.glMatrixRotatefEXT(mode, angle, x, y, z);
        }
        
        public unsafe static void glMatrixScaledEXT(int mode, double x, double y, double z) {
            Pointers.glMatrixScaledEXT(mode, x, y, z);
        }
        
        public unsafe static void glMatrixScalefEXT(int mode, float x, float y, float z) {
            Pointers.glMatrixScalefEXT(mode, x, y, z);
        }
        
        public unsafe static void glMatrixTranslatedEXT(int mode, double x, double y, double z) {
            Pointers.glMatrixTranslatedEXT(mode, x, y, z);
        }
        
        public unsafe static void glMatrixTranslatefEXT(int mode, float x, float y, float z) {
            Pointers.glMatrixTranslatefEXT(mode, x, y, z);
        }
        
        public unsafe static void glMaxShaderCompilerThreadsKHR(uint count) {
            Pointers.glMaxShaderCompilerThreadsKHR(count);
        }
        
        public unsafe static void glMaxShaderCompilerThreadsARB(uint count) {
            Pointers.glMaxShaderCompilerThreadsARB(count);
        }
        
        public unsafe static void glMemoryBarrier(uint barriers) {
            Pointers.glMemoryBarrier(barriers);
        }
        
        public unsafe static void glMemoryBarrier(Enums.MemoryBarrierMask barriers) {
            Pointers.glMemoryBarrier((uint)barriers);
        }
        
        public unsafe static void glMemoryBarrierByRegion(uint barriers) {
            Pointers.glMemoryBarrierByRegion(barriers);
        }
        
        public unsafe static void glMemoryBarrierByRegion(Enums.MemoryBarrierMask barriers) {
            Pointers.glMemoryBarrierByRegion((uint)barriers);
        }
        
        public unsafe static void glMemoryBarrierEXT(uint barriers) {
            Pointers.glMemoryBarrierEXT(barriers);
        }
        
        public unsafe static void glMemoryBarrierEXT(Enums.MemoryBarrierMask barriers) {
            Pointers.glMemoryBarrierEXT((uint)barriers);
        }
        
        public unsafe static void glMemoryObjectParameterivEXT(uint memoryObject, int pname, int* _params) {
            Pointers.glMemoryObjectParameterivEXT(memoryObject, pname, _params);
        }
        
        public unsafe static void glMemoryObjectParameterivEXT(uint memoryObject, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMemoryObjectParameterivEXT(memoryObject, pname, _params_);
        }
        
        public unsafe static void glMinSampleShading(float value) {
            Pointers.glMinSampleShading(value);
        }
        
        public unsafe static void glMinSampleShadingARB(float value) {
            Pointers.glMinSampleShadingARB(value);
        }
        
        public unsafe static void glMinSampleShadingOES(float value) {
            Pointers.glMinSampleShadingOES(value);
        }
        
        public unsafe static void glMinmax(int target, int internalformat, bool sink) {
            Pointers.glMinmax(target, internalformat, sink);
        }
        
        public unsafe static void glMinmaxEXT(int target, int internalformat, bool sink) {
            Pointers.glMinmaxEXT(target, internalformat, sink);
        }
        
        public unsafe static void glMultMatrixd(double* m) {
            Pointers.glMultMatrixd(m);
        }
        
        public unsafe static void glMultMatrixd(double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMultMatrixd(m_);
        }
        
        public unsafe static void glMultMatrixf(float* m) {
            Pointers.glMultMatrixf(m);
        }
        
        public unsafe static void glMultMatrixf(float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMultMatrixf(m_);
        }
        
        public unsafe static void glMultMatrixx(IntPtr* m) {
            Pointers.glMultMatrixx(m);
        }
        
        public unsafe static void glMultMatrixx(IntPtr[] m) {
            fixed(IntPtr* m_ = &m[0])
                Pointers.glMultMatrixx(m_);
        }
        
        public unsafe static void glMultMatrixxOES(IntPtr* m) {
            Pointers.glMultMatrixxOES(m);
        }
        
        public unsafe static void glMultMatrixxOES(IntPtr[] m) {
            fixed(IntPtr* m_ = &m[0])
                Pointers.glMultMatrixxOES(m_);
        }
        
        public unsafe static void glMultTransposeMatrixd(double* m) {
            Pointers.glMultTransposeMatrixd(m);
        }
        
        public unsafe static void glMultTransposeMatrixd(double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMultTransposeMatrixd(m_);
        }
        
        public unsafe static void glMultTransposeMatrixdARB(double* m) {
            Pointers.glMultTransposeMatrixdARB(m);
        }
        
        public unsafe static void glMultTransposeMatrixdARB(double[] m) {
            fixed(double* m_ = &m[0])
                Pointers.glMultTransposeMatrixdARB(m_);
        }
        
        public unsafe static void glMultTransposeMatrixf(float* m) {
            Pointers.glMultTransposeMatrixf(m);
        }
        
        public unsafe static void glMultTransposeMatrixf(float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMultTransposeMatrixf(m_);
        }
        
        public unsafe static void glMultTransposeMatrixfARB(float* m) {
            Pointers.glMultTransposeMatrixfARB(m);
        }
        
        public unsafe static void glMultTransposeMatrixfARB(float[] m) {
            fixed(float* m_ = &m[0])
                Pointers.glMultTransposeMatrixfARB(m_);
        }
        
        public unsafe static void glMultTransposeMatrixxOES(IntPtr* m) {
            Pointers.glMultTransposeMatrixxOES(m);
        }
        
        public unsafe static void glMultTransposeMatrixxOES(IntPtr[] m) {
            fixed(IntPtr* m_ = &m[0])
                Pointers.glMultTransposeMatrixxOES(m_);
        }
        
        public unsafe static void glMultiDrawArrays(int mode, int* first, int* count, int drawcount) {
            Pointers.glMultiDrawArrays(mode, first, count, drawcount);
        }
        
        public unsafe static void glMultiDrawArrays(int mode, int* first, int[] count, int drawcount) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawArrays(mode, first, count_, drawcount);
        }
        
        public unsafe static void glMultiDrawArrays(int mode, int[] first, int* count, int drawcount) {
            fixed(int* first_ = &first[0])
                Pointers.glMultiDrawArrays(mode, first_, count, drawcount);
        }
        
        public unsafe static void glMultiDrawArrays(int mode, int[] first, int[] count, int drawcount) {
            fixed(int* first_ = &first[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawArrays(mode, first_, count_, drawcount);
        }
        
        public unsafe static void glMultiDrawArraysEXT(int mode, int* first, int* count, int primcount) {
            Pointers.glMultiDrawArraysEXT(mode, first, count, primcount);
        }
        
        public unsafe static void glMultiDrawArraysEXT(int mode, int* first, int[] count, int primcount) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawArraysEXT(mode, first, count_, primcount);
        }
        
        public unsafe static void glMultiDrawArraysEXT(int mode, int[] first, int* count, int primcount) {
            fixed(int* first_ = &first[0])
                Pointers.glMultiDrawArraysEXT(mode, first_, count, primcount);
        }
        
        public unsafe static void glMultiDrawArraysEXT(int mode, int[] first, int[] count, int primcount) {
            fixed(int* first_ = &first[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawArraysEXT(mode, first_, count_, primcount);
        }
        
        public unsafe static void glMultiDrawArraysIndirect(int mode, IntPtr indirect, int drawcount, int stride) {
            Pointers.glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
        }
        
        public unsafe static void glMultiDrawArraysIndirectAMD(int mode, IntPtr indirect, int primcount, int stride) {
            Pointers.glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
        }
        
        public unsafe static void glMultiDrawArraysIndirectBindlessCountNV(int mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) {
            Pointers.glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        public unsafe static void glMultiDrawArraysIndirectBindlessNV(int mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount) {
            Pointers.glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
        }
        
        public unsafe static void glMultiDrawArraysIndirectCount(int mode, IntPtr indirect, uint drawcount, int maxdrawcount, int stride) {
            Pointers.glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
        }
        
        public unsafe static void glMultiDrawArraysIndirectCountARB(int mode, IntPtr indirect, uint drawcount, int maxdrawcount, int stride) {
            Pointers.glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
        }
        
        public unsafe static void glMultiDrawArraysIndirectEXT(int mode, IntPtr indirect, int drawcount, int stride) {
            Pointers.glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride);
        }
        
        public unsafe static void glMultiDrawElementArrayAPPLE(int mode, int* first, int* count, int primcount) {
            Pointers.glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
        }
        
        public unsafe static void glMultiDrawElementArrayAPPLE(int mode, int* first, int[] count, int primcount) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawElementArrayAPPLE(mode, first, count_, primcount);
        }
        
        public unsafe static void glMultiDrawElementArrayAPPLE(int mode, int[] first, int* count, int primcount) {
            fixed(int* first_ = &first[0])
                Pointers.glMultiDrawElementArrayAPPLE(mode, first_, count, primcount);
        }
        
        public unsafe static void glMultiDrawElementArrayAPPLE(int mode, int[] first, int[] count, int primcount) {
            fixed(int* first_ = &first[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawElementArrayAPPLE(mode, first_, count_, primcount);
        }
        
        public unsafe static void glMultiDrawElements(int mode, int* count, int type, IntPtr* indices, int drawcount) {
            Pointers.glMultiDrawElements(mode, count, type, indices, drawcount);
        }
        
        public unsafe static void glMultiDrawElements(int mode, int* count, int type, IntPtr[] indices, int drawcount) {
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElements(mode, count, type, indices_, drawcount);
        }
        
        public unsafe static void glMultiDrawElements(int mode, int[] count, int type, IntPtr* indices, int drawcount) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawElements(mode, count_, type, indices, drawcount);
        }
        
        public unsafe static void glMultiDrawElements(int mode, int[] count, int type, IntPtr[] indices, int drawcount) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElements(mode, count_, type, indices_, drawcount);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int* count, int type, IntPtr* indices, int drawcount, int* basevertex) {
            Pointers.glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int* count, int type, IntPtr* indices, int drawcount, int[] basevertex) {
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int* count, int type, IntPtr[] indices, int drawcount, int* basevertex) {
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count, type, indices_, drawcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int* count, int type, IntPtr[] indices, int drawcount, int[] basevertex) {
            fixed(IntPtr* indices_ = &indices[0])
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count, type, indices_, drawcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int[] count, int type, IntPtr* indices, int drawcount, int* basevertex) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count_, type, indices, drawcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int[] count, int type, IntPtr* indices, int drawcount, int[] basevertex) {
            fixed(int* count_ = &count[0])
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count_, type, indices, drawcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int[] count, int type, IntPtr[] indices, int drawcount, int* basevertex) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count_, type, indices_, drawcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertex(int mode, int[] count, int type, IntPtr[] indices, int drawcount, int[] basevertex) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertex(mode, count_, type, indices_, drawcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int* count, int type, IntPtr* indices, int primcount, int* basevertex) {
            Pointers.glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int* count, int type, IntPtr* indices, int primcount, int[] basevertex) {
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int* count, int type, IntPtr[] indices, int primcount, int* basevertex) {
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count, type, indices_, primcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int* count, int type, IntPtr[] indices, int primcount, int[] basevertex) {
            fixed(IntPtr* indices_ = &indices[0])
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count, type, indices_, primcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int[] count, int type, IntPtr* indices, int primcount, int* basevertex) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count_, type, indices, primcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int[] count, int type, IntPtr* indices, int primcount, int[] basevertex) {
            fixed(int* count_ = &count[0])
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count_, type, indices, primcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int[] count, int type, IntPtr[] indices, int primcount, int* basevertex) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count_, type, indices_, primcount, basevertex);
        }
        
        public unsafe static void glMultiDrawElementsBaseVertexEXT(int mode, int[] count, int type, IntPtr[] indices, int primcount, int[] basevertex) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
            fixed(int* basevertex_ = &basevertex[0])
                Pointers.glMultiDrawElementsBaseVertexEXT(mode, count_, type, indices_, primcount, basevertex_);
        }
        
        public unsafe static void glMultiDrawElementsEXT(int mode, int* count, int type, IntPtr* indices, int primcount) {
            Pointers.glMultiDrawElementsEXT(mode, count, type, indices, primcount);
        }
        
        public unsafe static void glMultiDrawElementsEXT(int mode, int* count, int type, IntPtr[] indices, int primcount) {
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElementsEXT(mode, count, type, indices_, primcount);
        }
        
        public unsafe static void glMultiDrawElementsEXT(int mode, int[] count, int type, IntPtr* indices, int primcount) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawElementsEXT(mode, count_, type, indices, primcount);
        }
        
        public unsafe static void glMultiDrawElementsEXT(int mode, int[] count, int type, IntPtr[] indices, int primcount) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiDrawElementsEXT(mode, count_, type, indices_, primcount);
        }
        
        public unsafe static void glMultiDrawElementsIndirect(int mode, int type, IntPtr indirect, int drawcount, int stride) {
            Pointers.glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
        }
        
        public unsafe static void glMultiDrawElementsIndirectAMD(int mode, int type, IntPtr indirect, int primcount, int stride) {
            Pointers.glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
        }
        
        public unsafe static void glMultiDrawElementsIndirectBindlessCountNV(int mode, int type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) {
            Pointers.glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        public unsafe static void glMultiDrawElementsIndirectBindlessNV(int mode, int type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount) {
            Pointers.glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
        }
        
        public unsafe static void glMultiDrawElementsIndirectCount(int mode, int type, IntPtr indirect, uint drawcount, int maxdrawcount, int stride) {
            Pointers.glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
        }
        
        public unsafe static void glMultiDrawElementsIndirectCountARB(int mode, int type, IntPtr indirect, uint drawcount, int maxdrawcount, int stride) {
            Pointers.glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
        }
        
        public unsafe static void glMultiDrawElementsIndirectEXT(int mode, int type, IntPtr indirect, int drawcount, int stride) {
            Pointers.glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride);
        }
        
        public unsafe static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int* first, int* count, int primcount) {
            Pointers.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
        }
        
        public unsafe static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int* first, int[] count, int primcount) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count_, primcount);
        }
        
        public unsafe static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int[] first, int* count, int primcount) {
            fixed(int* first_ = &first[0])
                Pointers.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_, count, primcount);
        }
        
        public unsafe static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int[] first, int[] count, int primcount) {
            fixed(int* first_ = &first[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_, count_, primcount);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint* mode, int* first, int* count, int primcount, int modestride) {
            Pointers.glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint* mode, int* first, int[] count, int primcount, int modestride) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiModeDrawArraysIBM(mode, first, count_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint* mode, int[] first, int* count, int primcount, int modestride) {
            fixed(int* first_ = &first[0])
                Pointers.glMultiModeDrawArraysIBM(mode, first_, count, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint* mode, int[] first, int[] count, int primcount, int modestride) {
            fixed(int* first_ = &first[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiModeDrawArraysIBM(mode, first_, count_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint[] mode, int* first, int* count, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
                Pointers.glMultiModeDrawArraysIBM(mode_, first, count, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint[] mode, int* first, int[] count, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiModeDrawArraysIBM(mode_, first, count_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint[] mode, int[] first, int* count, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
            fixed(int* first_ = &first[0])
                Pointers.glMultiModeDrawArraysIBM(mode_, first_, count, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawArraysIBM(uint[] mode, int[] first, int[] count, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
            fixed(int* first_ = &first[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiModeDrawArraysIBM(mode_, first_, count_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint* mode, int* count, int type, IntPtr* indices, int primcount, int modestride) {
            Pointers.glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint* mode, int* count, int type, IntPtr[] indices, int primcount, int modestride) {
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiModeDrawElementsIBM(mode, count, type, indices_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint* mode, int[] count, int type, IntPtr* indices, int primcount, int modestride) {
            fixed(int* count_ = &count[0])
                Pointers.glMultiModeDrawElementsIBM(mode, count_, type, indices, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint* mode, int[] count, int type, IntPtr[] indices, int primcount, int modestride) {
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiModeDrawElementsIBM(mode, count_, type, indices_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint[] mode, int* count, int type, IntPtr* indices, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
                Pointers.glMultiModeDrawElementsIBM(mode_, count, type, indices, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint[] mode, int* count, int type, IntPtr[] indices, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiModeDrawElementsIBM(mode_, count, type, indices_, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint[] mode, int[] count, int type, IntPtr* indices, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
            fixed(int* count_ = &count[0])
                Pointers.glMultiModeDrawElementsIBM(mode_, count_, type, indices, primcount, modestride);
        }
        
        public unsafe static void glMultiModeDrawElementsIBM(uint[] mode, int[] count, int type, IntPtr[] indices, int primcount, int modestride) {
            fixed(uint* mode_ = &mode[0])
            fixed(int* count_ = &count[0])
            fixed(IntPtr* indices_ = &indices[0])
                Pointers.glMultiModeDrawElementsIBM(mode_, count_, type, indices_, primcount, modestride);
        }
        
        public unsafe static void glMultiTexBufferEXT(int texunit, int target, int internalformat, uint buffer) {
            Pointers.glMultiTexBufferEXT(texunit, target, internalformat, buffer);
        }
        
        public unsafe static void glMultiTexCoord1bOES(int texture, sbyte s) {
            Pointers.glMultiTexCoord1bOES(texture, s);
        }
        
        public unsafe static void glMultiTexCoord1bvOES(int texture, sbyte* coords) {
            Pointers.glMultiTexCoord1bvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord1bvOES(int texture, out sbyte coords) {
            fixed(sbyte* coords_ = &coords)
                Pointers.glMultiTexCoord1bvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord1d(int target, double s) {
            Pointers.glMultiTexCoord1d(target, s);
        }
        
        public unsafe static void glMultiTexCoord1dARB(int target, double s) {
            Pointers.glMultiTexCoord1dARB(target, s);
        }
        
        public unsafe static void glMultiTexCoord1dv(int target, double* v) {
            Pointers.glMultiTexCoord1dv(target, v);
        }
        
        public unsafe static void glMultiTexCoord1dv(int target, out double v) {
            fixed(double* v_ = &v)
                Pointers.glMultiTexCoord1dv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1dvARB(int target, double* v) {
            Pointers.glMultiTexCoord1dvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord1dvARB(int target, out double v) {
            fixed(double* v_ = &v)
                Pointers.glMultiTexCoord1dvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1f(int target, float s) {
            Pointers.glMultiTexCoord1f(target, s);
        }
        
        public unsafe static void glMultiTexCoord1fARB(int target, float s) {
            Pointers.glMultiTexCoord1fARB(target, s);
        }
        
        public unsafe static void glMultiTexCoord1fv(int target, float* v) {
            Pointers.glMultiTexCoord1fv(target, v);
        }
        
        public unsafe static void glMultiTexCoord1fv(int target, out float v) {
            fixed(float* v_ = &v)
                Pointers.glMultiTexCoord1fv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1fvARB(int target, float* v) {
            Pointers.glMultiTexCoord1fvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord1fvARB(int target, out float v) {
            fixed(float* v_ = &v)
                Pointers.glMultiTexCoord1fvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1hNV(int target, short s) {
            Pointers.glMultiTexCoord1hNV(target, s);
        }
        
        public unsafe static void glMultiTexCoord1hvNV(int target, short* v) {
            Pointers.glMultiTexCoord1hvNV(target, v);
        }
        
        public unsafe static void glMultiTexCoord1hvNV(int target, out short v) {
            fixed(short* v_ = &v)
                Pointers.glMultiTexCoord1hvNV(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1i(int target, int s) {
            Pointers.glMultiTexCoord1i(target, s);
        }
        
        public unsafe static void glMultiTexCoord1iARB(int target, int s) {
            Pointers.glMultiTexCoord1iARB(target, s);
        }
        
        public unsafe static void glMultiTexCoord1iv(int target, int* v) {
            Pointers.glMultiTexCoord1iv(target, v);
        }
        
        public unsafe static void glMultiTexCoord1iv(int target, out int v) {
            fixed(int* v_ = &v)
                Pointers.glMultiTexCoord1iv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1ivARB(int target, int* v) {
            Pointers.glMultiTexCoord1ivARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord1ivARB(int target, out int v) {
            fixed(int* v_ = &v)
                Pointers.glMultiTexCoord1ivARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1s(int target, short s) {
            Pointers.glMultiTexCoord1s(target, s);
        }
        
        public unsafe static void glMultiTexCoord1sARB(int target, short s) {
            Pointers.glMultiTexCoord1sARB(target, s);
        }
        
        public unsafe static void glMultiTexCoord1sv(int target, short* v) {
            Pointers.glMultiTexCoord1sv(target, v);
        }
        
        public unsafe static void glMultiTexCoord1sv(int target, out short v) {
            fixed(short* v_ = &v)
                Pointers.glMultiTexCoord1sv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1svARB(int target, short* v) {
            Pointers.glMultiTexCoord1svARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord1svARB(int target, out short v) {
            fixed(short* v_ = &v)
                Pointers.glMultiTexCoord1svARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord1xOES(int texture, IntPtr s) {
            Pointers.glMultiTexCoord1xOES(texture, s);
        }
        
        public unsafe static void glMultiTexCoord1xvOES(int texture, IntPtr* coords) {
            Pointers.glMultiTexCoord1xvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord1xvOES(int texture, out IntPtr coords) {
            fixed(IntPtr* coords_ = &coords)
                Pointers.glMultiTexCoord1xvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord2bOES(int texture, sbyte s, sbyte t) {
            Pointers.glMultiTexCoord2bOES(texture, s, t);
        }
        
        public unsafe static void glMultiTexCoord2bvOES(int texture, sbyte* coords) {
            Pointers.glMultiTexCoord2bvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord2bvOES(int texture, sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glMultiTexCoord2bvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord2d(int target, double s, double t) {
            Pointers.glMultiTexCoord2d(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2dARB(int target, double s, double t) {
            Pointers.glMultiTexCoord2dARB(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2dv(int target, double* v) {
            Pointers.glMultiTexCoord2dv(target, v);
        }
        
        public unsafe static void glMultiTexCoord2dv(int target, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glMultiTexCoord2dv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2dvARB(int target, double* v) {
            Pointers.glMultiTexCoord2dvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord2dvARB(int target, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glMultiTexCoord2dvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2f(int target, float s, float t) {
            Pointers.glMultiTexCoord2f(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2fARB(int target, float s, float t) {
            Pointers.glMultiTexCoord2fARB(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2fv(int target, float* v) {
            Pointers.glMultiTexCoord2fv(target, v);
        }
        
        public unsafe static void glMultiTexCoord2fv(int target, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMultiTexCoord2fv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2fvARB(int target, float* v) {
            Pointers.glMultiTexCoord2fvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord2fvARB(int target, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMultiTexCoord2fvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2hNV(int target, short s, short t) {
            Pointers.glMultiTexCoord2hNV(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2hvNV(int target, short* v) {
            Pointers.glMultiTexCoord2hvNV(target, v);
        }
        
        public unsafe static void glMultiTexCoord2hvNV(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord2hvNV(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2i(int target, int s, int t) {
            Pointers.glMultiTexCoord2i(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2iARB(int target, int s, int t) {
            Pointers.glMultiTexCoord2iARB(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2iv(int target, int* v) {
            Pointers.glMultiTexCoord2iv(target, v);
        }
        
        public unsafe static void glMultiTexCoord2iv(int target, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glMultiTexCoord2iv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2ivARB(int target, int* v) {
            Pointers.glMultiTexCoord2ivARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord2ivARB(int target, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glMultiTexCoord2ivARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2s(int target, short s, short t) {
            Pointers.glMultiTexCoord2s(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2sARB(int target, short s, short t) {
            Pointers.glMultiTexCoord2sARB(target, s, t);
        }
        
        public unsafe static void glMultiTexCoord2sv(int target, short* v) {
            Pointers.glMultiTexCoord2sv(target, v);
        }
        
        public unsafe static void glMultiTexCoord2sv(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord2sv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2svARB(int target, short* v) {
            Pointers.glMultiTexCoord2svARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord2svARB(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord2svARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord2xOES(int texture, IntPtr s, IntPtr t) {
            Pointers.glMultiTexCoord2xOES(texture, s, t);
        }
        
        public unsafe static void glMultiTexCoord2xvOES(int texture, IntPtr* coords) {
            Pointers.glMultiTexCoord2xvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord2xvOES(int texture, IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glMultiTexCoord2xvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord3bOES(int texture, sbyte s, sbyte t, sbyte r) {
            Pointers.glMultiTexCoord3bOES(texture, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3bvOES(int texture, sbyte* coords) {
            Pointers.glMultiTexCoord3bvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord3bvOES(int texture, sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glMultiTexCoord3bvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord3d(int target, double s, double t, double r) {
            Pointers.glMultiTexCoord3d(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3dARB(int target, double s, double t, double r) {
            Pointers.glMultiTexCoord3dARB(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3dv(int target, double* v) {
            Pointers.glMultiTexCoord3dv(target, v);
        }
        
        public unsafe static void glMultiTexCoord3dv(int target, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glMultiTexCoord3dv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3dvARB(int target, double* v) {
            Pointers.glMultiTexCoord3dvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord3dvARB(int target, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glMultiTexCoord3dvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3f(int target, float s, float t, float r) {
            Pointers.glMultiTexCoord3f(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3fARB(int target, float s, float t, float r) {
            Pointers.glMultiTexCoord3fARB(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3fv(int target, float* v) {
            Pointers.glMultiTexCoord3fv(target, v);
        }
        
        public unsafe static void glMultiTexCoord3fv(int target, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMultiTexCoord3fv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3fvARB(int target, float* v) {
            Pointers.glMultiTexCoord3fvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord3fvARB(int target, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMultiTexCoord3fvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3hNV(int target, short s, short t, short r) {
            Pointers.glMultiTexCoord3hNV(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3hvNV(int target, short* v) {
            Pointers.glMultiTexCoord3hvNV(target, v);
        }
        
        public unsafe static void glMultiTexCoord3hvNV(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord3hvNV(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3i(int target, int s, int t, int r) {
            Pointers.glMultiTexCoord3i(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3iARB(int target, int s, int t, int r) {
            Pointers.glMultiTexCoord3iARB(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3iv(int target, int* v) {
            Pointers.glMultiTexCoord3iv(target, v);
        }
        
        public unsafe static void glMultiTexCoord3iv(int target, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glMultiTexCoord3iv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3ivARB(int target, int* v) {
            Pointers.glMultiTexCoord3ivARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord3ivARB(int target, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glMultiTexCoord3ivARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3s(int target, short s, short t, short r) {
            Pointers.glMultiTexCoord3s(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3sARB(int target, short s, short t, short r) {
            Pointers.glMultiTexCoord3sARB(target, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3sv(int target, short* v) {
            Pointers.glMultiTexCoord3sv(target, v);
        }
        
        public unsafe static void glMultiTexCoord3sv(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord3sv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3svARB(int target, short* v) {
            Pointers.glMultiTexCoord3svARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord3svARB(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord3svARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord3xOES(int texture, IntPtr s, IntPtr t, IntPtr r) {
            Pointers.glMultiTexCoord3xOES(texture, s, t, r);
        }
        
        public unsafe static void glMultiTexCoord3xvOES(int texture, IntPtr* coords) {
            Pointers.glMultiTexCoord3xvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord3xvOES(int texture, IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glMultiTexCoord3xvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord4bOES(int texture, sbyte s, sbyte t, sbyte r, sbyte q) {
            Pointers.glMultiTexCoord4bOES(texture, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4bvOES(int texture, sbyte* coords) {
            Pointers.glMultiTexCoord4bvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord4bvOES(int texture, sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glMultiTexCoord4bvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoord4d(int target, double s, double t, double r, double q) {
            Pointers.glMultiTexCoord4d(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4dARB(int target, double s, double t, double r, double q) {
            Pointers.glMultiTexCoord4dARB(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4dv(int target, double* v) {
            Pointers.glMultiTexCoord4dv(target, v);
        }
        
        public unsafe static void glMultiTexCoord4dv(int target, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glMultiTexCoord4dv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4dvARB(int target, double* v) {
            Pointers.glMultiTexCoord4dvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord4dvARB(int target, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glMultiTexCoord4dvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4f(int target, float s, float t, float r, float q) {
            Pointers.glMultiTexCoord4f(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4fARB(int target, float s, float t, float r, float q) {
            Pointers.glMultiTexCoord4fARB(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4fv(int target, float* v) {
            Pointers.glMultiTexCoord4fv(target, v);
        }
        
        public unsafe static void glMultiTexCoord4fv(int target, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMultiTexCoord4fv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4fvARB(int target, float* v) {
            Pointers.glMultiTexCoord4fvARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord4fvARB(int target, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMultiTexCoord4fvARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4hNV(int target, short s, short t, short r, short q) {
            Pointers.glMultiTexCoord4hNV(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4hvNV(int target, short* v) {
            Pointers.glMultiTexCoord4hvNV(target, v);
        }
        
        public unsafe static void glMultiTexCoord4hvNV(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord4hvNV(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4i(int target, int s, int t, int r, int q) {
            Pointers.glMultiTexCoord4i(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4iARB(int target, int s, int t, int r, int q) {
            Pointers.glMultiTexCoord4iARB(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4iv(int target, int* v) {
            Pointers.glMultiTexCoord4iv(target, v);
        }
        
        public unsafe static void glMultiTexCoord4iv(int target, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glMultiTexCoord4iv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4ivARB(int target, int* v) {
            Pointers.glMultiTexCoord4ivARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord4ivARB(int target, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glMultiTexCoord4ivARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4s(int target, short s, short t, short r, short q) {
            Pointers.glMultiTexCoord4s(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4sARB(int target, short s, short t, short r, short q) {
            Pointers.glMultiTexCoord4sARB(target, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4sv(int target, short* v) {
            Pointers.glMultiTexCoord4sv(target, v);
        }
        
        public unsafe static void glMultiTexCoord4sv(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord4sv(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4svARB(int target, short* v) {
            Pointers.glMultiTexCoord4svARB(target, v);
        }
        
        public unsafe static void glMultiTexCoord4svARB(int target, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glMultiTexCoord4svARB(target, v_);
        }
        
        public unsafe static void glMultiTexCoord4x(int texture, IntPtr s, IntPtr t, IntPtr r, IntPtr q) {
            Pointers.glMultiTexCoord4x(texture, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4xOES(int texture, IntPtr s, IntPtr t, IntPtr r, IntPtr q) {
            Pointers.glMultiTexCoord4xOES(texture, s, t, r, q);
        }
        
        public unsafe static void glMultiTexCoord4xvOES(int texture, IntPtr* coords) {
            Pointers.glMultiTexCoord4xvOES(texture, coords);
        }
        
        public unsafe static void glMultiTexCoord4xvOES(int texture, IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glMultiTexCoord4xvOES(texture, coords_);
        }
        
        public unsafe static void glMultiTexCoordP1ui(int texture, int type, uint coords) {
            Pointers.glMultiTexCoordP1ui(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP1uiv(int texture, int type, uint* coords) {
            Pointers.glMultiTexCoordP1uiv(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP1uiv(int texture, int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glMultiTexCoordP1uiv(texture, type, coords_);
        }
        
        public unsafe static void glMultiTexCoordP2ui(int texture, int type, uint coords) {
            Pointers.glMultiTexCoordP2ui(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP2uiv(int texture, int type, uint* coords) {
            Pointers.glMultiTexCoordP2uiv(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP2uiv(int texture, int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glMultiTexCoordP2uiv(texture, type, coords_);
        }
        
        public unsafe static void glMultiTexCoordP3ui(int texture, int type, uint coords) {
            Pointers.glMultiTexCoordP3ui(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP3uiv(int texture, int type, uint* coords) {
            Pointers.glMultiTexCoordP3uiv(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP3uiv(int texture, int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glMultiTexCoordP3uiv(texture, type, coords_);
        }
        
        public unsafe static void glMultiTexCoordP4ui(int texture, int type, uint coords) {
            Pointers.glMultiTexCoordP4ui(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP4uiv(int texture, int type, uint* coords) {
            Pointers.glMultiTexCoordP4uiv(texture, type, coords);
        }
        
        public unsafe static void glMultiTexCoordP4uiv(int texture, int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glMultiTexCoordP4uiv(texture, type, coords_);
        }
        
        public unsafe static void glMultiTexCoordPointerEXT(int texunit, int size, int type, int stride, IntPtr pointer) {
            Pointers.glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
        }
        
        public unsafe static void glMultiTexEnvfEXT(int texunit, int target, int pname, float param) {
            Pointers.glMultiTexEnvfEXT(texunit, target, pname, param);
        }
        
        public unsafe static void glMultiTexEnvfvEXT(int texunit, int target, int pname, float* _params) {
            Pointers.glMultiTexEnvfvEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glMultiTexEnvfvEXT(int texunit, int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glMultiTexEnvfvEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glMultiTexEnviEXT(int texunit, int target, int pname, int param) {
            Pointers.glMultiTexEnviEXT(texunit, target, pname, param);
        }
        
        public unsafe static void glMultiTexEnvivEXT(int texunit, int target, int pname, int* _params) {
            Pointers.glMultiTexEnvivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glMultiTexEnvivEXT(int texunit, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMultiTexEnvivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glMultiTexGendEXT(int texunit, int coord, int pname, double param) {
            Pointers.glMultiTexGendEXT(texunit, coord, pname, param);
        }
        
        public unsafe static void glMultiTexGendvEXT(int texunit, int coord, int pname, double* _params) {
            Pointers.glMultiTexGendvEXT(texunit, coord, pname, _params);
        }
        
        public unsafe static void glMultiTexGendvEXT(int texunit, int coord, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glMultiTexGendvEXT(texunit, coord, pname, _params_);
        }
        
        public unsafe static void glMultiTexGenfEXT(int texunit, int coord, int pname, float param) {
            Pointers.glMultiTexGenfEXT(texunit, coord, pname, param);
        }
        
        public unsafe static void glMultiTexGenfvEXT(int texunit, int coord, int pname, float* _params) {
            Pointers.glMultiTexGenfvEXT(texunit, coord, pname, _params);
        }
        
        public unsafe static void glMultiTexGenfvEXT(int texunit, int coord, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glMultiTexGenfvEXT(texunit, coord, pname, _params_);
        }
        
        public unsafe static void glMultiTexGeniEXT(int texunit, int coord, int pname, int param) {
            Pointers.glMultiTexGeniEXT(texunit, coord, pname, param);
        }
        
        public unsafe static void glMultiTexGenivEXT(int texunit, int coord, int pname, int* _params) {
            Pointers.glMultiTexGenivEXT(texunit, coord, pname, _params);
        }
        
        public unsafe static void glMultiTexGenivEXT(int texunit, int coord, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMultiTexGenivEXT(texunit, coord, pname, _params_);
        }
        
        public unsafe static void glMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels) {
            Pointers.glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
        }
        
        public unsafe static void glMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels) {
            Pointers.glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        public unsafe static void glMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
            Pointers.glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        public unsafe static void glMultiTexParameterIivEXT(int texunit, int target, int pname, int* _params) {
            Pointers.glMultiTexParameterIivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glMultiTexParameterIivEXT(int texunit, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMultiTexParameterIivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* _params) {
            Pointers.glMultiTexParameterIuivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glMultiTexParameterIuivEXT(int texunit, int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glMultiTexParameterIuivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glMultiTexParameterfEXT(int texunit, int target, int pname, float param) {
            Pointers.glMultiTexParameterfEXT(texunit, target, pname, param);
        }
        
        public unsafe static void glMultiTexParameterfvEXT(int texunit, int target, int pname, float* _params) {
            Pointers.glMultiTexParameterfvEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glMultiTexParameterfvEXT(int texunit, int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glMultiTexParameterfvEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glMultiTexParameteriEXT(int texunit, int target, int pname, int param) {
            Pointers.glMultiTexParameteriEXT(texunit, target, pname, param);
        }
        
        public unsafe static void glMultiTexParameterivEXT(int texunit, int target, int pname, int* _params) {
            Pointers.glMultiTexParameterivEXT(texunit, target, pname, _params);
        }
        
        public unsafe static void glMultiTexParameterivEXT(int texunit, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMultiTexParameterivEXT(texunit, target, pname, _params_);
        }
        
        public unsafe static void glMultiTexRenderbufferEXT(int texunit, int target, uint renderbuffer) {
            Pointers.glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
        }
        
        public unsafe static void glMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels) {
            Pointers.glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
        }
        
        public unsafe static void glMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        public unsafe static void glMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
            Pointers.glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public unsafe static void glMulticastBarrierNV() {
            Pointers.glMulticastBarrierNV();
        }
        
        public unsafe static void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) {
            Pointers.glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public unsafe static void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, Enums.ClearBufferMask mask, int filter) {
            Pointers.glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
        }
        
        public unsafe static void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, uint offset, uint size, IntPtr data) {
            Pointers.glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
        }
        
        public unsafe static void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size) {
            Pointers.glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public unsafe static void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
            Pointers.glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public unsafe static void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float* v) {
            Pointers.glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);
        }
        
        public unsafe static void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v_);
        }
        
        public unsafe static void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, long* _params) {
            Pointers.glMulticastGetQueryObjecti64vNV(gpu, id, pname, _params);
        }
        
        public unsafe static void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, long[] _params) {
            fixed(long* _params_ = &_params[0])
                Pointers.glMulticastGetQueryObjecti64vNV(gpu, id, pname, _params_);
        }
        
        public unsafe static void glMulticastGetQueryObjectivNV(uint gpu, uint id, int pname, int* _params) {
            Pointers.glMulticastGetQueryObjectivNV(gpu, id, pname, _params);
        }
        
        public unsafe static void glMulticastGetQueryObjectivNV(uint gpu, uint id, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glMulticastGetQueryObjectivNV(gpu, id, pname, _params_);
        }
        
        public unsafe static void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, ulong* _params) {
            Pointers.glMulticastGetQueryObjectui64vNV(gpu, id, pname, _params);
        }
        
        public unsafe static void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glMulticastGetQueryObjectui64vNV(gpu, id, pname, _params_);
        }
        
        public unsafe static void glMulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, uint* _params) {
            Pointers.glMulticastGetQueryObjectuivNV(gpu, id, pname, _params);
        }
        
        public unsafe static void glMulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glMulticastGetQueryObjectuivNV(gpu, id, pname, _params_);
        }
        
        public unsafe static void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask) {
            Pointers.glMulticastWaitSyncNV(signalGpu, waitGpuMask);
        }
        
        public unsafe static void glNamedBufferData(uint buffer, uint size, IntPtr data, int usage) {
            Pointers.glNamedBufferData(buffer, size, data, usage);
        }
        
        public unsafe static void glNamedBufferDataEXT(uint buffer, uint size, IntPtr data, int usage) {
            Pointers.glNamedBufferDataEXT(buffer, size, data, usage);
        }
        
        public unsafe static void glNamedBufferPageCommitmentARB(uint buffer, uint offset, uint size, bool commit) {
            Pointers.glNamedBufferPageCommitmentARB(buffer, offset, size, commit);
        }
        
        public unsafe static void glNamedBufferPageCommitmentEXT(uint buffer, uint offset, uint size, bool commit) {
            Pointers.glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
        }
        
        public unsafe static void glNamedBufferStorage(uint buffer, uint size, IntPtr data, uint flags) {
            Pointers.glNamedBufferStorage(buffer, size, data, flags);
        }
        
        public unsafe static void glNamedBufferStorage(uint buffer, uint size, IntPtr data, Enums.MapBufferUsageMask flags) {
            Pointers.glNamedBufferStorage(buffer, size, data, (uint)flags);
        }
        
        public unsafe static void glNamedBufferStorageExternalEXT(uint buffer, uint offset, uint size, IntPtr clientBuffer, uint flags) {
            Pointers.glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
        }
        
        public unsafe static void glNamedBufferStorageExternalEXT(uint buffer, uint offset, uint size, IntPtr clientBuffer, Enums.MapBufferUsageMask flags) {
            Pointers.glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, (uint)flags);
        }
        
        public unsafe static void glNamedBufferStorageEXT(uint buffer, uint size, IntPtr data, uint flags) {
            Pointers.glNamedBufferStorageEXT(buffer, size, data, flags);
        }
        
        public unsafe static void glNamedBufferStorageEXT(uint buffer, uint size, IntPtr data, Enums.MapBufferUsageMask flags) {
            Pointers.glNamedBufferStorageEXT(buffer, size, data, (uint)flags);
        }
        
        public unsafe static void glNamedBufferStorageMemEXT(uint buffer, uint size, uint memory, ulong offset) {
            Pointers.glNamedBufferStorageMemEXT(buffer, size, memory, offset);
        }
        
        public unsafe static void glNamedBufferSubData(uint buffer, uint offset, uint size, IntPtr data) {
            Pointers.glNamedBufferSubData(buffer, offset, size, data);
        }
        
        public unsafe static void glNamedBufferSubDataEXT(uint buffer, uint offset, uint size, IntPtr data) {
            Pointers.glNamedBufferSubDataEXT(buffer, offset, size, data);
        }
        
        public unsafe static void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size) {
            Pointers.glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public unsafe static void glNamedFramebufferDrawBuffer(uint framebuffer, int buf) {
            Pointers.glNamedFramebufferDrawBuffer(framebuffer, buf);
        }
        
        public unsafe static void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs) {
            Pointers.glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
        }
        
        public unsafe static void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint[] bufs) {
            fixed(uint* bufs_ = &bufs[0])
                Pointers.glNamedFramebufferDrawBuffers(framebuffer, n, bufs_);
        }
        
        public unsafe static void glNamedFramebufferParameteri(uint framebuffer, int pname, int param) {
            Pointers.glNamedFramebufferParameteri(framebuffer, pname, param);
        }
        
        public unsafe static void glNamedFramebufferParameteriEXT(uint framebuffer, int pname, int param) {
            Pointers.glNamedFramebufferParameteriEXT(framebuffer, pname, param);
        }
        
        public unsafe static void glNamedFramebufferReadBuffer(uint framebuffer, int src) {
            Pointers.glNamedFramebufferReadBuffer(framebuffer, src);
        }
        
        public unsafe static void glNamedFramebufferRenderbuffer(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer) {
            Pointers.glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        public unsafe static void glNamedFramebufferRenderbufferEXT(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer) {
            Pointers.glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        public unsafe static void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v) {
            Pointers.glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
        }
        
        public unsafe static void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v_);
        }
        
        public unsafe static void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v) {
            Pointers.glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
        }
        
        public unsafe static void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v_);
        }
        
        public unsafe static void glNamedFramebufferTexture(uint framebuffer, int attachment, uint texture, int level) {
            Pointers.glNamedFramebufferTexture(framebuffer, attachment, texture, level);
        }
        
        public unsafe static void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values) {
            Pointers.glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);
        }
        
        public unsafe static void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values_);
        }
        
        public unsafe static void glNamedFramebufferTexture1DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level) {
            Pointers.glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
        }
        
        public unsafe static void glNamedFramebufferTexture2DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level) {
            Pointers.glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
        }
        
        public unsafe static void glNamedFramebufferTexture3DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level, int zoffset) {
            Pointers.glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
        }
        
        public unsafe static void glNamedFramebufferTextureEXT(uint framebuffer, int attachment, uint texture, int level) {
            Pointers.glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
        }
        
        public unsafe static void glNamedFramebufferTextureFaceEXT(uint framebuffer, int attachment, uint texture, int level, int face) {
            Pointers.glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
        }
        
        public unsafe static void glNamedFramebufferTextureLayer(uint framebuffer, int attachment, uint texture, int level, int layer) {
            Pointers.glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
        }
        
        public unsafe static void glNamedFramebufferTextureLayerEXT(uint framebuffer, int attachment, uint texture, int level, int layer) {
            Pointers.glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
        }
        
        public unsafe static void glNamedProgramLocalParameter4dEXT(uint program, int target, uint index, double x, double y, double z, double w) {
            Pointers.glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
        }
        
        public unsafe static void glNamedProgramLocalParameter4dvEXT(uint program, int target, uint index, double* _params) {
            Pointers.glNamedProgramLocalParameter4dvEXT(program, target, index, _params);
        }
        
        public unsafe static void glNamedProgramLocalParameter4dvEXT(uint program, int target, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParameter4dvEXT(program, target, index, _params_);
        }
        
        public unsafe static void glNamedProgramLocalParameter4fEXT(uint program, int target, uint index, float x, float y, float z, float w) {
            Pointers.glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
        }
        
        public unsafe static void glNamedProgramLocalParameter4fvEXT(uint program, int target, uint index, float* _params) {
            Pointers.glNamedProgramLocalParameter4fvEXT(program, target, index, _params);
        }
        
        public unsafe static void glNamedProgramLocalParameter4fvEXT(uint program, int target, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParameter4fvEXT(program, target, index, _params_);
        }
        
        public unsafe static void glNamedProgramLocalParameterI4iEXT(uint program, int target, uint index, int x, int y, int z, int w) {
            Pointers.glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
        }
        
        public unsafe static void glNamedProgramLocalParameterI4ivEXT(uint program, int target, uint index, int* _params) {
            Pointers.glNamedProgramLocalParameterI4ivEXT(program, target, index, _params);
        }
        
        public unsafe static void glNamedProgramLocalParameterI4ivEXT(uint program, int target, uint index, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParameterI4ivEXT(program, target, index, _params_);
        }
        
        public unsafe static void glNamedProgramLocalParameterI4uiEXT(uint program, int target, uint index, uint x, uint y, uint z, uint w) {
            Pointers.glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
        }
        
        public unsafe static void glNamedProgramLocalParameterI4uivEXT(uint program, int target, uint index, uint* _params) {
            Pointers.glNamedProgramLocalParameterI4uivEXT(program, target, index, _params);
        }
        
        public unsafe static void glNamedProgramLocalParameterI4uivEXT(uint program, int target, uint index, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParameterI4uivEXT(program, target, index, _params_);
        }
        
        public unsafe static void glNamedProgramLocalParameters4fvEXT(uint program, int target, uint index, int count, float* _params) {
            Pointers.glNamedProgramLocalParameters4fvEXT(program, target, index, count, _params);
        }
        
        public unsafe static void glNamedProgramLocalParameters4fvEXT(uint program, int target, uint index, int count, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParameters4fvEXT(program, target, index, count, _params_);
        }
        
        public unsafe static void glNamedProgramLocalParametersI4ivEXT(uint program, int target, uint index, int count, int* _params) {
            Pointers.glNamedProgramLocalParametersI4ivEXT(program, target, index, count, _params);
        }
        
        public unsafe static void glNamedProgramLocalParametersI4ivEXT(uint program, int target, uint index, int count, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParametersI4ivEXT(program, target, index, count, _params_);
        }
        
        public unsafe static void glNamedProgramLocalParametersI4uivEXT(uint program, int target, uint index, int count, uint* _params) {
            Pointers.glNamedProgramLocalParametersI4uivEXT(program, target, index, count, _params);
        }
        
        public unsafe static void glNamedProgramLocalParametersI4uivEXT(uint program, int target, uint index, int count, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glNamedProgramLocalParametersI4uivEXT(program, target, index, count, _params_);
        }
        
        public unsafe static void glNamedProgramStringEXT(uint program, int target, int format, int len, IntPtr _string) {
            Pointers.glNamedProgramStringEXT(program, target, format, len, _string);
        }
        
        public unsafe static void glNamedRenderbufferStorage(uint renderbuffer, int internalformat, int width, int height) {
            Pointers.glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
        }
        
        public unsafe static void glNamedRenderbufferStorageEXT(uint renderbuffer, int internalformat, int width, int height) {
            Pointers.glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
        }
        
        public unsafe static void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, int internalformat, int width, int height) {
            Pointers.glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
        }
        
        public unsafe static void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height) {
            Pointers.glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        public unsafe static void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, int internalformat, int width, int height) {
            Pointers.glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
        }
        
        public unsafe static void glNamedStringARB(int type, int namelen, string name, int stringlen, string _string) {
            Pointers.glNamedStringARB(type, namelen, name, stringlen, _string);
        }
        
        public unsafe static void glNewList(uint list, int mode) {
            Pointers.glNewList(list, mode);
        }
        
        public unsafe static uint glNewObjectBufferATI(int size, IntPtr pointer, int usage) {
            return Pointers.glNewObjectBufferATI(size, pointer, usage);
        }
        
        public unsafe static void glNormal3b(sbyte nx, sbyte ny, sbyte nz) {
            Pointers.glNormal3b(nx, ny, nz);
        }
        
        public unsafe static void glNormal3bv(sbyte* v) {
            Pointers.glNormal3bv(v);
        }
        
        public unsafe static void glNormal3bv(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glNormal3bv(v_);
        }
        
        public unsafe static void glNormal3d(double nx, double ny, double nz) {
            Pointers.glNormal3d(nx, ny, nz);
        }
        
        public unsafe static void glNormal3dv(double* v) {
            Pointers.glNormal3dv(v);
        }
        
        public unsafe static void glNormal3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glNormal3dv(v_);
        }
        
        public unsafe static void glNormal3f(float nx, float ny, float nz) {
            Pointers.glNormal3f(nx, ny, nz);
        }
        
        public unsafe static void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glNormal3fVertex3fvSUN(float* n, float* v) {
            Pointers.glNormal3fVertex3fvSUN(n, v);
        }
        
        public unsafe static void glNormal3fVertex3fvSUN(float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glNormal3fVertex3fvSUN(n, v_);
        }
        
        public unsafe static void glNormal3fVertex3fvSUN(float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glNormal3fVertex3fvSUN(n_, v);
        }
        
        public unsafe static void glNormal3fVertex3fvSUN(float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glNormal3fVertex3fvSUN(n_, v_);
        }
        
        public unsafe static void glNormal3fv(float* v) {
            Pointers.glNormal3fv(v);
        }
        
        public unsafe static void glNormal3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glNormal3fv(v_);
        }
        
        public unsafe static void glNormal3hNV(short nx, short ny, short nz) {
            Pointers.glNormal3hNV(nx, ny, nz);
        }
        
        public unsafe static void glNormal3hvNV(short* v) {
            Pointers.glNormal3hvNV(v);
        }
        
        public unsafe static void glNormal3hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glNormal3hvNV(v_);
        }
        
        public unsafe static void glNormal3i(int nx, int ny, int nz) {
            Pointers.glNormal3i(nx, ny, nz);
        }
        
        public unsafe static void glNormal3iv(int* v) {
            Pointers.glNormal3iv(v);
        }
        
        public unsafe static void glNormal3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glNormal3iv(v_);
        }
        
        public unsafe static void glNormal3s(short nx, short ny, short nz) {
            Pointers.glNormal3s(nx, ny, nz);
        }
        
        public unsafe static void glNormal3sv(short* v) {
            Pointers.glNormal3sv(v);
        }
        
        public unsafe static void glNormal3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glNormal3sv(v_);
        }
        
        public unsafe static void glNormal3x(IntPtr nx, IntPtr ny, IntPtr nz) {
            Pointers.glNormal3x(nx, ny, nz);
        }
        
        public unsafe static void glNormal3xOES(IntPtr nx, IntPtr ny, IntPtr nz) {
            Pointers.glNormal3xOES(nx, ny, nz);
        }
        
        public unsafe static void glNormal3xvOES(IntPtr* coords) {
            Pointers.glNormal3xvOES(coords);
        }
        
        public unsafe static void glNormal3xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glNormal3xvOES(coords_);
        }
        
        public unsafe static void glNormalFormatNV(int type, int stride) {
            Pointers.glNormalFormatNV(type, stride);
        }
        
        public unsafe static void glNormalP3ui(int type, uint coords) {
            Pointers.glNormalP3ui(type, coords);
        }
        
        public unsafe static void glNormalP3uiv(int type, uint* coords) {
            Pointers.glNormalP3uiv(type, coords);
        }
        
        public unsafe static void glNormalP3uiv(int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glNormalP3uiv(type, coords_);
        }
        
        public unsafe static void glNormalPointer(int type, int stride, IntPtr pointer) {
            Pointers.glNormalPointer(type, stride, pointer);
        }
        
        public unsafe static void glNormalPointerEXT(int type, int stride, int count, IntPtr pointer) {
            Pointers.glNormalPointerEXT(type, stride, count, pointer);
        }
        
        public unsafe static void glNormalPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glNormalPointerListIBM(type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glNormalPointerListIBM(int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glNormalPointerListIBM(type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glNormalPointervINTEL(int type, IntPtr* pointer) {
            Pointers.glNormalPointervINTEL(type, pointer);
        }
        
        public unsafe static void glNormalPointervINTEL(int type, IntPtr[] pointer) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glNormalPointervINTEL(type, pointer_);
        }
        
        public unsafe static void glNormalStream3bATI(int stream, sbyte nx, sbyte ny, sbyte nz) {
            Pointers.glNormalStream3bATI(stream, nx, ny, nz);
        }
        
        public unsafe static void glNormalStream3bvATI(int stream, sbyte* coords) {
            Pointers.glNormalStream3bvATI(stream, coords);
        }
        
        public unsafe static void glNormalStream3bvATI(int stream, sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glNormalStream3bvATI(stream, coords_);
        }
        
        public unsafe static void glNormalStream3dATI(int stream, double nx, double ny, double nz) {
            Pointers.glNormalStream3dATI(stream, nx, ny, nz);
        }
        
        public unsafe static void glNormalStream3dvATI(int stream, double* coords) {
            Pointers.glNormalStream3dvATI(stream, coords);
        }
        
        public unsafe static void glNormalStream3dvATI(int stream, double[] coords) {
            fixed(double* coords_ = &coords[0])
                Pointers.glNormalStream3dvATI(stream, coords_);
        }
        
        public unsafe static void glNormalStream3fATI(int stream, float nx, float ny, float nz) {
            Pointers.glNormalStream3fATI(stream, nx, ny, nz);
        }
        
        public unsafe static void glNormalStream3fvATI(int stream, float* coords) {
            Pointers.glNormalStream3fvATI(stream, coords);
        }
        
        public unsafe static void glNormalStream3fvATI(int stream, float[] coords) {
            fixed(float* coords_ = &coords[0])
                Pointers.glNormalStream3fvATI(stream, coords_);
        }
        
        public unsafe static void glNormalStream3iATI(int stream, int nx, int ny, int nz) {
            Pointers.glNormalStream3iATI(stream, nx, ny, nz);
        }
        
        public unsafe static void glNormalStream3ivATI(int stream, int* coords) {
            Pointers.glNormalStream3ivATI(stream, coords);
        }
        
        public unsafe static void glNormalStream3ivATI(int stream, int[] coords) {
            fixed(int* coords_ = &coords[0])
                Pointers.glNormalStream3ivATI(stream, coords_);
        }
        
        public unsafe static void glNormalStream3sATI(int stream, short nx, short ny, short nz) {
            Pointers.glNormalStream3sATI(stream, nx, ny, nz);
        }
        
        public unsafe static void glNormalStream3svATI(int stream, short* coords) {
            Pointers.glNormalStream3svATI(stream, coords);
        }
        
        public unsafe static void glNormalStream3svATI(int stream, short[] coords) {
            fixed(short* coords_ = &coords[0])
                Pointers.glNormalStream3svATI(stream, coords_);
        }
        
        public unsafe static void glObjectLabel(int identifier, uint name, int length, string label) {
            Pointers.glObjectLabel(identifier, name, length, label);
        }
        
        public unsafe static void glObjectLabelKHR(int identifier, uint name, int length, string label) {
            Pointers.glObjectLabelKHR(identifier, name, length, label);
        }
        
        public unsafe static void glObjectPtrLabel(IntPtr ptr, int length, string label) {
            Pointers.glObjectPtrLabel(ptr, length, label);
        }
        
        public unsafe static void glObjectPtrLabelKHR(IntPtr ptr, int length, string label) {
            Pointers.glObjectPtrLabelKHR(ptr, length, label);
        }
        
        public unsafe static int glObjectPurgeableAPPLE(int objectType, uint name, int option) {
            return Pointers.glObjectPurgeableAPPLE(objectType, name, option);
        }
        
        public unsafe static int glObjectUnpurgeableAPPLE(int objectType, uint name, int option) {
            return Pointers.glObjectUnpurgeableAPPLE(objectType, name, option);
        }
        
        public unsafe static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar) {
            Pointers.glOrtho(left, right, bottom, top, zNear, zFar);
        }
        
        public unsafe static void glOrthof(float l, float r, float b, float t, float n, float f) {
            Pointers.glOrthof(l, r, b, t, n, f);
        }
        
        public unsafe static void glOrthofOES(float l, float r, float b, float t, float n, float f) {
            Pointers.glOrthofOES(l, r, b, t, n, f);
        }
        
        public unsafe static void glOrthox(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f) {
            Pointers.glOrthox(l, r, b, t, n, f);
        }
        
        public unsafe static void glOrthoxOES(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f) {
            Pointers.glOrthoxOES(l, r, b, t, n, f);
        }
        
        public unsafe static void glPNTrianglesfATI(int pname, float param) {
            Pointers.glPNTrianglesfATI(pname, param);
        }
        
        public unsafe static void glPNTrianglesiATI(int pname, int param) {
            Pointers.glPNTrianglesiATI(pname, param);
        }
        
        public unsafe static void glPassTexCoordATI(uint dst, uint coord, int swizzle) {
            Pointers.glPassTexCoordATI(dst, coord, swizzle);
        }
        
        public unsafe static void glPassThrough(float token) {
            Pointers.glPassThrough(token);
        }
        
        public unsafe static void glPassThroughxOES(IntPtr token) {
            Pointers.glPassThroughxOES(token);
        }
        
        public unsafe static void glPatchParameterfv(int pname, float* values) {
            Pointers.glPatchParameterfv(pname, values);
        }
        
        public unsafe static void glPatchParameterfv(int pname, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glPatchParameterfv(pname, values_);
        }
        
        public unsafe static void glPatchParameteri(int pname, int value) {
            Pointers.glPatchParameteri(pname, value);
        }
        
        public unsafe static void glPatchParameteriEXT(int pname, int value) {
            Pointers.glPatchParameteriEXT(pname, value);
        }
        
        public unsafe static void glPatchParameteriOES(int pname, int value) {
            Pointers.glPatchParameteriOES(pname, value);
        }
        
        public unsafe static void glPathColorGenNV(int color, int genMode, int colorFormat, float* coeffs) {
            Pointers.glPathColorGenNV(color, genMode, colorFormat, coeffs);
        }
        
        public unsafe static void glPathColorGenNV(int color, int genMode, int colorFormat, float[] coeffs) {
            fixed(float* coeffs_ = &coeffs[0])
                Pointers.glPathColorGenNV(color, genMode, colorFormat, coeffs_);
        }
        
        public unsafe static void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords) {
            Pointers.glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
        }
        
        public unsafe static void glPathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, int coordType, IntPtr coords) {
            fixed(byte* commands_ = &commands[0])
                Pointers.glPathCommandsNV(path, numCommands, commands_, numCoords, coordType, coords);
        }
        
        public unsafe static void glPathCoordsNV(uint path, int numCoords, int coordType, IntPtr coords) {
            Pointers.glPathCoordsNV(path, numCoords, coordType, coords);
        }
        
        public unsafe static void glPathCoverDepthFuncNV(int func) {
            Pointers.glPathCoverDepthFuncNV(func);
        }
        
        public unsafe static void glPathDashArrayNV(uint path, int dashCount, float* dashArray) {
            Pointers.glPathDashArrayNV(path, dashCount, dashArray);
        }
        
        public unsafe static void glPathDashArrayNV(uint path, int dashCount, float[] dashArray) {
            fixed(float* dashArray_ = &dashArray[0])
                Pointers.glPathDashArrayNV(path, dashCount, dashArray_);
        }
        
        public unsafe static void glPathFogGenNV(int genMode) {
            Pointers.glPathFogGenNV(genMode);
        }
        
        public unsafe static int glPathGlyphIndexArrayNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) {
            return Pointers.glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        public unsafe static int glPathGlyphIndexRangeNV(int fontTarget, IntPtr fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount) {
            return Pointers.glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
        }
        
        public unsafe static void glPathGlyphRangeNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyph, int numGlyphs, int handleMissingGlyphs, uint pathParameterTemplate, float emScale) {
            Pointers.glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        public unsafe static void glPathGlyphsNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, int numGlyphs, int type, IntPtr charcodes, int handleMissingGlyphs, uint pathParameterTemplate, float emScale) {
            Pointers.glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        public unsafe static int glPathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) {
            return Pointers.glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        public unsafe static void glPathParameterfNV(uint path, int pname, float value) {
            Pointers.glPathParameterfNV(path, pname, value);
        }
        
        public unsafe static void glPathParameterfvNV(uint path, int pname, float* value) {
            Pointers.glPathParameterfvNV(path, pname, value);
        }
        
        public unsafe static void glPathParameterfvNV(uint path, int pname, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glPathParameterfvNV(path, pname, value_);
        }
        
        public unsafe static void glPathParameteriNV(uint path, int pname, int value) {
            Pointers.glPathParameteriNV(path, pname, value);
        }
        
        public unsafe static void glPathParameterivNV(uint path, int pname, int* value) {
            Pointers.glPathParameterivNV(path, pname, value);
        }
        
        public unsafe static void glPathParameterivNV(uint path, int pname, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glPathParameterivNV(path, pname, value_);
        }
        
        public unsafe static void glPathStencilDepthOffsetNV(float factor, float units) {
            Pointers.glPathStencilDepthOffsetNV(factor, units);
        }
        
        public unsafe static void glPathStencilFuncNV(int func, int _ref, uint mask) {
            Pointers.glPathStencilFuncNV(func, _ref, mask);
        }
        
        public unsafe static void glPathStringNV(uint path, int format, int length, IntPtr pathString) {
            Pointers.glPathStringNV(path, format, length, pathString);
        }
        
        public unsafe static void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords) {
            Pointers.glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        }
        
        public unsafe static void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, int coordType, IntPtr coords) {
            fixed(byte* commands_ = &commands[0])
                Pointers.glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_, numCoords, coordType, coords);
        }
        
        public unsafe static void glPathSubCoordsNV(uint path, int coordStart, int numCoords, int coordType, IntPtr coords) {
            Pointers.glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
        }
        
        public unsafe static void glPathTexGenNV(int texCoordSet, int genMode, int components, float* coeffs) {
            Pointers.glPathTexGenNV(texCoordSet, genMode, components, coeffs);
        }
        
        public unsafe static void glPathTexGenNV(int texCoordSet, int genMode, int components, float[] coeffs) {
            fixed(float* coeffs_ = &coeffs[0])
                Pointers.glPathTexGenNV(texCoordSet, genMode, components, coeffs_);
        }
        
        public unsafe static void glPauseTransformFeedback() {
            Pointers.glPauseTransformFeedback();
        }
        
        public unsafe static void glPauseTransformFeedbackNV() {
            Pointers.glPauseTransformFeedbackNV();
        }
        
        public unsafe static void glPixelDataRangeNV(int target, int length, IntPtr pointer) {
            Pointers.glPixelDataRangeNV(target, length, pointer);
        }
        
        public unsafe static void glPixelMapfv(int map, int mapsize, float* values) {
            Pointers.glPixelMapfv(map, mapsize, values);
        }
        
        public unsafe static void glPixelMapfv(int map, int mapsize, float[] values) {
            fixed(float* values_ = &values[0])
                Pointers.glPixelMapfv(map, mapsize, values_);
        }
        
        public unsafe static void glPixelMapuiv(int map, int mapsize, uint* values) {
            Pointers.glPixelMapuiv(map, mapsize, values);
        }
        
        public unsafe static void glPixelMapuiv(int map, int mapsize, uint[] values) {
            fixed(uint* values_ = &values[0])
                Pointers.glPixelMapuiv(map, mapsize, values_);
        }
        
        public unsafe static void glPixelMapusv(int map, int mapsize, ushort* values) {
            Pointers.glPixelMapusv(map, mapsize, values);
        }
        
        public unsafe static void glPixelMapusv(int map, int mapsize, ushort[] values) {
            fixed(ushort* values_ = &values[0])
                Pointers.glPixelMapusv(map, mapsize, values_);
        }
        
        public unsafe static void glPixelMapx(int map, int size, IntPtr* values) {
            Pointers.glPixelMapx(map, size, values);
        }
        
        public unsafe static void glPixelMapx(int map, int size, IntPtr[] values) {
            fixed(IntPtr* values_ = &values[0])
                Pointers.glPixelMapx(map, size, values_);
        }
        
        public unsafe static void glPixelStoref(int pname, float param) {
            Pointers.glPixelStoref(pname, param);
        }
        
        public unsafe static void glPixelStorei(int pname, int param) {
            Pointers.glPixelStorei(pname, param);
        }
        
        public unsafe static void glPixelStorex(int pname, IntPtr param) {
            Pointers.glPixelStorex(pname, param);
        }
        
        public unsafe static void glPixelTexGenParameterfSGIS(int pname, float param) {
            Pointers.glPixelTexGenParameterfSGIS(pname, param);
        }
        
        public unsafe static void glPixelTexGenParameterfvSGIS(int pname, float* _params) {
            Pointers.glPixelTexGenParameterfvSGIS(pname, _params);
        }
        
        public unsafe static void glPixelTexGenParameterfvSGIS(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glPixelTexGenParameterfvSGIS(pname, _params_);
        }
        
        public unsafe static void glPixelTexGenParameteriSGIS(int pname, int param) {
            Pointers.glPixelTexGenParameteriSGIS(pname, param);
        }
        
        public unsafe static void glPixelTexGenParameterivSGIS(int pname, int* _params) {
            Pointers.glPixelTexGenParameterivSGIS(pname, _params);
        }
        
        public unsafe static void glPixelTexGenParameterivSGIS(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glPixelTexGenParameterivSGIS(pname, _params_);
        }
        
        public unsafe static void glPixelTexGenSGIX(int mode) {
            Pointers.glPixelTexGenSGIX(mode);
        }
        
        public unsafe static void glPixelTransferf(int pname, float param) {
            Pointers.glPixelTransferf(pname, param);
        }
        
        public unsafe static void glPixelTransferi(int pname, int param) {
            Pointers.glPixelTransferi(pname, param);
        }
        
        public unsafe static void glPixelTransferxOES(int pname, IntPtr param) {
            Pointers.glPixelTransferxOES(pname, param);
        }
        
        public unsafe static void glPixelTransformParameterfEXT(int target, int pname, float param) {
            Pointers.glPixelTransformParameterfEXT(target, pname, param);
        }
        
        public unsafe static void glPixelTransformParameterfvEXT(int target, int pname, float* _params) {
            Pointers.glPixelTransformParameterfvEXT(target, pname, _params);
        }
        
        public unsafe static void glPixelTransformParameterfvEXT(int target, int pname, out float _params) {
            fixed(float* _params_ = &_params)
                Pointers.glPixelTransformParameterfvEXT(target, pname, _params_);
        }
        
        public unsafe static void glPixelTransformParameteriEXT(int target, int pname, int param) {
            Pointers.glPixelTransformParameteriEXT(target, pname, param);
        }
        
        public unsafe static void glPixelTransformParameterivEXT(int target, int pname, int* _params) {
            Pointers.glPixelTransformParameterivEXT(target, pname, _params);
        }
        
        public unsafe static void glPixelTransformParameterivEXT(int target, int pname, out int _params) {
            fixed(int* _params_ = &_params)
                Pointers.glPixelTransformParameterivEXT(target, pname, _params_);
        }
        
        public unsafe static void glPixelZoom(float xfactor, float yfactor) {
            Pointers.glPixelZoom(xfactor, yfactor);
        }
        
        public unsafe static void glPixelZoomxOES(IntPtr xfactor, IntPtr yfactor) {
            Pointers.glPixelZoomxOES(xfactor, yfactor);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY) {
            return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, out float tangentY) {
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, out float tangentX, float* tangentY) {
            fixed(float* tangentX_ = &tangentX)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX_, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, out float tangentX, out float tangentY) {
            fixed(float* tangentX_ = &tangentX)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX_, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, out float y, float* tangentX, float* tangentY) {
            fixed(float* y_ = &y)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y_, tangentX, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, out float y, float* tangentX, out float tangentY) {
            fixed(float* y_ = &y)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y_, tangentX, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, out float y, out float tangentX, float* tangentY) {
            fixed(float* y_ = &y)
            fixed(float* tangentX_ = &tangentX)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y_, tangentX_, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, out float y, out float tangentX, out float tangentY) {
            fixed(float* y_ = &y)
            fixed(float* tangentX_ = &tangentX)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x, y_, tangentX_, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, float* y, float* tangentX, float* tangentY) {
            fixed(float* x_ = &x)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y, tangentX, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, float* y, float* tangentX, out float tangentY) {
            fixed(float* x_ = &x)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y, tangentX, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, float* y, out float tangentX, float* tangentY) {
            fixed(float* x_ = &x)
            fixed(float* tangentX_ = &tangentX)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y, tangentX_, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, float* y, out float tangentX, out float tangentY) {
            fixed(float* x_ = &x)
            fixed(float* tangentX_ = &tangentX)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y, tangentX_, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, float* tangentX, float* tangentY) {
            fixed(float* x_ = &x)
            fixed(float* y_ = &y)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y_, tangentX, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, float* tangentX, out float tangentY) {
            fixed(float* x_ = &x)
            fixed(float* y_ = &y)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y_, tangentX, tangentY_);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, float* tangentY) {
            fixed(float* x_ = &x)
            fixed(float* y_ = &y)
            fixed(float* tangentX_ = &tangentX)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y_, tangentX_, tangentY);
        }
        
        public unsafe static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, out float tangentY) {
            fixed(float* x_ = &x)
            fixed(float* y_ = &y)
            fixed(float* tangentX_ = &tangentX)
            fixed(float* tangentY_ = &tangentY)
                return Pointers.glPointAlongPathNV(path, startSegment, numSegments, distance, x_, y_, tangentX_, tangentY_);
        }
        
        public unsafe static void glPointParameterf(int pname, float param) {
            Pointers.glPointParameterf(pname, param);
        }
        
        public unsafe static void glPointParameterfARB(int pname, float param) {
            Pointers.glPointParameterfARB(pname, param);
        }
        
        public unsafe static void glPointParameterfEXT(int pname, float param) {
            Pointers.glPointParameterfEXT(pname, param);
        }
        
        public unsafe static void glPointParameterfSGIS(int pname, float param) {
            Pointers.glPointParameterfSGIS(pname, param);
        }
        
        public unsafe static void glPointParameterfv(int pname, float* _params) {
            Pointers.glPointParameterfv(pname, _params);
        }
        
        public unsafe static void glPointParameterfv(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glPointParameterfv(pname, _params_);
        }
        
        public unsafe static void glPointParameterfvARB(int pname, float* _params) {
            Pointers.glPointParameterfvARB(pname, _params);
        }
        
        public unsafe static void glPointParameterfvARB(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glPointParameterfvARB(pname, _params_);
        }
        
        public unsafe static void glPointParameterfvEXT(int pname, float* _params) {
            Pointers.glPointParameterfvEXT(pname, _params);
        }
        
        public unsafe static void glPointParameterfvEXT(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glPointParameterfvEXT(pname, _params_);
        }
        
        public unsafe static void glPointParameterfvSGIS(int pname, float* _params) {
            Pointers.glPointParameterfvSGIS(pname, _params);
        }
        
        public unsafe static void glPointParameterfvSGIS(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glPointParameterfvSGIS(pname, _params_);
        }
        
        public unsafe static void glPointParameteri(int pname, int param) {
            Pointers.glPointParameteri(pname, param);
        }
        
        public unsafe static void glPointParameteriNV(int pname, int param) {
            Pointers.glPointParameteriNV(pname, param);
        }
        
        public unsafe static void glPointParameteriv(int pname, int* _params) {
            Pointers.glPointParameteriv(pname, _params);
        }
        
        public unsafe static void glPointParameteriv(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glPointParameteriv(pname, _params_);
        }
        
        public unsafe static void glPointParameterivNV(int pname, int* _params) {
            Pointers.glPointParameterivNV(pname, _params);
        }
        
        public unsafe static void glPointParameterivNV(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glPointParameterivNV(pname, _params_);
        }
        
        public unsafe static void glPointParameterx(int pname, IntPtr param) {
            Pointers.glPointParameterx(pname, param);
        }
        
        public unsafe static void glPointParameterxOES(int pname, IntPtr param) {
            Pointers.glPointParameterxOES(pname, param);
        }
        
        public unsafe static void glPointParameterxv(int pname, IntPtr* _params) {
            Pointers.glPointParameterxv(pname, _params);
        }
        
        public unsafe static void glPointParameterxv(int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glPointParameterxv(pname, _params_);
        }
        
        public unsafe static void glPointParameterxvOES(int pname, IntPtr* _params) {
            Pointers.glPointParameterxvOES(pname, _params);
        }
        
        public unsafe static void glPointParameterxvOES(int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glPointParameterxvOES(pname, _params_);
        }
        
        public unsafe static void glPointSize(float size) {
            Pointers.glPointSize(size);
        }
        
        public unsafe static void glPointSizePointerOES(int type, int stride, IntPtr pointer) {
            Pointers.glPointSizePointerOES(type, stride, pointer);
        }
        
        public unsafe static void glPointSizex(IntPtr size) {
            Pointers.glPointSizex(size);
        }
        
        public unsafe static void glPointSizexOES(IntPtr size) {
            Pointers.glPointSizexOES(size);
        }
        
        public unsafe static int glPollAsyncSGIX(uint* markerp) {
            return Pointers.glPollAsyncSGIX(markerp);
        }
        
        public unsafe static int glPollAsyncSGIX(out uint markerp) {
            fixed(uint* markerp_ = &markerp)
                return Pointers.glPollAsyncSGIX(markerp_);
        }
        
        public unsafe static int glPollInstrumentsSGIX(int* marker_p) {
            return Pointers.glPollInstrumentsSGIX(marker_p);
        }
        
        public unsafe static int glPollInstrumentsSGIX(out int marker_p) {
            fixed(int* marker_p_ = &marker_p)
                return Pointers.glPollInstrumentsSGIX(marker_p_);
        }
        
        public unsafe static void glPolygonMode(int face, int mode) {
            Pointers.glPolygonMode(face, mode);
        }
        
        public unsafe static void glPolygonModeNV(int face, int mode) {
            Pointers.glPolygonModeNV(face, mode);
        }
        
        public unsafe static void glPolygonOffset(float factor, float units) {
            Pointers.glPolygonOffset(factor, units);
        }
        
        public unsafe static void glPolygonOffsetClamp(float factor, float units, float clamp) {
            Pointers.glPolygonOffsetClamp(factor, units, clamp);
        }
        
        public unsafe static void glPolygonOffsetClampEXT(float factor, float units, float clamp) {
            Pointers.glPolygonOffsetClampEXT(factor, units, clamp);
        }
        
        public unsafe static void glPolygonOffsetEXT(float factor, float bias) {
            Pointers.glPolygonOffsetEXT(factor, bias);
        }
        
        public unsafe static void glPolygonOffsetx(IntPtr factor, IntPtr units) {
            Pointers.glPolygonOffsetx(factor, units);
        }
        
        public unsafe static void glPolygonOffsetxOES(IntPtr factor, IntPtr units) {
            Pointers.glPolygonOffsetxOES(factor, units);
        }
        
        public unsafe static void glPolygonStipple(byte* mask) {
            Pointers.glPolygonStipple(mask);
        }
        
        public unsafe static void glPolygonStipple(byte[] mask) {
            fixed(byte* mask_ = &mask[0])
                Pointers.glPolygonStipple(mask_);
        }
        
        public unsafe static void glPopAttrib() {
            Pointers.glPopAttrib();
        }
        
        public unsafe static void glPopClientAttrib() {
            Pointers.glPopClientAttrib();
        }
        
        public unsafe static void glPopDebugGroup() {
            Pointers.glPopDebugGroup();
        }
        
        public unsafe static void glPopDebugGroupKHR() {
            Pointers.glPopDebugGroupKHR();
        }
        
        public unsafe static void glPopGroupMarkerEXT() {
            Pointers.glPopGroupMarkerEXT();
        }
        
        public unsafe static void glPopMatrix() {
            Pointers.glPopMatrix();
        }
        
        public unsafe static void glPopName() {
            Pointers.glPopName();
        }
        
        public unsafe static void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3) {
            Pointers.glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        }
        
        public unsafe static void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1) {
            Pointers.glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        }
        
        public unsafe static void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
            Pointers.glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public unsafe static void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
            Pointers.glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public unsafe static void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
            Pointers.glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public unsafe static void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
            Pointers.glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public unsafe static void glPrimitiveRestartIndex(uint index) {
            Pointers.glPrimitiveRestartIndex(index);
        }
        
        public unsafe static void glPrimitiveRestartIndexNV(uint index) {
            Pointers.glPrimitiveRestartIndexNV(index);
        }
        
        public unsafe static void glPrimitiveRestartNV() {
            Pointers.glPrimitiveRestartNV();
        }
        
        public unsafe static void glPrioritizeTextures(int n, uint* textures, float* priorities) {
            Pointers.glPrioritizeTextures(n, textures, priorities);
        }
        
        public unsafe static void glPrioritizeTextures(int n, uint* textures, float[] priorities) {
            fixed(float* priorities_ = &priorities[0])
                Pointers.glPrioritizeTextures(n, textures, priorities_);
        }
        
        public unsafe static void glPrioritizeTextures(int n, uint[] textures, float* priorities) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glPrioritizeTextures(n, textures_, priorities);
        }
        
        public unsafe static void glPrioritizeTextures(int n, uint[] textures, float[] priorities) {
            fixed(uint* textures_ = &textures[0])
            fixed(float* priorities_ = &priorities[0])
                Pointers.glPrioritizeTextures(n, textures_, priorities_);
        }
        
        public unsafe static void glPrioritizeTexturesEXT(int n, uint* textures, float* priorities) {
            Pointers.glPrioritizeTexturesEXT(n, textures, priorities);
        }
        
        public unsafe static void glPrioritizeTexturesEXT(int n, uint* textures, float[] priorities) {
            fixed(float* priorities_ = &priorities[0])
                Pointers.glPrioritizeTexturesEXT(n, textures, priorities_);
        }
        
        public unsafe static void glPrioritizeTexturesEXT(int n, uint[] textures, float* priorities) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glPrioritizeTexturesEXT(n, textures_, priorities);
        }
        
        public unsafe static void glPrioritizeTexturesEXT(int n, uint[] textures, float[] priorities) {
            fixed(uint* textures_ = &textures[0])
            fixed(float* priorities_ = &priorities[0])
                Pointers.glPrioritizeTexturesEXT(n, textures_, priorities_);
        }
        
        public unsafe static void glPrioritizeTexturesxOES(int n, uint* textures, IntPtr* priorities) {
            Pointers.glPrioritizeTexturesxOES(n, textures, priorities);
        }
        
        public unsafe static void glPrioritizeTexturesxOES(int n, uint* textures, IntPtr[] priorities) {
            fixed(IntPtr* priorities_ = &priorities[0])
                Pointers.glPrioritizeTexturesxOES(n, textures, priorities_);
        }
        
        public unsafe static void glPrioritizeTexturesxOES(int n, uint[] textures, IntPtr* priorities) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glPrioritizeTexturesxOES(n, textures_, priorities);
        }
        
        public unsafe static void glPrioritizeTexturesxOES(int n, uint[] textures, IntPtr[] priorities) {
            fixed(uint* textures_ = &textures[0])
            fixed(IntPtr* priorities_ = &priorities[0])
                Pointers.glPrioritizeTexturesxOES(n, textures_, priorities_);
        }
        
        public unsafe static void glProgramBinary(uint program, int binaryFormat, IntPtr binary, int length) {
            Pointers.glProgramBinary(program, binaryFormat, binary, length);
        }
        
        public unsafe static void glProgramBinaryOES(uint program, int binaryFormat, IntPtr binary, int length) {
            Pointers.glProgramBinaryOES(program, binaryFormat, binary, length);
        }
        
        public unsafe static void glProgramBufferParametersIivNV(int target, uint bindingIndex, uint wordIndex, int count, int* _params) {
            Pointers.glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, _params);
        }
        
        public unsafe static void glProgramBufferParametersIivNV(int target, uint bindingIndex, uint wordIndex, int count, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, _params_);
        }
        
        public unsafe static void glProgramBufferParametersIuivNV(int target, uint bindingIndex, uint wordIndex, int count, uint* _params) {
            Pointers.glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, _params);
        }
        
        public unsafe static void glProgramBufferParametersIuivNV(int target, uint bindingIndex, uint wordIndex, int count, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, _params_);
        }
        
        public unsafe static void glProgramBufferParametersfvNV(int target, uint bindingIndex, uint wordIndex, int count, float* _params) {
            Pointers.glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, _params);
        }
        
        public unsafe static void glProgramBufferParametersfvNV(int target, uint bindingIndex, uint wordIndex, int count, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, _params_);
        }
        
        public unsafe static void glProgramEnvParameter4dARB(int target, uint index, double x, double y, double z, double w) {
            Pointers.glProgramEnvParameter4dARB(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramEnvParameter4dvARB(int target, uint index, double* _params) {
            Pointers.glProgramEnvParameter4dvARB(target, index, _params);
        }
        
        public unsafe static void glProgramEnvParameter4dvARB(int target, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glProgramEnvParameter4dvARB(target, index, _params_);
        }
        
        public unsafe static void glProgramEnvParameter4fARB(int target, uint index, float x, float y, float z, float w) {
            Pointers.glProgramEnvParameter4fARB(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramEnvParameter4fvARB(int target, uint index, float* _params) {
            Pointers.glProgramEnvParameter4fvARB(target, index, _params);
        }
        
        public unsafe static void glProgramEnvParameter4fvARB(int target, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glProgramEnvParameter4fvARB(target, index, _params_);
        }
        
        public unsafe static void glProgramEnvParameterI4iNV(int target, uint index, int x, int y, int z, int w) {
            Pointers.glProgramEnvParameterI4iNV(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramEnvParameterI4ivNV(int target, uint index, int* _params) {
            Pointers.glProgramEnvParameterI4ivNV(target, index, _params);
        }
        
        public unsafe static void glProgramEnvParameterI4ivNV(int target, uint index, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glProgramEnvParameterI4ivNV(target, index, _params_);
        }
        
        public unsafe static void glProgramEnvParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w) {
            Pointers.glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramEnvParameterI4uivNV(int target, uint index, uint* _params) {
            Pointers.glProgramEnvParameterI4uivNV(target, index, _params);
        }
        
        public unsafe static void glProgramEnvParameterI4uivNV(int target, uint index, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glProgramEnvParameterI4uivNV(target, index, _params_);
        }
        
        public unsafe static void glProgramEnvParameters4fvEXT(int target, uint index, int count, float* _params) {
            Pointers.glProgramEnvParameters4fvEXT(target, index, count, _params);
        }
        
        public unsafe static void glProgramEnvParameters4fvEXT(int target, uint index, int count, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glProgramEnvParameters4fvEXT(target, index, count, _params_);
        }
        
        public unsafe static void glProgramEnvParametersI4ivNV(int target, uint index, int count, int* _params) {
            Pointers.glProgramEnvParametersI4ivNV(target, index, count, _params);
        }
        
        public unsafe static void glProgramEnvParametersI4ivNV(int target, uint index, int count, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glProgramEnvParametersI4ivNV(target, index, count, _params_);
        }
        
        public unsafe static void glProgramEnvParametersI4uivNV(int target, uint index, int count, uint* _params) {
            Pointers.glProgramEnvParametersI4uivNV(target, index, count, _params);
        }
        
        public unsafe static void glProgramEnvParametersI4uivNV(int target, uint index, int count, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glProgramEnvParametersI4uivNV(target, index, count, _params_);
        }
        
        public unsafe static void glProgramLocalParameter4dARB(int target, uint index, double x, double y, double z, double w) {
            Pointers.glProgramLocalParameter4dARB(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramLocalParameter4dvARB(int target, uint index, double* _params) {
            Pointers.glProgramLocalParameter4dvARB(target, index, _params);
        }
        
        public unsafe static void glProgramLocalParameter4dvARB(int target, uint index, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glProgramLocalParameter4dvARB(target, index, _params_);
        }
        
        public unsafe static void glProgramLocalParameter4fARB(int target, uint index, float x, float y, float z, float w) {
            Pointers.glProgramLocalParameter4fARB(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramLocalParameter4fvARB(int target, uint index, float* _params) {
            Pointers.glProgramLocalParameter4fvARB(target, index, _params);
        }
        
        public unsafe static void glProgramLocalParameter4fvARB(int target, uint index, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glProgramLocalParameter4fvARB(target, index, _params_);
        }
        
        public unsafe static void glProgramLocalParameterI4iNV(int target, uint index, int x, int y, int z, int w) {
            Pointers.glProgramLocalParameterI4iNV(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramLocalParameterI4ivNV(int target, uint index, int* _params) {
            Pointers.glProgramLocalParameterI4ivNV(target, index, _params);
        }
        
        public unsafe static void glProgramLocalParameterI4ivNV(int target, uint index, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glProgramLocalParameterI4ivNV(target, index, _params_);
        }
        
        public unsafe static void glProgramLocalParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w) {
            Pointers.glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramLocalParameterI4uivNV(int target, uint index, uint* _params) {
            Pointers.glProgramLocalParameterI4uivNV(target, index, _params);
        }
        
        public unsafe static void glProgramLocalParameterI4uivNV(int target, uint index, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glProgramLocalParameterI4uivNV(target, index, _params_);
        }
        
        public unsafe static void glProgramLocalParameters4fvEXT(int target, uint index, int count, float* _params) {
            Pointers.glProgramLocalParameters4fvEXT(target, index, count, _params);
        }
        
        public unsafe static void glProgramLocalParameters4fvEXT(int target, uint index, int count, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glProgramLocalParameters4fvEXT(target, index, count, _params_);
        }
        
        public unsafe static void glProgramLocalParametersI4ivNV(int target, uint index, int count, int* _params) {
            Pointers.glProgramLocalParametersI4ivNV(target, index, count, _params);
        }
        
        public unsafe static void glProgramLocalParametersI4ivNV(int target, uint index, int count, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glProgramLocalParametersI4ivNV(target, index, count, _params_);
        }
        
        public unsafe static void glProgramLocalParametersI4uivNV(int target, uint index, int count, uint* _params) {
            Pointers.glProgramLocalParametersI4uivNV(target, index, count, _params);
        }
        
        public unsafe static void glProgramLocalParametersI4uivNV(int target, uint index, int count, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glProgramLocalParametersI4uivNV(target, index, count, _params_);
        }
        
        public unsafe static void glProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w) {
            Pointers.glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
        }
        
        public unsafe static void glProgramNamedParameter4dNV(uint id, int len, out byte name, double x, double y, double z, double w) {
            fixed(byte* name_ = &name)
                Pointers.glProgramNamedParameter4dNV(id, len, name_, x, y, z, w);
        }
        
        public unsafe static void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v) {
            Pointers.glProgramNamedParameter4dvNV(id, len, name, v);
        }
        
        public unsafe static void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glProgramNamedParameter4dvNV(id, len, name, v_);
        }
        
        public unsafe static void glProgramNamedParameter4dvNV(uint id, int len, out byte name, double* v) {
            fixed(byte* name_ = &name)
                Pointers.glProgramNamedParameter4dvNV(id, len, name_, v);
        }
        
        public unsafe static void glProgramNamedParameter4dvNV(uint id, int len, out byte name, double[] v) {
            fixed(byte* name_ = &name)
            fixed(double* v_ = &v[0])
                Pointers.glProgramNamedParameter4dvNV(id, len, name_, v_);
        }
        
        public unsafe static void glProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w) {
            Pointers.glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
        }
        
        public unsafe static void glProgramNamedParameter4fNV(uint id, int len, out byte name, float x, float y, float z, float w) {
            fixed(byte* name_ = &name)
                Pointers.glProgramNamedParameter4fNV(id, len, name_, x, y, z, w);
        }
        
        public unsafe static void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v) {
            Pointers.glProgramNamedParameter4fvNV(id, len, name, v);
        }
        
        public unsafe static void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glProgramNamedParameter4fvNV(id, len, name, v_);
        }
        
        public unsafe static void glProgramNamedParameter4fvNV(uint id, int len, out byte name, float* v) {
            fixed(byte* name_ = &name)
                Pointers.glProgramNamedParameter4fvNV(id, len, name_, v);
        }
        
        public unsafe static void glProgramNamedParameter4fvNV(uint id, int len, out byte name, float[] v) {
            fixed(byte* name_ = &name)
            fixed(float* v_ = &v[0])
                Pointers.glProgramNamedParameter4fvNV(id, len, name_, v_);
        }
        
        public unsafe static void glProgramParameter4dNV(int target, uint index, double x, double y, double z, double w) {
            Pointers.glProgramParameter4dNV(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramParameter4dvNV(int target, uint index, double* v) {
            Pointers.glProgramParameter4dvNV(target, index, v);
        }
        
        public unsafe static void glProgramParameter4dvNV(int target, uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glProgramParameter4dvNV(target, index, v_);
        }
        
        public unsafe static void glProgramParameter4fNV(int target, uint index, float x, float y, float z, float w) {
            Pointers.glProgramParameter4fNV(target, index, x, y, z, w);
        }
        
        public unsafe static void glProgramParameter4fvNV(int target, uint index, float* v) {
            Pointers.glProgramParameter4fvNV(target, index, v);
        }
        
        public unsafe static void glProgramParameter4fvNV(int target, uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glProgramParameter4fvNV(target, index, v_);
        }
        
        public unsafe static void glProgramParameteri(uint program, int pname, int value) {
            Pointers.glProgramParameteri(program, pname, value);
        }
        
        public unsafe static void glProgramParameteriARB(uint program, int pname, int value) {
            Pointers.glProgramParameteriARB(program, pname, value);
        }
        
        public unsafe static void glProgramParameteriEXT(uint program, int pname, int value) {
            Pointers.glProgramParameteriEXT(program, pname, value);
        }
        
        public unsafe static void glProgramParameters4dvNV(int target, uint index, int count, double* v) {
            Pointers.glProgramParameters4dvNV(target, index, count, v);
        }
        
        public unsafe static void glProgramParameters4dvNV(int target, uint index, int count, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glProgramParameters4dvNV(target, index, count, v_);
        }
        
        public unsafe static void glProgramParameters4fvNV(int target, uint index, int count, float* v) {
            Pointers.glProgramParameters4fvNV(target, index, count, v);
        }
        
        public unsafe static void glProgramParameters4fvNV(int target, uint index, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glProgramParameters4fvNV(target, index, count, v_);
        }
        
        public unsafe static void glProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float* coeffs) {
            Pointers.glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
        }
        
        public unsafe static void glProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float[] coeffs) {
            fixed(float* coeffs_ = &coeffs[0])
                Pointers.glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs_);
        }
        
        public unsafe static void glProgramStringARB(int target, int format, int len, IntPtr _string) {
            Pointers.glProgramStringARB(target, format, len, _string);
        }
        
        public unsafe static void glProgramSubroutineParametersuivNV(int target, int count, uint* _params) {
            Pointers.glProgramSubroutineParametersuivNV(target, count, _params);
        }
        
        public unsafe static void glProgramSubroutineParametersuivNV(int target, int count, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glProgramSubroutineParametersuivNV(target, count, _params_);
        }
        
        public unsafe static void glProgramUniform1d(uint program, int location, double v0) {
            Pointers.glProgramUniform1d(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1dEXT(uint program, int location, double x) {
            Pointers.glProgramUniform1dEXT(program, location, x);
        }
        
        public unsafe static void glProgramUniform1dv(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform1dv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1dv(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform1dv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1dvEXT(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform1dvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1dvEXT(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform1dvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1f(uint program, int location, float v0) {
            Pointers.glProgramUniform1f(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1fEXT(uint program, int location, float v0) {
            Pointers.glProgramUniform1fEXT(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1fv(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform1fv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1fv(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform1fv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1fvEXT(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform1fvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1fvEXT(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform1fvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1i(uint program, int location, int v0) {
            Pointers.glProgramUniform1i(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1i64ARB(uint program, int location, long x) {
            Pointers.glProgramUniform1i64ARB(program, location, x);
        }
        
        public unsafe static void glProgramUniform1i64NV(uint program, int location, long x) {
            Pointers.glProgramUniform1i64NV(program, location, x);
        }
        
        public unsafe static void glProgramUniform1i64vARB(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform1i64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1i64vARB(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform1i64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1i64vNV(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform1i64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1i64vNV(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform1i64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1iEXT(uint program, int location, int v0) {
            Pointers.glProgramUniform1iEXT(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1iv(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform1iv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1iv(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform1iv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1ivEXT(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform1ivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1ivEXT(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform1ivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1ui(uint program, int location, uint v0) {
            Pointers.glProgramUniform1ui(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1ui64ARB(uint program, int location, ulong x) {
            Pointers.glProgramUniform1ui64ARB(program, location, x);
        }
        
        public unsafe static void glProgramUniform1ui64NV(uint program, int location, ulong x) {
            Pointers.glProgramUniform1ui64NV(program, location, x);
        }
        
        public unsafe static void glProgramUniform1ui64vARB(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform1ui64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1ui64vARB(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform1ui64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1ui64vNV(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform1ui64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1ui64vNV(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform1ui64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1uiEXT(uint program, int location, uint v0) {
            Pointers.glProgramUniform1uiEXT(program, location, v0);
        }
        
        public unsafe static void glProgramUniform1uiv(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform1uiv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1uiv(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform1uiv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform1uivEXT(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform1uivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform1uivEXT(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform1uivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2d(uint program, int location, double v0, double v1) {
            Pointers.glProgramUniform2d(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2dEXT(uint program, int location, double x, double y) {
            Pointers.glProgramUniform2dEXT(program, location, x, y);
        }
        
        public unsafe static void glProgramUniform2dv(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform2dv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2dv(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform2dv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2dvEXT(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform2dvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2dvEXT(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform2dvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2f(uint program, int location, float v0, float v1) {
            Pointers.glProgramUniform2f(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2fEXT(uint program, int location, float v0, float v1) {
            Pointers.glProgramUniform2fEXT(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2fv(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform2fv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2fv(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform2fv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2fvEXT(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform2fvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2fvEXT(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform2fvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2i(uint program, int location, int v0, int v1) {
            Pointers.glProgramUniform2i(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2i64ARB(uint program, int location, long x, long y) {
            Pointers.glProgramUniform2i64ARB(program, location, x, y);
        }
        
        public unsafe static void glProgramUniform2i64NV(uint program, int location, long x, long y) {
            Pointers.glProgramUniform2i64NV(program, location, x, y);
        }
        
        public unsafe static void glProgramUniform2i64vARB(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform2i64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2i64vARB(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform2i64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2i64vNV(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform2i64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2i64vNV(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform2i64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2iEXT(uint program, int location, int v0, int v1) {
            Pointers.glProgramUniform2iEXT(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2iv(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform2iv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2iv(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform2iv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2ivEXT(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform2ivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2ivEXT(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform2ivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2ui(uint program, int location, uint v0, uint v1) {
            Pointers.glProgramUniform2ui(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y) {
            Pointers.glProgramUniform2ui64ARB(program, location, x, y);
        }
        
        public unsafe static void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y) {
            Pointers.glProgramUniform2ui64NV(program, location, x, y);
        }
        
        public unsafe static void glProgramUniform2ui64vARB(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform2ui64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2ui64vARB(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform2ui64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2ui64vNV(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform2ui64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2ui64vNV(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform2ui64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1) {
            Pointers.glProgramUniform2uiEXT(program, location, v0, v1);
        }
        
        public unsafe static void glProgramUniform2uiv(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform2uiv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2uiv(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform2uiv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform2uivEXT(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform2uivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform2uivEXT(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform2uivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3d(uint program, int location, double v0, double v1, double v2) {
            Pointers.glProgramUniform3d(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3dEXT(uint program, int location, double x, double y, double z) {
            Pointers.glProgramUniform3dEXT(program, location, x, y, z);
        }
        
        public unsafe static void glProgramUniform3dv(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform3dv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3dv(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform3dv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3dvEXT(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform3dvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3dvEXT(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform3dvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3f(uint program, int location, float v0, float v1, float v2) {
            Pointers.glProgramUniform3f(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2) {
            Pointers.glProgramUniform3fEXT(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3fv(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform3fv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3fv(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform3fv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3fvEXT(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform3fvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3fvEXT(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform3fvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3i(uint program, int location, int v0, int v1, int v2) {
            Pointers.glProgramUniform3i(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z) {
            Pointers.glProgramUniform3i64ARB(program, location, x, y, z);
        }
        
        public unsafe static void glProgramUniform3i64NV(uint program, int location, long x, long y, long z) {
            Pointers.glProgramUniform3i64NV(program, location, x, y, z);
        }
        
        public unsafe static void glProgramUniform3i64vARB(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform3i64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3i64vARB(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform3i64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3i64vNV(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform3i64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3i64vNV(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform3i64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2) {
            Pointers.glProgramUniform3iEXT(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3iv(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform3iv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3iv(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform3iv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3ivEXT(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform3ivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3ivEXT(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform3ivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2) {
            Pointers.glProgramUniform3ui(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z) {
            Pointers.glProgramUniform3ui64ARB(program, location, x, y, z);
        }
        
        public unsafe static void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z) {
            Pointers.glProgramUniform3ui64NV(program, location, x, y, z);
        }
        
        public unsafe static void glProgramUniform3ui64vARB(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform3ui64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3ui64vARB(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform3ui64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3ui64vNV(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform3ui64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3ui64vNV(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform3ui64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2) {
            Pointers.glProgramUniform3uiEXT(program, location, v0, v1, v2);
        }
        
        public unsafe static void glProgramUniform3uiv(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform3uiv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3uiv(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform3uiv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform3uivEXT(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform3uivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform3uivEXT(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform3uivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3) {
            Pointers.glProgramUniform4d(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w) {
            Pointers.glProgramUniform4dEXT(program, location, x, y, z, w);
        }
        
        public unsafe static void glProgramUniform4dv(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform4dv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4dv(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform4dv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4dvEXT(uint program, int location, int count, double* value) {
            Pointers.glProgramUniform4dvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4dvEXT(uint program, int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniform4dvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3) {
            Pointers.glProgramUniform4f(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3) {
            Pointers.glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4fv(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform4fv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4fv(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform4fv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4fvEXT(uint program, int location, int count, float* value) {
            Pointers.glProgramUniform4fvEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4fvEXT(uint program, int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniform4fvEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3) {
            Pointers.glProgramUniform4i(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w) {
            Pointers.glProgramUniform4i64ARB(program, location, x, y, z, w);
        }
        
        public unsafe static void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w) {
            Pointers.glProgramUniform4i64NV(program, location, x, y, z, w);
        }
        
        public unsafe static void glProgramUniform4i64vARB(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform4i64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4i64vARB(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform4i64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4i64vNV(uint program, int location, int count, long* value) {
            Pointers.glProgramUniform4i64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4i64vNV(uint program, int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glProgramUniform4i64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3) {
            Pointers.glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4iv(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform4iv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4iv(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform4iv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4ivEXT(uint program, int location, int count, int* value) {
            Pointers.glProgramUniform4ivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4ivEXT(uint program, int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glProgramUniform4ivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3) {
            Pointers.glProgramUniform4ui(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w) {
            Pointers.glProgramUniform4ui64ARB(program, location, x, y, z, w);
        }
        
        public unsafe static void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w) {
            Pointers.glProgramUniform4ui64NV(program, location, x, y, z, w);
        }
        
        public unsafe static void glProgramUniform4ui64vARB(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform4ui64vARB(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4ui64vARB(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform4ui64vARB(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4ui64vNV(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniform4ui64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4ui64vNV(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniform4ui64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3) {
            Pointers.glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
        }
        
        public unsafe static void glProgramUniform4uiv(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform4uiv(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4uiv(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform4uiv(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniform4uivEXT(uint program, int location, int count, uint* value) {
            Pointers.glProgramUniform4uivEXT(program, location, count, value);
        }
        
        public unsafe static void glProgramUniform4uivEXT(uint program, int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glProgramUniform4uivEXT(program, location, count, value_);
        }
        
        public unsafe static void glProgramUniformHandleui64ARB(uint program, int location, ulong value) {
            Pointers.glProgramUniformHandleui64ARB(program, location, value);
        }
        
        public unsafe static void glProgramUniformHandleui64IMG(uint program, int location, ulong value) {
            Pointers.glProgramUniformHandleui64IMG(program, location, value);
        }
        
        public unsafe static void glProgramUniformHandleui64NV(uint program, int location, ulong value) {
            Pointers.glProgramUniformHandleui64NV(program, location, value);
        }
        
        public unsafe static void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values) {
            Pointers.glProgramUniformHandleui64vARB(program, location, count, values);
        }
        
        public unsafe static void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong[] values) {
            fixed(ulong* values_ = &values[0])
                Pointers.glProgramUniformHandleui64vARB(program, location, count, values_);
        }
        
        public unsafe static void glProgramUniformHandleui64vIMG(uint program, int location, int count, ulong* values) {
            Pointers.glProgramUniformHandleui64vIMG(program, location, count, values);
        }
        
        public unsafe static void glProgramUniformHandleui64vIMG(uint program, int location, int count, ulong[] values) {
            fixed(ulong* values_ = &values[0])
                Pointers.glProgramUniformHandleui64vIMG(program, location, count, values_);
        }
        
        public unsafe static void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong* values) {
            Pointers.glProgramUniformHandleui64vNV(program, location, count, values);
        }
        
        public unsafe static void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong[] values) {
            fixed(ulong* values_ = &values[0])
                Pointers.glProgramUniformHandleui64vNV(program, location, count, values_);
        }
        
        public unsafe static void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix2dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix2dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix2dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix2fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix2fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix2fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x3dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x3fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x4dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x4fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix3dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix3dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix3dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix3fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix3fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix3fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x2dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x2fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x4dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x4fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix4dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix4dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix4dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix4fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix4fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix4fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x2dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x2fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x3dv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double* value) {
            Pointers.glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x3fv(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float* value) {
            Pointers.glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
        }
        
        public unsafe static void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_);
        }
        
        public unsafe static void glProgramUniformui64NV(uint program, int location, ulong value) {
            Pointers.glProgramUniformui64NV(program, location, value);
        }
        
        public unsafe static void glProgramUniformui64vNV(uint program, int location, int count, ulong* value) {
            Pointers.glProgramUniformui64vNV(program, location, count, value);
        }
        
        public unsafe static void glProgramUniformui64vNV(uint program, int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glProgramUniformui64vNV(program, location, count, value_);
        }
        
        public unsafe static void glProgramVertexLimitNV(int target, int limit) {
            Pointers.glProgramVertexLimitNV(target, limit);
        }
        
        public unsafe static void glProvokingVertex(int mode) {
            Pointers.glProvokingVertex(mode);
        }
        
        public unsafe static void glProvokingVertexEXT(int mode) {
            Pointers.glProvokingVertexEXT(mode);
        }
        
        public unsafe static void glPushAttrib(uint mask) {
            Pointers.glPushAttrib(mask);
        }
        
        public unsafe static void glPushAttrib(Enums.AttribMask mask) {
            Pointers.glPushAttrib((uint)mask);
        }
        
        public unsafe static void glPushClientAttrib(uint mask) {
            Pointers.glPushClientAttrib(mask);
        }
        
        public unsafe static void glPushClientAttrib(Enums.ClientAttribMask mask) {
            Pointers.glPushClientAttrib((uint)mask);
        }
        
        public unsafe static void glPushClientAttribDefaultEXT(uint mask) {
            Pointers.glPushClientAttribDefaultEXT(mask);
        }
        
        public unsafe static void glPushClientAttribDefaultEXT(Enums.ClientAttribMask mask) {
            Pointers.glPushClientAttribDefaultEXT((uint)mask);
        }
        
        public unsafe static void glPushDebugGroup(int source, uint id, int length, string message) {
            Pointers.glPushDebugGroup(source, id, length, message);
        }
        
        public unsafe static void glPushDebugGroupKHR(int source, uint id, int length, string message) {
            Pointers.glPushDebugGroupKHR(source, id, length, message);
        }
        
        public unsafe static void glPushGroupMarkerEXT(int length, string marker) {
            Pointers.glPushGroupMarkerEXT(length, marker);
        }
        
        public unsafe static void glPushMatrix() {
            Pointers.glPushMatrix();
        }
        
        public unsafe static void glPushName(uint name) {
            Pointers.glPushName(name);
        }
        
        public unsafe static void glQueryCounter(uint id, int target) {
            Pointers.glQueryCounter(id, target);
        }
        
        public unsafe static void glQueryCounterEXT(uint id, int target) {
            Pointers.glQueryCounterEXT(id, target);
        }
        
        public unsafe static uint glQueryMatrixxOES(IntPtr* mantissa, int* exponent) {
            return Pointers.glQueryMatrixxOES(mantissa, exponent);
        }
        
        public unsafe static uint glQueryMatrixxOES(IntPtr* mantissa, int[] exponent) {
            fixed(int* exponent_ = &exponent[0])
                return Pointers.glQueryMatrixxOES(mantissa, exponent_);
        }
        
        public unsafe static uint glQueryMatrixxOES(IntPtr[] mantissa, int* exponent) {
            fixed(IntPtr* mantissa_ = &mantissa[0])
                return Pointers.glQueryMatrixxOES(mantissa_, exponent);
        }
        
        public unsafe static uint glQueryMatrixxOES(IntPtr[] mantissa, int[] exponent) {
            fixed(IntPtr* mantissa_ = &mantissa[0])
            fixed(int* exponent_ = &exponent[0])
                return Pointers.glQueryMatrixxOES(mantissa_, exponent_);
        }
        
        public unsafe static void glQueryObjectParameteruiAMD(int target, uint id, int pname, uint param) {
            Pointers.glQueryObjectParameteruiAMD(target, id, pname, param);
        }
        
        public unsafe static void glQueryObjectParameteruiAMD(int target, uint id, int pname, Enums.OcclusionQueryEventMaskAMD param) {
            Pointers.glQueryObjectParameteruiAMD(target, id, pname, (uint)param);
        }
        
        public unsafe static int glQueryResourceNV(int queryType, int tagId, uint bufSize, int* buffer) {
            return Pointers.glQueryResourceNV(queryType, tagId, bufSize, buffer);
        }
        
        public unsafe static int glQueryResourceNV(int queryType, int tagId, uint bufSize, int[] buffer) {
            fixed(int* buffer_ = &buffer[0])
                return Pointers.glQueryResourceNV(queryType, tagId, bufSize, buffer_);
        }
        
        public unsafe static void glQueryResourceTagNV(int tagId, string tagString) {
            Pointers.glQueryResourceTagNV(tagId, tagString);
        }
        
        public unsafe static void glRasterPos2d(double x, double y) {
            Pointers.glRasterPos2d(x, y);
        }
        
        public unsafe static void glRasterPos2dv(double* v) {
            Pointers.glRasterPos2dv(v);
        }
        
        public unsafe static void glRasterPos2dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glRasterPos2dv(v_);
        }
        
        public unsafe static void glRasterPos2f(float x, float y) {
            Pointers.glRasterPos2f(x, y);
        }
        
        public unsafe static void glRasterPos2fv(float* v) {
            Pointers.glRasterPos2fv(v);
        }
        
        public unsafe static void glRasterPos2fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glRasterPos2fv(v_);
        }
        
        public unsafe static void glRasterPos2i(int x, int y) {
            Pointers.glRasterPos2i(x, y);
        }
        
        public unsafe static void glRasterPos2iv(int* v) {
            Pointers.glRasterPos2iv(v);
        }
        
        public unsafe static void glRasterPos2iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glRasterPos2iv(v_);
        }
        
        public unsafe static void glRasterPos2s(short x, short y) {
            Pointers.glRasterPos2s(x, y);
        }
        
        public unsafe static void glRasterPos2sv(short* v) {
            Pointers.glRasterPos2sv(v);
        }
        
        public unsafe static void glRasterPos2sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glRasterPos2sv(v_);
        }
        
        public unsafe static void glRasterPos2xOES(IntPtr x, IntPtr y) {
            Pointers.glRasterPos2xOES(x, y);
        }
        
        public unsafe static void glRasterPos2xvOES(IntPtr* coords) {
            Pointers.glRasterPos2xvOES(coords);
        }
        
        public unsafe static void glRasterPos2xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glRasterPos2xvOES(coords_);
        }
        
        public unsafe static void glRasterPos3d(double x, double y, double z) {
            Pointers.glRasterPos3d(x, y, z);
        }
        
        public unsafe static void glRasterPos3dv(double* v) {
            Pointers.glRasterPos3dv(v);
        }
        
        public unsafe static void glRasterPos3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glRasterPos3dv(v_);
        }
        
        public unsafe static void glRasterPos3f(float x, float y, float z) {
            Pointers.glRasterPos3f(x, y, z);
        }
        
        public unsafe static void glRasterPos3fv(float* v) {
            Pointers.glRasterPos3fv(v);
        }
        
        public unsafe static void glRasterPos3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glRasterPos3fv(v_);
        }
        
        public unsafe static void glRasterPos3i(int x, int y, int z) {
            Pointers.glRasterPos3i(x, y, z);
        }
        
        public unsafe static void glRasterPos3iv(int* v) {
            Pointers.glRasterPos3iv(v);
        }
        
        public unsafe static void glRasterPos3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glRasterPos3iv(v_);
        }
        
        public unsafe static void glRasterPos3s(short x, short y, short z) {
            Pointers.glRasterPos3s(x, y, z);
        }
        
        public unsafe static void glRasterPos3sv(short* v) {
            Pointers.glRasterPos3sv(v);
        }
        
        public unsafe static void glRasterPos3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glRasterPos3sv(v_);
        }
        
        public unsafe static void glRasterPos3xOES(IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glRasterPos3xOES(x, y, z);
        }
        
        public unsafe static void glRasterPos3xvOES(IntPtr* coords) {
            Pointers.glRasterPos3xvOES(coords);
        }
        
        public unsafe static void glRasterPos3xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glRasterPos3xvOES(coords_);
        }
        
        public unsafe static void glRasterPos4d(double x, double y, double z, double w) {
            Pointers.glRasterPos4d(x, y, z, w);
        }
        
        public unsafe static void glRasterPos4dv(double* v) {
            Pointers.glRasterPos4dv(v);
        }
        
        public unsafe static void glRasterPos4dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glRasterPos4dv(v_);
        }
        
        public unsafe static void glRasterPos4f(float x, float y, float z, float w) {
            Pointers.glRasterPos4f(x, y, z, w);
        }
        
        public unsafe static void glRasterPos4fv(float* v) {
            Pointers.glRasterPos4fv(v);
        }
        
        public unsafe static void glRasterPos4fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glRasterPos4fv(v_);
        }
        
        public unsafe static void glRasterPos4i(int x, int y, int z, int w) {
            Pointers.glRasterPos4i(x, y, z, w);
        }
        
        public unsafe static void glRasterPos4iv(int* v) {
            Pointers.glRasterPos4iv(v);
        }
        
        public unsafe static void glRasterPos4iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glRasterPos4iv(v_);
        }
        
        public unsafe static void glRasterPos4s(short x, short y, short z, short w) {
            Pointers.glRasterPos4s(x, y, z, w);
        }
        
        public unsafe static void glRasterPos4sv(short* v) {
            Pointers.glRasterPos4sv(v);
        }
        
        public unsafe static void glRasterPos4sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glRasterPos4sv(v_);
        }
        
        public unsafe static void glRasterPos4xOES(IntPtr x, IntPtr y, IntPtr z, IntPtr w) {
            Pointers.glRasterPos4xOES(x, y, z, w);
        }
        
        public unsafe static void glRasterPos4xvOES(IntPtr* coords) {
            Pointers.glRasterPos4xvOES(coords);
        }
        
        public unsafe static void glRasterPos4xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glRasterPos4xvOES(coords_);
        }
        
        public unsafe static void glRasterSamplesEXT(uint samples, bool fixedsamplelocations) {
            Pointers.glRasterSamplesEXT(samples, fixedsamplelocations);
        }
        
        public unsafe static void glReadBuffer(int src) {
            Pointers.glReadBuffer(src);
        }
        
        public unsafe static void glReadBufferIndexedEXT(int src, int index) {
            Pointers.glReadBufferIndexedEXT(src, index);
        }
        
        public unsafe static void glReadBufferNV(int mode) {
            Pointers.glReadBufferNV(mode);
        }
        
        public unsafe static void glReadInstrumentsSGIX(int marker) {
            Pointers.glReadInstrumentsSGIX(marker);
        }
        
        public unsafe static void glReadPixels(int x, int y, int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glReadPixels(x, y, width, height, format, type, pixels);
        }
        
        public unsafe static void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data) {
            Pointers.glReadnPixels(x, y, width, height, format, type, bufSize, data);
        }
        
        public unsafe static void glReadnPixelsARB(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data) {
            Pointers.glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
        }
        
        public unsafe static void glReadnPixelsEXT(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data) {
            Pointers.glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
        }
        
        public unsafe static void glReadnPixelsKHR(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data) {
            Pointers.glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);
        }
        
        public unsafe static bool glReleaseKeyedMutexWin32EXT(uint memory, ulong key) {
            return Pointers.glReleaseKeyedMutexWin32EXT(memory, key);
        }
        
        public unsafe static void glRectd(double x1, double y1, double x2, double y2) {
            Pointers.glRectd(x1, y1, x2, y2);
        }
        
        public unsafe static void glRectdv(double* v1, double* v2) {
            Pointers.glRectdv(v1, v2);
        }
        
        public unsafe static void glRectdv(double* v1, double[] v2) {
            fixed(double* v2_ = &v2[0])
                Pointers.glRectdv(v1, v2_);
        }
        
        public unsafe static void glRectdv(double[] v1, double* v2) {
            fixed(double* v1_ = &v1[0])
                Pointers.glRectdv(v1_, v2);
        }
        
        public unsafe static void glRectdv(double[] v1, double[] v2) {
            fixed(double* v1_ = &v1[0])
            fixed(double* v2_ = &v2[0])
                Pointers.glRectdv(v1_, v2_);
        }
        
        public unsafe static void glRectf(float x1, float y1, float x2, float y2) {
            Pointers.glRectf(x1, y1, x2, y2);
        }
        
        public unsafe static void glRectfv(float* v1, float* v2) {
            Pointers.glRectfv(v1, v2);
        }
        
        public unsafe static void glRectfv(float* v1, float[] v2) {
            fixed(float* v2_ = &v2[0])
                Pointers.glRectfv(v1, v2_);
        }
        
        public unsafe static void glRectfv(float[] v1, float* v2) {
            fixed(float* v1_ = &v1[0])
                Pointers.glRectfv(v1_, v2);
        }
        
        public unsafe static void glRectfv(float[] v1, float[] v2) {
            fixed(float* v1_ = &v1[0])
            fixed(float* v2_ = &v2[0])
                Pointers.glRectfv(v1_, v2_);
        }
        
        public unsafe static void glRecti(int x1, int y1, int x2, int y2) {
            Pointers.glRecti(x1, y1, x2, y2);
        }
        
        public unsafe static void glRectiv(int* v1, int* v2) {
            Pointers.glRectiv(v1, v2);
        }
        
        public unsafe static void glRectiv(int* v1, int[] v2) {
            fixed(int* v2_ = &v2[0])
                Pointers.glRectiv(v1, v2_);
        }
        
        public unsafe static void glRectiv(int[] v1, int* v2) {
            fixed(int* v1_ = &v1[0])
                Pointers.glRectiv(v1_, v2);
        }
        
        public unsafe static void glRectiv(int[] v1, int[] v2) {
            fixed(int* v1_ = &v1[0])
            fixed(int* v2_ = &v2[0])
                Pointers.glRectiv(v1_, v2_);
        }
        
        public unsafe static void glRects(short x1, short y1, short x2, short y2) {
            Pointers.glRects(x1, y1, x2, y2);
        }
        
        public unsafe static void glRectsv(short* v1, short* v2) {
            Pointers.glRectsv(v1, v2);
        }
        
        public unsafe static void glRectsv(short* v1, short[] v2) {
            fixed(short* v2_ = &v2[0])
                Pointers.glRectsv(v1, v2_);
        }
        
        public unsafe static void glRectsv(short[] v1, short* v2) {
            fixed(short* v1_ = &v1[0])
                Pointers.glRectsv(v1_, v2);
        }
        
        public unsafe static void glRectsv(short[] v1, short[] v2) {
            fixed(short* v1_ = &v1[0])
            fixed(short* v2_ = &v2[0])
                Pointers.glRectsv(v1_, v2_);
        }
        
        public unsafe static void glRectxOES(IntPtr x1, IntPtr y1, IntPtr x2, IntPtr y2) {
            Pointers.glRectxOES(x1, y1, x2, y2);
        }
        
        public unsafe static void glRectxvOES(IntPtr* v1, IntPtr* v2) {
            Pointers.glRectxvOES(v1, v2);
        }
        
        public unsafe static void glRectxvOES(IntPtr* v1, IntPtr[] v2) {
            fixed(IntPtr* v2_ = &v2[0])
                Pointers.glRectxvOES(v1, v2_);
        }
        
        public unsafe static void glRectxvOES(IntPtr[] v1, IntPtr* v2) {
            fixed(IntPtr* v1_ = &v1[0])
                Pointers.glRectxvOES(v1_, v2);
        }
        
        public unsafe static void glRectxvOES(IntPtr[] v1, IntPtr[] v2) {
            fixed(IntPtr* v1_ = &v1[0])
            fixed(IntPtr* v2_ = &v2[0])
                Pointers.glRectxvOES(v1_, v2_);
        }
        
        public unsafe static void glReferencePlaneSGIX(double* equation) {
            Pointers.glReferencePlaneSGIX(equation);
        }
        
        public unsafe static void glReferencePlaneSGIX(double[] equation) {
            fixed(double* equation_ = &equation[0])
                Pointers.glReferencePlaneSGIX(equation_);
        }
        
        public unsafe static void glReleaseShaderCompiler() {
            Pointers.glReleaseShaderCompiler();
        }
        
        public unsafe static void glRenderGpuMaskNV(uint mask) {
            Pointers.glRenderGpuMaskNV(mask);
        }
        
        public unsafe static int glRenderMode(int mode) {
            return Pointers.glRenderMode(mode);
        }
        
        public unsafe static void glRenderbufferStorage(int target, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorage(target, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageEXT(int target, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageEXT(target, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisampleANGLE(int target, int samples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisampleIMG(int target, int samples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageMultisampleNV(int target, int samples, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);
        }
        
        public unsafe static void glRenderbufferStorageOES(int target, int internalformat, int width, int height) {
            Pointers.glRenderbufferStorageOES(target, internalformat, width, height);
        }
        
        public unsafe static void glReplacementCodePointerSUN(int type, int stride, IntPtr* pointer) {
            Pointers.glReplacementCodePointerSUN(type, stride, pointer);
        }
        
        public unsafe static void glReplacementCodePointerSUN(int type, int stride, IntPtr[] pointer) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glReplacementCodePointerSUN(type, stride, pointer_);
        }
        
        public unsafe static void glReplacementCodeubSUN(byte code) {
            Pointers.glReplacementCodeubSUN(code);
        }
        
        public unsafe static void glReplacementCodeubvSUN(byte* code) {
            Pointers.glReplacementCodeubvSUN(code);
        }
        
        public unsafe static void glReplacementCodeubvSUN(byte[] code) {
            fixed(byte* code_ = &code[0])
                Pointers.glReplacementCodeubvSUN(code_);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z) {
            Pointers.glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v) {
            Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float[] c, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float[] c, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(out uint rc, float* c, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc_, c, v);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(out uint rc, float* c, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc_, c, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(out uint rc, float[] c, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc_, c_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor3fVertex3fvSUN(out uint rc, float[] c, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor3fVertex3fvSUN(rc_, c_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v) {
            Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float[] c, float* n, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float[] c, float* n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float[] c, float[] n, float* v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float[] c, float[] n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float* c, float* n, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c, n, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float* c, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float* c, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float* c, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float[] c, float* n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float[] c, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float[] c, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(out uint rc, float[] c, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_, c_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z) {
            Pointers.glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v) {
            Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte[] c, float* v) {
            fixed(byte* c_ = &c[0])
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte[] c, float[] v) {
            fixed(byte* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(out uint rc, byte* c, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc_, c, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(out uint rc, byte* c, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc_, c, v_);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(out uint rc, byte[] c, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(byte* c_ = &c[0])
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc_, c_, v);
        }
        
        public unsafe static void glReplacementCodeuiColor4ubVertex3fvSUN(out uint rc, byte[] c, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(byte* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiColor4ubVertex3fvSUN(rc_, c_, v_);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v) {
            Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(out uint rc, float* n, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(out uint rc, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(out uint rc, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiNormal3fVertex3fvSUN(out uint rc, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiNormal3fVertex3fvSUN(rc_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiSUN(uint code) {
            Pointers.glReplacementCodeuiSUN(code);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v) {
            Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float[] c, float* n, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float[] c, float* n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float[] c, float[] n, float* v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float[] c, float[] n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float* c, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float* c, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float* c, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float* c, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float[] c, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float[] c, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float[] c, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float[] tc, float[] c, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_, c_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float* c, float* n, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float* c, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float* c, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float* c, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float[] c, float* n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float[] c, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float[] c, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float* tc, float[] c, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc, c_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float* c, float* n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float* c, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float* c, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float* c, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float[] c, float* n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float[] c, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float[] c, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(out uint rc, float[] tc, float[] c, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_, tc_, c_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v) {
            Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float[] tc, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float[] tc, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float[] tc, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float[] tc, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float* tc, float* n, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float* tc, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float* tc, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float* tc, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float[] tc, float* n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc_, n, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float[] tc, float* n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc_, n, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float[] tc, float[] n, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc_, n_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(out uint rc, float[] tc, float[] n, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_, tc_, n_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z) {
            Pointers.glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v) {
            Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float[] tc, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float[] tc, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(out uint rc, float* tc, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_, tc, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(out uint rc, float* tc, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_, tc, v_);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(out uint rc, float[] tc, float* v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_, tc_, v);
        }
        
        public unsafe static void glReplacementCodeuiTexCoord2fVertex3fvSUN(out uint rc, float[] tc, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_, tc_, v_);
        }
        
        public unsafe static void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z) {
            Pointers.glReplacementCodeuiVertex3fSUN(rc, x, y, z);
        }
        
        public unsafe static void glReplacementCodeuiVertex3fvSUN(uint* rc, float* v) {
            Pointers.glReplacementCodeuiVertex3fvSUN(rc, v);
        }
        
        public unsafe static void glReplacementCodeuiVertex3fvSUN(uint* rc, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiVertex3fvSUN(rc, v_);
        }
        
        public unsafe static void glReplacementCodeuiVertex3fvSUN(out uint rc, float* v) {
            fixed(uint* rc_ = &rc)
                Pointers.glReplacementCodeuiVertex3fvSUN(rc_, v);
        }
        
        public unsafe static void glReplacementCodeuiVertex3fvSUN(out uint rc, float[] v) {
            fixed(uint* rc_ = &rc)
            fixed(float* v_ = &v[0])
                Pointers.glReplacementCodeuiVertex3fvSUN(rc_, v_);
        }
        
        public unsafe static void glReplacementCodeuivSUN(uint* code) {
            Pointers.glReplacementCodeuivSUN(code);
        }
        
        public unsafe static void glReplacementCodeuivSUN(uint[] code) {
            fixed(uint* code_ = &code[0])
                Pointers.glReplacementCodeuivSUN(code_);
        }
        
        public unsafe static void glReplacementCodeusSUN(ushort code) {
            Pointers.glReplacementCodeusSUN(code);
        }
        
        public unsafe static void glReplacementCodeusvSUN(ushort* code) {
            Pointers.glReplacementCodeusvSUN(code);
        }
        
        public unsafe static void glReplacementCodeusvSUN(ushort[] code) {
            fixed(ushort* code_ = &code[0])
                Pointers.glReplacementCodeusvSUN(code_);
        }
        
        public unsafe static void glRequestResidentProgramsNV(int n, uint* programs) {
            Pointers.glRequestResidentProgramsNV(n, programs);
        }
        
        public unsafe static void glRequestResidentProgramsNV(int n, uint[] programs) {
            fixed(uint* programs_ = &programs[0])
                Pointers.glRequestResidentProgramsNV(n, programs_);
        }
        
        public unsafe static void glResetHistogram(int target) {
            Pointers.glResetHistogram(target);
        }
        
        public unsafe static void glResetHistogramEXT(int target) {
            Pointers.glResetHistogramEXT(target);
        }
        
        public unsafe static void glResetMinmax(int target) {
            Pointers.glResetMinmax(target);
        }
        
        public unsafe static void glResetMinmaxEXT(int target) {
            Pointers.glResetMinmaxEXT(target);
        }
        
        public unsafe static void glResizeBuffersMESA() {
            Pointers.glResizeBuffersMESA();
        }
        
        public unsafe static void glResolveDepthValuesNV() {
            Pointers.glResolveDepthValuesNV();
        }
        
        public unsafe static void glResolveMultisampleFramebufferAPPLE() {
            Pointers.glResolveMultisampleFramebufferAPPLE();
        }
        
        public unsafe static void glResumeTransformFeedback() {
            Pointers.glResumeTransformFeedback();
        }
        
        public unsafe static void glResumeTransformFeedbackNV() {
            Pointers.glResumeTransformFeedbackNV();
        }
        
        public unsafe static void glRotated(double angle, double x, double y, double z) {
            Pointers.glRotated(angle, x, y, z);
        }
        
        public unsafe static void glRotatef(float angle, float x, float y, float z) {
            Pointers.glRotatef(angle, x, y, z);
        }
        
        public unsafe static void glRotatex(IntPtr angle, IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glRotatex(angle, x, y, z);
        }
        
        public unsafe static void glRotatexOES(IntPtr angle, IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glRotatexOES(angle, x, y, z);
        }
        
        public unsafe static void glSampleCoverage(float value, bool invert) {
            Pointers.glSampleCoverage(value, invert);
        }
        
        public unsafe static void glSampleCoverageARB(float value, bool invert) {
            Pointers.glSampleCoverageARB(value, invert);
        }
        
        public unsafe static void glSampleCoveragex(int value, bool invert) {
            Pointers.glSampleCoveragex(value, invert);
        }
        
        public unsafe static void glSampleCoveragexOES(int value, bool invert) {
            Pointers.glSampleCoveragexOES(value, invert);
        }
        
        public unsafe static void glSampleMapATI(uint dst, uint interp, int swizzle) {
            Pointers.glSampleMapATI(dst, interp, swizzle);
        }
        
        public unsafe static void glSampleMaskEXT(float value, bool invert) {
            Pointers.glSampleMaskEXT(value, invert);
        }
        
        public unsafe static void glSampleMaskIndexedNV(uint index, uint mask) {
            Pointers.glSampleMaskIndexedNV(index, mask);
        }
        
        public unsafe static void glSampleMaskSGIS(float value, bool invert) {
            Pointers.glSampleMaskSGIS(value, invert);
        }
        
        public unsafe static void glSampleMaski(uint maskNumber, uint mask) {
            Pointers.glSampleMaski(maskNumber, mask);
        }
        
        public unsafe static void glSamplePatternEXT(int pattern) {
            Pointers.glSamplePatternEXT(pattern);
        }
        
        public unsafe static void glSamplePatternSGIS(int pattern) {
            Pointers.glSamplePatternSGIS(pattern);
        }
        
        public unsafe static void glSamplerParameterIiv(uint sampler, int pname, int* param) {
            Pointers.glSamplerParameterIiv(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterIiv(uint sampler, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glSamplerParameterIiv(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameterIivEXT(uint sampler, int pname, int* param) {
            Pointers.glSamplerParameterIivEXT(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterIivEXT(uint sampler, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glSamplerParameterIivEXT(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameterIivOES(uint sampler, int pname, int* param) {
            Pointers.glSamplerParameterIivOES(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterIivOES(uint sampler, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glSamplerParameterIivOES(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameterIuiv(uint sampler, int pname, uint* param) {
            Pointers.glSamplerParameterIuiv(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterIuiv(uint sampler, int pname, uint[] param) {
            fixed(uint* param_ = &param[0])
                Pointers.glSamplerParameterIuiv(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameterIuivEXT(uint sampler, int pname, uint* param) {
            Pointers.glSamplerParameterIuivEXT(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterIuivEXT(uint sampler, int pname, uint[] param) {
            fixed(uint* param_ = &param[0])
                Pointers.glSamplerParameterIuivEXT(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameterIuivOES(uint sampler, int pname, uint* param) {
            Pointers.glSamplerParameterIuivOES(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterIuivOES(uint sampler, int pname, uint[] param) {
            fixed(uint* param_ = &param[0])
                Pointers.glSamplerParameterIuivOES(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameterf(uint sampler, int pname, float param) {
            Pointers.glSamplerParameterf(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterfv(uint sampler, int pname, float* param) {
            Pointers.glSamplerParameterfv(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameterfv(uint sampler, int pname, float[] param) {
            fixed(float* param_ = &param[0])
                Pointers.glSamplerParameterfv(sampler, pname, param_);
        }
        
        public unsafe static void glSamplerParameteri(uint sampler, int pname, int param) {
            Pointers.glSamplerParameteri(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameteriv(uint sampler, int pname, int* param) {
            Pointers.glSamplerParameteriv(sampler, pname, param);
        }
        
        public unsafe static void glSamplerParameteriv(uint sampler, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glSamplerParameteriv(sampler, pname, param_);
        }
        
        public unsafe static void glScaled(double x, double y, double z) {
            Pointers.glScaled(x, y, z);
        }
        
        public unsafe static void glScalef(float x, float y, float z) {
            Pointers.glScalef(x, y, z);
        }
        
        public unsafe static void glScalex(IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glScalex(x, y, z);
        }
        
        public unsafe static void glScalexOES(IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glScalexOES(x, y, z);
        }
        
        public unsafe static void glScissor(int x, int y, int width, int height) {
            Pointers.glScissor(x, y, width, height);
        }
        
        public unsafe static void glScissorArrayv(uint first, int count, int* v) {
            Pointers.glScissorArrayv(first, count, v);
        }
        
        public unsafe static void glScissorArrayv(uint first, int count, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glScissorArrayv(first, count, v_);
        }
        
        public unsafe static void glScissorArrayvNV(uint first, int count, int* v) {
            Pointers.glScissorArrayvNV(first, count, v);
        }
        
        public unsafe static void glScissorArrayvNV(uint first, int count, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glScissorArrayvNV(first, count, v_);
        }
        
        public unsafe static void glScissorArrayvOES(uint first, int count, int* v) {
            Pointers.glScissorArrayvOES(first, count, v);
        }
        
        public unsafe static void glScissorArrayvOES(uint first, int count, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glScissorArrayvOES(first, count, v_);
        }
        
        public unsafe static void glScissorIndexed(uint index, int left, int bottom, int width, int height) {
            Pointers.glScissorIndexed(index, left, bottom, width, height);
        }
        
        public unsafe static void glScissorIndexedNV(uint index, int left, int bottom, int width, int height) {
            Pointers.glScissorIndexedNV(index, left, bottom, width, height);
        }
        
        public unsafe static void glScissorIndexedOES(uint index, int left, int bottom, int width, int height) {
            Pointers.glScissorIndexedOES(index, left, bottom, width, height);
        }
        
        public unsafe static void glScissorIndexedv(uint index, int* v) {
            Pointers.glScissorIndexedv(index, v);
        }
        
        public unsafe static void glScissorIndexedv(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glScissorIndexedv(index, v_);
        }
        
        public unsafe static void glScissorIndexedvNV(uint index, int* v) {
            Pointers.glScissorIndexedvNV(index, v);
        }
        
        public unsafe static void glScissorIndexedvNV(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glScissorIndexedvNV(index, v_);
        }
        
        public unsafe static void glScissorIndexedvOES(uint index, int* v) {
            Pointers.glScissorIndexedvOES(index, v);
        }
        
        public unsafe static void glScissorIndexedvOES(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glScissorIndexedvOES(index, v_);
        }
        
        public unsafe static void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue) {
            Pointers.glSecondaryColor3b(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue) {
            Pointers.glSecondaryColor3bEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3bv(sbyte* v) {
            Pointers.glSecondaryColor3bv(v);
        }
        
        public unsafe static void glSecondaryColor3bv(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glSecondaryColor3bv(v_);
        }
        
        public unsafe static void glSecondaryColor3bvEXT(sbyte* v) {
            Pointers.glSecondaryColor3bvEXT(v);
        }
        
        public unsafe static void glSecondaryColor3bvEXT(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glSecondaryColor3bvEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3d(double red, double green, double blue) {
            Pointers.glSecondaryColor3d(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3dEXT(double red, double green, double blue) {
            Pointers.glSecondaryColor3dEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3dv(double* v) {
            Pointers.glSecondaryColor3dv(v);
        }
        
        public unsafe static void glSecondaryColor3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glSecondaryColor3dv(v_);
        }
        
        public unsafe static void glSecondaryColor3dvEXT(double* v) {
            Pointers.glSecondaryColor3dvEXT(v);
        }
        
        public unsafe static void glSecondaryColor3dvEXT(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glSecondaryColor3dvEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3f(float red, float green, float blue) {
            Pointers.glSecondaryColor3f(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3fEXT(float red, float green, float blue) {
            Pointers.glSecondaryColor3fEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3fv(float* v) {
            Pointers.glSecondaryColor3fv(v);
        }
        
        public unsafe static void glSecondaryColor3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glSecondaryColor3fv(v_);
        }
        
        public unsafe static void glSecondaryColor3fvEXT(float* v) {
            Pointers.glSecondaryColor3fvEXT(v);
        }
        
        public unsafe static void glSecondaryColor3fvEXT(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glSecondaryColor3fvEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3hNV(short red, short green, short blue) {
            Pointers.glSecondaryColor3hNV(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3hvNV(short* v) {
            Pointers.glSecondaryColor3hvNV(v);
        }
        
        public unsafe static void glSecondaryColor3hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glSecondaryColor3hvNV(v_);
        }
        
        public unsafe static void glSecondaryColor3i(int red, int green, int blue) {
            Pointers.glSecondaryColor3i(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3iEXT(int red, int green, int blue) {
            Pointers.glSecondaryColor3iEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3iv(int* v) {
            Pointers.glSecondaryColor3iv(v);
        }
        
        public unsafe static void glSecondaryColor3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glSecondaryColor3iv(v_);
        }
        
        public unsafe static void glSecondaryColor3ivEXT(int* v) {
            Pointers.glSecondaryColor3ivEXT(v);
        }
        
        public unsafe static void glSecondaryColor3ivEXT(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glSecondaryColor3ivEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3s(short red, short green, short blue) {
            Pointers.glSecondaryColor3s(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3sEXT(short red, short green, short blue) {
            Pointers.glSecondaryColor3sEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3sv(short* v) {
            Pointers.glSecondaryColor3sv(v);
        }
        
        public unsafe static void glSecondaryColor3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glSecondaryColor3sv(v_);
        }
        
        public unsafe static void glSecondaryColor3svEXT(short* v) {
            Pointers.glSecondaryColor3svEXT(v);
        }
        
        public unsafe static void glSecondaryColor3svEXT(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glSecondaryColor3svEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3ub(byte red, byte green, byte blue) {
            Pointers.glSecondaryColor3ub(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3ubEXT(byte red, byte green, byte blue) {
            Pointers.glSecondaryColor3ubEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3ubv(byte* v) {
            Pointers.glSecondaryColor3ubv(v);
        }
        
        public unsafe static void glSecondaryColor3ubv(byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glSecondaryColor3ubv(v_);
        }
        
        public unsafe static void glSecondaryColor3ubvEXT(byte* v) {
            Pointers.glSecondaryColor3ubvEXT(v);
        }
        
        public unsafe static void glSecondaryColor3ubvEXT(byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glSecondaryColor3ubvEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3ui(uint red, uint green, uint blue) {
            Pointers.glSecondaryColor3ui(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3uiEXT(uint red, uint green, uint blue) {
            Pointers.glSecondaryColor3uiEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3uiv(uint* v) {
            Pointers.glSecondaryColor3uiv(v);
        }
        
        public unsafe static void glSecondaryColor3uiv(uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glSecondaryColor3uiv(v_);
        }
        
        public unsafe static void glSecondaryColor3uivEXT(uint* v) {
            Pointers.glSecondaryColor3uivEXT(v);
        }
        
        public unsafe static void glSecondaryColor3uivEXT(uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glSecondaryColor3uivEXT(v_);
        }
        
        public unsafe static void glSecondaryColor3us(ushort red, ushort green, ushort blue) {
            Pointers.glSecondaryColor3us(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue) {
            Pointers.glSecondaryColor3usEXT(red, green, blue);
        }
        
        public unsafe static void glSecondaryColor3usv(ushort* v) {
            Pointers.glSecondaryColor3usv(v);
        }
        
        public unsafe static void glSecondaryColor3usv(ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glSecondaryColor3usv(v_);
        }
        
        public unsafe static void glSecondaryColor3usvEXT(ushort* v) {
            Pointers.glSecondaryColor3usvEXT(v);
        }
        
        public unsafe static void glSecondaryColor3usvEXT(ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glSecondaryColor3usvEXT(v_);
        }
        
        public unsafe static void glSecondaryColorFormatNV(int size, int type, int stride) {
            Pointers.glSecondaryColorFormatNV(size, type, stride);
        }
        
        public unsafe static void glSecondaryColorP3ui(int type, uint color) {
            Pointers.glSecondaryColorP3ui(type, color);
        }
        
        public unsafe static void glSecondaryColorP3uiv(int type, uint* color) {
            Pointers.glSecondaryColorP3uiv(type, color);
        }
        
        public unsafe static void glSecondaryColorP3uiv(int type, out uint color) {
            fixed(uint* color_ = &color)
                Pointers.glSecondaryColorP3uiv(type, color_);
        }
        
        public unsafe static void glSecondaryColorPointer(int size, int type, int stride, IntPtr pointer) {
            Pointers.glSecondaryColorPointer(size, type, stride, pointer);
        }
        
        public unsafe static void glSecondaryColorPointerEXT(int size, int type, int stride, IntPtr pointer) {
            Pointers.glSecondaryColorPointerEXT(size, type, stride, pointer);
        }
        
        public unsafe static void glSecondaryColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glSecondaryColorPointerListIBM(int size, int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glSecondaryColorPointerListIBM(size, type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glSelectBuffer(int size, uint* buffer) {
            Pointers.glSelectBuffer(size, buffer);
        }
        
        public unsafe static void glSelectBuffer(int size, uint[] buffer) {
            fixed(uint* buffer_ = &buffer[0])
                Pointers.glSelectBuffer(size, buffer_);
        }
        
        public unsafe static void glSelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint* counterList) {
            Pointers.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
        }
        
        public unsafe static void glSelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint[] counterList) {
            fixed(uint* counterList_ = &counterList[0])
                Pointers.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_);
        }
        
        public unsafe static void glSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* _params) {
            Pointers.glSemaphoreParameterui64vEXT(semaphore, pname, _params);
        }
        
        public unsafe static void glSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong[] _params) {
            fixed(ulong* _params_ = &_params[0])
                Pointers.glSemaphoreParameterui64vEXT(semaphore, pname, _params_);
        }
        
        public unsafe static void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column) {
            Pointers.glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
        }
        
        public unsafe static void glSeparableFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column) {
            Pointers.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
        }
        
        public unsafe static void glSetFenceAPPLE(uint fence) {
            Pointers.glSetFenceAPPLE(fence);
        }
        
        public unsafe static void glSetFenceNV(uint fence, int condition) {
            Pointers.glSetFenceNV(fence, condition);
        }
        
        public unsafe static void glSetFragmentShaderConstantATI(uint dst, float* value) {
            Pointers.glSetFragmentShaderConstantATI(dst, value);
        }
        
        public unsafe static void glSetFragmentShaderConstantATI(uint dst, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glSetFragmentShaderConstantATI(dst, value_);
        }
        
        public unsafe static void glSetInvariantEXT(uint id, int type, IntPtr addr) {
            Pointers.glSetInvariantEXT(id, type, addr);
        }
        
        public unsafe static void glSetLocalConstantEXT(uint id, int type, IntPtr addr) {
            Pointers.glSetLocalConstantEXT(id, type, addr);
        }
        
        public unsafe static void glSetMultisamplefvAMD(int pname, uint index, float* val) {
            Pointers.glSetMultisamplefvAMD(pname, index, val);
        }
        
        public unsafe static void glSetMultisamplefvAMD(int pname, uint index, float[] val) {
            fixed(float* val_ = &val[0])
                Pointers.glSetMultisamplefvAMD(pname, index, val_);
        }
        
        public unsafe static void glShadeModel(int mode) {
            Pointers.glShadeModel(mode);
        }
        
        public unsafe static void glShaderBinary(int count, uint* shaders, int binaryformat, IntPtr binary, int length) {
            Pointers.glShaderBinary(count, shaders, binaryformat, binary, length);
        }
        
        public unsafe static void glShaderBinary(int count, uint[] shaders, int binaryformat, IntPtr binary, int length) {
            fixed(uint* shaders_ = &shaders[0])
                Pointers.glShaderBinary(count, shaders_, binaryformat, binary, length);
        }
        
        public unsafe static void glShaderOp1EXT(int op, uint res, uint arg1) {
            Pointers.glShaderOp1EXT(op, res, arg1);
        }
        
        public unsafe static void glShaderOp2EXT(int op, uint res, uint arg1, uint arg2) {
            Pointers.glShaderOp2EXT(op, res, arg1, arg2);
        }
        
        public unsafe static void glShaderOp3EXT(int op, uint res, uint arg1, uint arg2, uint arg3) {
            Pointers.glShaderOp3EXT(op, res, arg1, arg2, arg3);
        }
        
        public unsafe static void glShaderSource(uint shader, int count, string[] _string, int* length) {
            Pointers.glShaderSource(shader, count, _string, length);
        }
        
        public unsafe static void glShaderSource(uint shader, int count, string[] _string, int[] length) {
            fixed(int* length_ = &length[0])
                Pointers.glShaderSource(shader, count, _string, length_);
        }
        
        public unsafe static void glShaderSourceARB(uint shaderObj, int count, string[] _string, int* length) {
            Pointers.glShaderSourceARB(shaderObj, count, _string, length);
        }
        
        public unsafe static void glShaderSourceARB(uint shaderObj, int count, string[] _string, int[] length) {
            fixed(int* length_ = &length[0])
                Pointers.glShaderSourceARB(shaderObj, count, _string, length_);
        }
        
        public unsafe static void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding) {
            Pointers.glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
        }
        
        public unsafe static void glSharpenTexFuncSGIS(int target, int n, float* points) {
            Pointers.glSharpenTexFuncSGIS(target, n, points);
        }
        
        public unsafe static void glSharpenTexFuncSGIS(int target, int n, float[] points) {
            fixed(float* points_ = &points[0])
                Pointers.glSharpenTexFuncSGIS(target, n, points_);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* dstLayouts) {
            Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint[] dstLayouts) {
            fixed(uint* dstLayouts_ = &dstLayouts[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts_);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint[] textures, uint* dstLayouts) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures_, dstLayouts);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint[] textures, uint[] dstLayouts) {
            fixed(uint* textures_ = &textures[0])
            fixed(uint* dstLayouts_ = &dstLayouts[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures_, dstLayouts_);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint* textures, uint* dstLayouts) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures, dstLayouts);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint* textures, uint[] dstLayouts) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* dstLayouts_ = &dstLayouts[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures, dstLayouts_);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, uint* dstLayouts) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* textures_ = &textures[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures_, dstLayouts);
        }
        
        public unsafe static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, uint[] dstLayouts) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* textures_ = &textures[0])
            fixed(uint* dstLayouts_ = &dstLayouts[0])
                Pointers.glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures_, dstLayouts_);
        }
        
        public unsafe static void glSpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue) {
            Pointers.glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }
        
        public unsafe static void glSpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint[] pConstantValue) {
            fixed(uint* pConstantValue_ = &pConstantValue[0])
                Pointers.glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue_);
        }
        
        public unsafe static void glSpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint* pConstantValue) {
            fixed(uint* pConstantIndex_ = &pConstantIndex[0])
                Pointers.glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex_, pConstantValue);
        }
        
        public unsafe static void glSpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue) {
            fixed(uint* pConstantIndex_ = &pConstantIndex[0])
            fixed(uint* pConstantValue_ = &pConstantValue[0])
                Pointers.glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex_, pConstantValue_);
        }
        
        public unsafe static void glSpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue) {
            Pointers.glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }
        
        public unsafe static void glSpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint[] pConstantValue) {
            fixed(uint* pConstantValue_ = &pConstantValue[0])
                Pointers.glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue_);
        }
        
        public unsafe static void glSpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint* pConstantValue) {
            fixed(uint* pConstantIndex_ = &pConstantIndex[0])
                Pointers.glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex_, pConstantValue);
        }
        
        public unsafe static void glSpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue) {
            fixed(uint* pConstantIndex_ = &pConstantIndex[0])
            fixed(uint* pConstantValue_ = &pConstantValue[0])
                Pointers.glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex_, pConstantValue_);
        }
        
        public unsafe static void glSpriteParameterfSGIX(int pname, float param) {
            Pointers.glSpriteParameterfSGIX(pname, param);
        }
        
        public unsafe static void glSpriteParameterfvSGIX(int pname, float* _params) {
            Pointers.glSpriteParameterfvSGIX(pname, _params);
        }
        
        public unsafe static void glSpriteParameterfvSGIX(int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glSpriteParameterfvSGIX(pname, _params_);
        }
        
        public unsafe static void glSpriteParameteriSGIX(int pname, int param) {
            Pointers.glSpriteParameteriSGIX(pname, param);
        }
        
        public unsafe static void glSpriteParameterivSGIX(int pname, int* _params) {
            Pointers.glSpriteParameterivSGIX(pname, _params);
        }
        
        public unsafe static void glSpriteParameterivSGIX(int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glSpriteParameterivSGIX(pname, _params_);
        }
        
        public unsafe static void glStartInstrumentsSGIX() {
            Pointers.glStartInstrumentsSGIX();
        }
        
        public unsafe static void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask) {
            Pointers.glStartTilingQCOM(x, y, width, height, preserveMask);
        }
        
        public unsafe static void glStartTilingQCOM(uint x, uint y, uint width, uint height, Enums.BufferBitQCOM preserveMask) {
            Pointers.glStartTilingQCOM(x, y, width, height, (uint)preserveMask);
        }
        
        public unsafe static void glStateCaptureNV(uint state, int mode) {
            Pointers.glStateCaptureNV(state, mode);
        }
        
        public unsafe static void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag) {
            Pointers.glStencilClearTagEXT(stencilTagBits, stencilClearTag);
        }
        
        public unsafe static void glStencilFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int transformType, float* transformValues) {
            Pointers.glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        }
        
        public unsafe static void glStencilFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues_);
        }
        
        public unsafe static void glStencilFillPathNV(uint path, int fillMode, uint mask) {
            Pointers.glStencilFillPathNV(path, fillMode, mask);
        }
        
        public unsafe static void glStencilFunc(int func, int _ref, uint mask) {
            Pointers.glStencilFunc(func, _ref, mask);
        }
        
        public unsafe static void glStencilFuncSeparate(int face, int func, int _ref, uint mask) {
            Pointers.glStencilFuncSeparate(face, func, _ref, mask);
        }
        
        public unsafe static void glStencilFuncSeparateATI(int frontfunc, int backfunc, int _ref, uint mask) {
            Pointers.glStencilFuncSeparateATI(frontfunc, backfunc, _ref, mask);
        }
        
        public unsafe static void glStencilMask(uint mask) {
            Pointers.glStencilMask(mask);
        }
        
        public unsafe static void glStencilMaskSeparate(int face, uint mask) {
            Pointers.glStencilMaskSeparate(face, mask);
        }
        
        public unsafe static void glStencilOp(int fail, int zfail, int zpass) {
            Pointers.glStencilOp(fail, zfail, zpass);
        }
        
        public unsafe static void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass) {
            Pointers.glStencilOpSeparate(face, sfail, dpfail, dppass);
        }
        
        public unsafe static void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass) {
            Pointers.glStencilOpSeparateATI(face, sfail, dpfail, dppass);
        }
        
        public unsafe static void glStencilOpValueAMD(int face, uint value) {
            Pointers.glStencilOpValueAMD(face, value);
        }
        
        public unsafe static void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int transformType, float* transformValues) {
            Pointers.glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        }
        
        public unsafe static void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues_);
        }
        
        public unsafe static void glStencilStrokePathNV(uint path, int reference, uint mask) {
            Pointers.glStencilStrokePathNV(path, reference, mask);
        }
        
        public unsafe static void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float* transformValues) {
            Pointers.glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        }
        
        public unsafe static void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues_);
        }
        
        public unsafe static void glStencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode) {
            Pointers.glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
        }
        
        public unsafe static void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float* transformValues) {
            Pointers.glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        }
        
        public unsafe static void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues_);
        }
        
        public unsafe static void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode) {
            Pointers.glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
        }
        
        public unsafe static void glStopInstrumentsSGIX(int marker) {
            Pointers.glStopInstrumentsSGIX(marker);
        }
        
        public unsafe static void glStringMarkerGREMEDY(int len, IntPtr _string) {
            Pointers.glStringMarkerGREMEDY(len, _string);
        }
        
        public unsafe static void glSubpixelPrecisionBiasNV(uint xbits, uint ybits) {
            Pointers.glSubpixelPrecisionBiasNV(xbits, ybits);
        }
        
        public unsafe static void glSwizzleEXT(uint res, uint _in, int outX, int outY, int outZ, int outW) {
            Pointers.glSwizzleEXT(res, _in, outX, outY, outZ, outW);
        }
        
        public unsafe static void glSyncTextureINTEL(uint texture) {
            Pointers.glSyncTextureINTEL(texture);
        }
        
        public unsafe static void glTagSampleBufferSGIX() {
            Pointers.glTagSampleBufferSGIX();
        }
        
        public unsafe static void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz) {
            Pointers.glTangent3bEXT(tx, ty, tz);
        }
        
        public unsafe static void glTangent3bvEXT(sbyte* v) {
            Pointers.glTangent3bvEXT(v);
        }
        
        public unsafe static void glTangent3bvEXT(sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glTangent3bvEXT(v_);
        }
        
        public unsafe static void glTangent3dEXT(double tx, double ty, double tz) {
            Pointers.glTangent3dEXT(tx, ty, tz);
        }
        
        public unsafe static void glTangent3dvEXT(double* v) {
            Pointers.glTangent3dvEXT(v);
        }
        
        public unsafe static void glTangent3dvEXT(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glTangent3dvEXT(v_);
        }
        
        public unsafe static void glTangent3fEXT(float tx, float ty, float tz) {
            Pointers.glTangent3fEXT(tx, ty, tz);
        }
        
        public unsafe static void glTangent3fvEXT(float* v) {
            Pointers.glTangent3fvEXT(v);
        }
        
        public unsafe static void glTangent3fvEXT(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTangent3fvEXT(v_);
        }
        
        public unsafe static void glTangent3iEXT(int tx, int ty, int tz) {
            Pointers.glTangent3iEXT(tx, ty, tz);
        }
        
        public unsafe static void glTangent3ivEXT(int* v) {
            Pointers.glTangent3ivEXT(v);
        }
        
        public unsafe static void glTangent3ivEXT(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glTangent3ivEXT(v_);
        }
        
        public unsafe static void glTangent3sEXT(short tx, short ty, short tz) {
            Pointers.glTangent3sEXT(tx, ty, tz);
        }
        
        public unsafe static void glTangent3svEXT(short* v) {
            Pointers.glTangent3svEXT(v);
        }
        
        public unsafe static void glTangent3svEXT(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTangent3svEXT(v_);
        }
        
        public unsafe static void glTangentPointerEXT(int type, int stride, IntPtr pointer) {
            Pointers.glTangentPointerEXT(type, stride, pointer);
        }
        
        public unsafe static void glTbufferMask3DFX(uint mask) {
            Pointers.glTbufferMask3DFX(mask);
        }
        
        public unsafe static void glTessellationFactorAMD(float factor) {
            Pointers.glTessellationFactorAMD(factor);
        }
        
        public unsafe static void glTessellationModeAMD(int mode) {
            Pointers.glTessellationModeAMD(mode);
        }
        
        public unsafe static bool glTestFenceAPPLE(uint fence) {
            return Pointers.glTestFenceAPPLE(fence);
        }
        
        public unsafe static bool glTestFenceNV(uint fence) {
            return Pointers.glTestFenceNV(fence);
        }
        
        public unsafe static bool glTestObjectAPPLE(int _object, uint name) {
            return Pointers.glTestObjectAPPLE(_object, name);
        }
        
        public unsafe static void glTexBuffer(int target, int internalformat, uint buffer) {
            Pointers.glTexBuffer(target, internalformat, buffer);
        }
        
        public unsafe static void glTexBufferARB(int target, int internalformat, uint buffer) {
            Pointers.glTexBufferARB(target, internalformat, buffer);
        }
        
        public unsafe static void glTexBufferEXT(int target, int internalformat, uint buffer) {
            Pointers.glTexBufferEXT(target, internalformat, buffer);
        }
        
        public unsafe static void glTexBufferOES(int target, int internalformat, uint buffer) {
            Pointers.glTexBufferOES(target, internalformat, buffer);
        }
        
        public unsafe static void glTexBufferRange(int target, int internalformat, uint buffer, uint offset, uint size) {
            Pointers.glTexBufferRange(target, internalformat, buffer, offset, size);
        }
        
        public unsafe static void glTexBufferRangeEXT(int target, int internalformat, uint buffer, uint offset, uint size) {
            Pointers.glTexBufferRangeEXT(target, internalformat, buffer, offset, size);
        }
        
        public unsafe static void glTexBufferRangeOES(int target, int internalformat, uint buffer, uint offset, uint size) {
            Pointers.glTexBufferRangeOES(target, internalformat, buffer, offset, size);
        }
        
        public unsafe static void glTexBumpParameterfvATI(int pname, float* param) {
            Pointers.glTexBumpParameterfvATI(pname, param);
        }
        
        public unsafe static void glTexBumpParameterfvATI(int pname, float[] param) {
            fixed(float* param_ = &param[0])
                Pointers.glTexBumpParameterfvATI(pname, param_);
        }
        
        public unsafe static void glTexBumpParameterivATI(int pname, int* param) {
            Pointers.glTexBumpParameterivATI(pname, param);
        }
        
        public unsafe static void glTexBumpParameterivATI(int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glTexBumpParameterivATI(pname, param_);
        }
        
        public unsafe static void glTexCoord1bOES(sbyte s) {
            Pointers.glTexCoord1bOES(s);
        }
        
        public unsafe static void glTexCoord1bvOES(sbyte* coords) {
            Pointers.glTexCoord1bvOES(coords);
        }
        
        public unsafe static void glTexCoord1bvOES(out sbyte coords) {
            fixed(sbyte* coords_ = &coords)
                Pointers.glTexCoord1bvOES(coords_);
        }
        
        public unsafe static void glTexCoord1d(double s) {
            Pointers.glTexCoord1d(s);
        }
        
        public unsafe static void glTexCoord1dv(double* v) {
            Pointers.glTexCoord1dv(v);
        }
        
        public unsafe static void glTexCoord1dv(out double v) {
            fixed(double* v_ = &v)
                Pointers.glTexCoord1dv(v_);
        }
        
        public unsafe static void glTexCoord1f(float s) {
            Pointers.glTexCoord1f(s);
        }
        
        public unsafe static void glTexCoord1fv(float* v) {
            Pointers.glTexCoord1fv(v);
        }
        
        public unsafe static void glTexCoord1fv(out float v) {
            fixed(float* v_ = &v)
                Pointers.glTexCoord1fv(v_);
        }
        
        public unsafe static void glTexCoord1hNV(short s) {
            Pointers.glTexCoord1hNV(s);
        }
        
        public unsafe static void glTexCoord1hvNV(short* v) {
            Pointers.glTexCoord1hvNV(v);
        }
        
        public unsafe static void glTexCoord1hvNV(out short v) {
            fixed(short* v_ = &v)
                Pointers.glTexCoord1hvNV(v_);
        }
        
        public unsafe static void glTexCoord1i(int s) {
            Pointers.glTexCoord1i(s);
        }
        
        public unsafe static void glTexCoord1iv(int* v) {
            Pointers.glTexCoord1iv(v);
        }
        
        public unsafe static void glTexCoord1iv(out int v) {
            fixed(int* v_ = &v)
                Pointers.glTexCoord1iv(v_);
        }
        
        public unsafe static void glTexCoord1s(short s) {
            Pointers.glTexCoord1s(s);
        }
        
        public unsafe static void glTexCoord1sv(short* v) {
            Pointers.glTexCoord1sv(v);
        }
        
        public unsafe static void glTexCoord1sv(out short v) {
            fixed(short* v_ = &v)
                Pointers.glTexCoord1sv(v_);
        }
        
        public unsafe static void glTexCoord1xOES(IntPtr s) {
            Pointers.glTexCoord1xOES(s);
        }
        
        public unsafe static void glTexCoord1xvOES(IntPtr* coords) {
            Pointers.glTexCoord1xvOES(coords);
        }
        
        public unsafe static void glTexCoord1xvOES(out IntPtr coords) {
            fixed(IntPtr* coords_ = &coords)
                Pointers.glTexCoord1xvOES(coords_);
        }
        
        public unsafe static void glTexCoord2bOES(sbyte s, sbyte t) {
            Pointers.glTexCoord2bOES(s, t);
        }
        
        public unsafe static void glTexCoord2bvOES(sbyte* coords) {
            Pointers.glTexCoord2bvOES(coords);
        }
        
        public unsafe static void glTexCoord2bvOES(sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glTexCoord2bvOES(coords_);
        }
        
        public unsafe static void glTexCoord2d(double s, double t) {
            Pointers.glTexCoord2d(s, t);
        }
        
        public unsafe static void glTexCoord2dv(double* v) {
            Pointers.glTexCoord2dv(v);
        }
        
        public unsafe static void glTexCoord2dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glTexCoord2dv(v_);
        }
        
        public unsafe static void glTexCoord2f(float s, float t) {
            Pointers.glTexCoord2f(s, t);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z) {
            Pointers.glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v) {
            Pointers.glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc, c, v_);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float* tc, float[] c, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc, c_, v);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float* tc, float[] c, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc, c_, v_);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, float* c, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc_, c, v);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, float* c, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc_, c, v_);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc_, c_, v);
        }
        
        public unsafe static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor3fVertex3fvSUN(tc_, c_, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v) {
            Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float[] c, float* n, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_, n, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float[] c, float* n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_, n, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float[] c, float[] n, float* v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_, n_, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float[] c, float[] n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_, n_, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float* c, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c, n, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float* c, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c, n, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float* c, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c, n_, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float* c, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c, n_, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c_, n, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c_, n, v_);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c_, n_, v);
        }
        
        public unsafe static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_, c_, n_, v_);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z) {
            Pointers.glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v) {
            Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v_);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte[] c, float* v) {
            fixed(byte* c_ = &c[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc, c_, v);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte[] c, float[] v) {
            fixed(byte* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc, c_, v_);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte* c, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc_, c, v);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte* c, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc_, c, v_);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(byte* c_ = &c[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc_, c_, v);
        }
        
        public unsafe static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(byte* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fColor4ubVertex3fvSUN(tc_, c_, v_);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z) {
            Pointers.glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v) {
            Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v_);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc, n_, v);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc, n_, v_);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc_, n, v);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc_, n, v_);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc_, n_, v);
        }
        
        public unsafe static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fNormal3fVertex3fvSUN(tc_, n_, v_);
        }
        
        public unsafe static void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z) {
            Pointers.glTexCoord2fVertex3fSUN(s, t, x, y, z);
        }
        
        public unsafe static void glTexCoord2fVertex3fvSUN(float* tc, float* v) {
            Pointers.glTexCoord2fVertex3fvSUN(tc, v);
        }
        
        public unsafe static void glTexCoord2fVertex3fvSUN(float* tc, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fVertex3fvSUN(tc, v_);
        }
        
        public unsafe static void glTexCoord2fVertex3fvSUN(float[] tc, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord2fVertex3fvSUN(tc_, v);
        }
        
        public unsafe static void glTexCoord2fVertex3fvSUN(float[] tc, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fVertex3fvSUN(tc_, v_);
        }
        
        public unsafe static void glTexCoord2fv(float* v) {
            Pointers.glTexCoord2fv(v);
        }
        
        public unsafe static void glTexCoord2fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord2fv(v_);
        }
        
        public unsafe static void glTexCoord2hNV(short s, short t) {
            Pointers.glTexCoord2hNV(s, t);
        }
        
        public unsafe static void glTexCoord2hvNV(short* v) {
            Pointers.glTexCoord2hvNV(v);
        }
        
        public unsafe static void glTexCoord2hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTexCoord2hvNV(v_);
        }
        
        public unsafe static void glTexCoord2i(int s, int t) {
            Pointers.glTexCoord2i(s, t);
        }
        
        public unsafe static void glTexCoord2iv(int* v) {
            Pointers.glTexCoord2iv(v);
        }
        
        public unsafe static void glTexCoord2iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glTexCoord2iv(v_);
        }
        
        public unsafe static void glTexCoord2s(short s, short t) {
            Pointers.glTexCoord2s(s, t);
        }
        
        public unsafe static void glTexCoord2sv(short* v) {
            Pointers.glTexCoord2sv(v);
        }
        
        public unsafe static void glTexCoord2sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTexCoord2sv(v_);
        }
        
        public unsafe static void glTexCoord2xOES(IntPtr s, IntPtr t) {
            Pointers.glTexCoord2xOES(s, t);
        }
        
        public unsafe static void glTexCoord2xvOES(IntPtr* coords) {
            Pointers.glTexCoord2xvOES(coords);
        }
        
        public unsafe static void glTexCoord2xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glTexCoord2xvOES(coords_);
        }
        
        public unsafe static void glTexCoord3bOES(sbyte s, sbyte t, sbyte r) {
            Pointers.glTexCoord3bOES(s, t, r);
        }
        
        public unsafe static void glTexCoord3bvOES(sbyte* coords) {
            Pointers.glTexCoord3bvOES(coords);
        }
        
        public unsafe static void glTexCoord3bvOES(sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glTexCoord3bvOES(coords_);
        }
        
        public unsafe static void glTexCoord3d(double s, double t, double r) {
            Pointers.glTexCoord3d(s, t, r);
        }
        
        public unsafe static void glTexCoord3dv(double* v) {
            Pointers.glTexCoord3dv(v);
        }
        
        public unsafe static void glTexCoord3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glTexCoord3dv(v_);
        }
        
        public unsafe static void glTexCoord3f(float s, float t, float r) {
            Pointers.glTexCoord3f(s, t, r);
        }
        
        public unsafe static void glTexCoord3fv(float* v) {
            Pointers.glTexCoord3fv(v);
        }
        
        public unsafe static void glTexCoord3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord3fv(v_);
        }
        
        public unsafe static void glTexCoord3hNV(short s, short t, short r) {
            Pointers.glTexCoord3hNV(s, t, r);
        }
        
        public unsafe static void glTexCoord3hvNV(short* v) {
            Pointers.glTexCoord3hvNV(v);
        }
        
        public unsafe static void glTexCoord3hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTexCoord3hvNV(v_);
        }
        
        public unsafe static void glTexCoord3i(int s, int t, int r) {
            Pointers.glTexCoord3i(s, t, r);
        }
        
        public unsafe static void glTexCoord3iv(int* v) {
            Pointers.glTexCoord3iv(v);
        }
        
        public unsafe static void glTexCoord3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glTexCoord3iv(v_);
        }
        
        public unsafe static void glTexCoord3s(short s, short t, short r) {
            Pointers.glTexCoord3s(s, t, r);
        }
        
        public unsafe static void glTexCoord3sv(short* v) {
            Pointers.glTexCoord3sv(v);
        }
        
        public unsafe static void glTexCoord3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTexCoord3sv(v_);
        }
        
        public unsafe static void glTexCoord3xOES(IntPtr s, IntPtr t, IntPtr r) {
            Pointers.glTexCoord3xOES(s, t, r);
        }
        
        public unsafe static void glTexCoord3xvOES(IntPtr* coords) {
            Pointers.glTexCoord3xvOES(coords);
        }
        
        public unsafe static void glTexCoord3xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glTexCoord3xvOES(coords_);
        }
        
        public unsafe static void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q) {
            Pointers.glTexCoord4bOES(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4bvOES(sbyte* coords) {
            Pointers.glTexCoord4bvOES(coords);
        }
        
        public unsafe static void glTexCoord4bvOES(sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glTexCoord4bvOES(coords_);
        }
        
        public unsafe static void glTexCoord4d(double s, double t, double r, double q) {
            Pointers.glTexCoord4d(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4dv(double* v) {
            Pointers.glTexCoord4dv(v);
        }
        
        public unsafe static void glTexCoord4dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glTexCoord4dv(v_);
        }
        
        public unsafe static void glTexCoord4f(float s, float t, float r, float q) {
            Pointers.glTexCoord4f(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) {
            Pointers.glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v) {
            Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float[] n, float* v) {
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float[] n, float[] v) {
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float[] c, float* n, float* v) {
            fixed(float* c_ = &c[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_, n, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float[] c, float* n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_, n, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float[] c, float[] n, float* v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_, n_, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float[] c, float[] n, float[] v) {
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_, n_, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float* c, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c, n, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float* c, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c, n, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float* c, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c, n_, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float* c, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c, n_, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float* n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c_, n, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float* n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c_, n, v_);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, float* v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c_, n_, v);
        }
        
        public unsafe static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* c_ = &c[0])
            fixed(float* n_ = &n[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_, c_, n_, v_);
        }
        
        public unsafe static void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w) {
            Pointers.glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
        }
        
        public unsafe static void glTexCoord4fVertex4fvSUN(float* tc, float* v) {
            Pointers.glTexCoord4fVertex4fvSUN(tc, v);
        }
        
        public unsafe static void glTexCoord4fVertex4fvSUN(float* tc, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fVertex4fvSUN(tc, v_);
        }
        
        public unsafe static void glTexCoord4fVertex4fvSUN(float[] tc, float* v) {
            fixed(float* tc_ = &tc[0])
                Pointers.glTexCoord4fVertex4fvSUN(tc_, v);
        }
        
        public unsafe static void glTexCoord4fVertex4fvSUN(float[] tc, float[] v) {
            fixed(float* tc_ = &tc[0])
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fVertex4fvSUN(tc_, v_);
        }
        
        public unsafe static void glTexCoord4fv(float* v) {
            Pointers.glTexCoord4fv(v);
        }
        
        public unsafe static void glTexCoord4fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glTexCoord4fv(v_);
        }
        
        public unsafe static void glTexCoord4hNV(short s, short t, short r, short q) {
            Pointers.glTexCoord4hNV(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4hvNV(short* v) {
            Pointers.glTexCoord4hvNV(v);
        }
        
        public unsafe static void glTexCoord4hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTexCoord4hvNV(v_);
        }
        
        public unsafe static void glTexCoord4i(int s, int t, int r, int q) {
            Pointers.glTexCoord4i(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4iv(int* v) {
            Pointers.glTexCoord4iv(v);
        }
        
        public unsafe static void glTexCoord4iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glTexCoord4iv(v_);
        }
        
        public unsafe static void glTexCoord4s(short s, short t, short r, short q) {
            Pointers.glTexCoord4s(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4sv(short* v) {
            Pointers.glTexCoord4sv(v);
        }
        
        public unsafe static void glTexCoord4sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glTexCoord4sv(v_);
        }
        
        public unsafe static void glTexCoord4xOES(IntPtr s, IntPtr t, IntPtr r, IntPtr q) {
            Pointers.glTexCoord4xOES(s, t, r, q);
        }
        
        public unsafe static void glTexCoord4xvOES(IntPtr* coords) {
            Pointers.glTexCoord4xvOES(coords);
        }
        
        public unsafe static void glTexCoord4xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glTexCoord4xvOES(coords_);
        }
        
        public unsafe static void glTexCoordFormatNV(int size, int type, int stride) {
            Pointers.glTexCoordFormatNV(size, type, stride);
        }
        
        public unsafe static void glTexCoordP1ui(int type, uint coords) {
            Pointers.glTexCoordP1ui(type, coords);
        }
        
        public unsafe static void glTexCoordP1uiv(int type, uint* coords) {
            Pointers.glTexCoordP1uiv(type, coords);
        }
        
        public unsafe static void glTexCoordP1uiv(int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glTexCoordP1uiv(type, coords_);
        }
        
        public unsafe static void glTexCoordP2ui(int type, uint coords) {
            Pointers.glTexCoordP2ui(type, coords);
        }
        
        public unsafe static void glTexCoordP2uiv(int type, uint* coords) {
            Pointers.glTexCoordP2uiv(type, coords);
        }
        
        public unsafe static void glTexCoordP2uiv(int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glTexCoordP2uiv(type, coords_);
        }
        
        public unsafe static void glTexCoordP3ui(int type, uint coords) {
            Pointers.glTexCoordP3ui(type, coords);
        }
        
        public unsafe static void glTexCoordP3uiv(int type, uint* coords) {
            Pointers.glTexCoordP3uiv(type, coords);
        }
        
        public unsafe static void glTexCoordP3uiv(int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glTexCoordP3uiv(type, coords_);
        }
        
        public unsafe static void glTexCoordP4ui(int type, uint coords) {
            Pointers.glTexCoordP4ui(type, coords);
        }
        
        public unsafe static void glTexCoordP4uiv(int type, uint* coords) {
            Pointers.glTexCoordP4uiv(type, coords);
        }
        
        public unsafe static void glTexCoordP4uiv(int type, out uint coords) {
            fixed(uint* coords_ = &coords)
                Pointers.glTexCoordP4uiv(type, coords_);
        }
        
        public unsafe static void glTexCoordPointer(int size, int type, int stride, IntPtr pointer) {
            Pointers.glTexCoordPointer(size, type, stride, pointer);
        }
        
        public unsafe static void glTexCoordPointerEXT(int size, int type, int stride, int count, IntPtr pointer) {
            Pointers.glTexCoordPointerEXT(size, type, stride, count, pointer);
        }
        
        public unsafe static void glTexCoordPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glTexCoordPointerListIBM(int size, int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glTexCoordPointerListIBM(size, type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glTexCoordPointervINTEL(int size, int type, IntPtr* pointer) {
            Pointers.glTexCoordPointervINTEL(size, type, pointer);
        }
        
        public unsafe static void glTexCoordPointervINTEL(int size, int type, IntPtr[] pointer) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glTexCoordPointervINTEL(size, type, pointer_);
        }
        
        public unsafe static void glTexEnvf(int target, int pname, float param) {
            Pointers.glTexEnvf(target, pname, param);
        }
        
        public unsafe static void glTexEnvfv(int target, int pname, float* _params) {
            Pointers.glTexEnvfv(target, pname, _params);
        }
        
        public unsafe static void glTexEnvfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glTexEnvfv(target, pname, _params_);
        }
        
        public unsafe static void glTexEnvi(int target, int pname, int param) {
            Pointers.glTexEnvi(target, pname, param);
        }
        
        public unsafe static void glTexEnviv(int target, int pname, int* _params) {
            Pointers.glTexEnviv(target, pname, _params);
        }
        
        public unsafe static void glTexEnviv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexEnviv(target, pname, _params_);
        }
        
        public unsafe static void glTexEnvx(int target, int pname, IntPtr param) {
            Pointers.glTexEnvx(target, pname, param);
        }
        
        public unsafe static void glTexEnvxOES(int target, int pname, IntPtr param) {
            Pointers.glTexEnvxOES(target, pname, param);
        }
        
        public unsafe static void glTexEnvxv(int target, int pname, IntPtr* _params) {
            Pointers.glTexEnvxv(target, pname, _params);
        }
        
        public unsafe static void glTexEnvxv(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glTexEnvxv(target, pname, _params_);
        }
        
        public unsafe static void glTexEnvxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glTexEnvxvOES(target, pname, _params);
        }
        
        public unsafe static void glTexEnvxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glTexEnvxvOES(target, pname, _params_);
        }
        
        public unsafe static void glTexFilterFuncSGIS(int target, int filter, int n, float* weights) {
            Pointers.glTexFilterFuncSGIS(target, filter, n, weights);
        }
        
        public unsafe static void glTexFilterFuncSGIS(int target, int filter, int n, float[] weights) {
            fixed(float* weights_ = &weights[0])
                Pointers.glTexFilterFuncSGIS(target, filter, n, weights_);
        }
        
        public unsafe static void glTexGend(int coord, int pname, double param) {
            Pointers.glTexGend(coord, pname, param);
        }
        
        public unsafe static void glTexGendv(int coord, int pname, double* _params) {
            Pointers.glTexGendv(coord, pname, _params);
        }
        
        public unsafe static void glTexGendv(int coord, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glTexGendv(coord, pname, _params_);
        }
        
        public unsafe static void glTexGenf(int coord, int pname, float param) {
            Pointers.glTexGenf(coord, pname, param);
        }
        
        public unsafe static void glTexGenfOES(int coord, int pname, float param) {
            Pointers.glTexGenfOES(coord, pname, param);
        }
        
        public unsafe static void glTexGenfv(int coord, int pname, float* _params) {
            Pointers.glTexGenfv(coord, pname, _params);
        }
        
        public unsafe static void glTexGenfv(int coord, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glTexGenfv(coord, pname, _params_);
        }
        
        public unsafe static void glTexGenfvOES(int coord, int pname, float* _params) {
            Pointers.glTexGenfvOES(coord, pname, _params);
        }
        
        public unsafe static void glTexGenfvOES(int coord, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glTexGenfvOES(coord, pname, _params_);
        }
        
        public unsafe static void glTexGeni(int coord, int pname, int param) {
            Pointers.glTexGeni(coord, pname, param);
        }
        
        public unsafe static void glTexGeniOES(int coord, int pname, int param) {
            Pointers.glTexGeniOES(coord, pname, param);
        }
        
        public unsafe static void glTexGeniv(int coord, int pname, int* _params) {
            Pointers.glTexGeniv(coord, pname, _params);
        }
        
        public unsafe static void glTexGeniv(int coord, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexGeniv(coord, pname, _params_);
        }
        
        public unsafe static void glTexGenivOES(int coord, int pname, int* _params) {
            Pointers.glTexGenivOES(coord, pname, _params);
        }
        
        public unsafe static void glTexGenivOES(int coord, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexGenivOES(coord, pname, _params_);
        }
        
        public unsafe static void glTexGenxOES(int coord, int pname, IntPtr param) {
            Pointers.glTexGenxOES(coord, pname, param);
        }
        
        public unsafe static void glTexGenxvOES(int coord, int pname, IntPtr* _params) {
            Pointers.glTexGenxvOES(coord, pname, _params);
        }
        
        public unsafe static void glTexGenxvOES(int coord, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glTexGenxvOES(coord, pname, _params_);
        }
        
        public unsafe static void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels) {
            Pointers.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }
        
        public unsafe static void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels) {
            Pointers.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        public unsafe static void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations) {
            Pointers.glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public unsafe static void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations) {
            Pointers.glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        public unsafe static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
            Pointers.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        public unsafe static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
            Pointers.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        public unsafe static void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            Pointers.glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public unsafe static void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations) {
            Pointers.glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        public unsafe static void glTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
            Pointers.glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        public unsafe static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, IntPtr pixels) {
            Pointers.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }
        
        public unsafe static void glTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) {
            Pointers.glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        public unsafe static void glTexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) {
            Pointers.glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        public unsafe static void glTexParameterIiv(int target, int pname, int* _params) {
            Pointers.glTexParameterIiv(target, pname, _params);
        }
        
        public unsafe static void glTexParameterIiv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexParameterIiv(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterIivEXT(int target, int pname, int* _params) {
            Pointers.glTexParameterIivEXT(target, pname, _params);
        }
        
        public unsafe static void glTexParameterIivEXT(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexParameterIivEXT(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterIivOES(int target, int pname, int* _params) {
            Pointers.glTexParameterIivOES(target, pname, _params);
        }
        
        public unsafe static void glTexParameterIivOES(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexParameterIivOES(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterIuiv(int target, int pname, uint* _params) {
            Pointers.glTexParameterIuiv(target, pname, _params);
        }
        
        public unsafe static void glTexParameterIuiv(int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glTexParameterIuiv(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterIuivEXT(int target, int pname, uint* _params) {
            Pointers.glTexParameterIuivEXT(target, pname, _params);
        }
        
        public unsafe static void glTexParameterIuivEXT(int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glTexParameterIuivEXT(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterIuivOES(int target, int pname, uint* _params) {
            Pointers.glTexParameterIuivOES(target, pname, _params);
        }
        
        public unsafe static void glTexParameterIuivOES(int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glTexParameterIuivOES(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterf(int target, int pname, float param) {
            Pointers.glTexParameterf(target, pname, param);
        }
        
        public unsafe static void glTexParameterfv(int target, int pname, float* _params) {
            Pointers.glTexParameterfv(target, pname, _params);
        }
        
        public unsafe static void glTexParameterfv(int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glTexParameterfv(target, pname, _params_);
        }
        
        public unsafe static void glTexParameteri(int target, int pname, int param) {
            Pointers.glTexParameteri(target, pname, param);
        }
        
        public unsafe static void glTexParameteriv(int target, int pname, int* _params) {
            Pointers.glTexParameteriv(target, pname, _params);
        }
        
        public unsafe static void glTexParameteriv(int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTexParameteriv(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterx(int target, int pname, IntPtr param) {
            Pointers.glTexParameterx(target, pname, param);
        }
        
        public unsafe static void glTexParameterxOES(int target, int pname, IntPtr param) {
            Pointers.glTexParameterxOES(target, pname, param);
        }
        
        public unsafe static void glTexParameterxv(int target, int pname, IntPtr* _params) {
            Pointers.glTexParameterxv(target, pname, _params);
        }
        
        public unsafe static void glTexParameterxv(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glTexParameterxv(target, pname, _params_);
        }
        
        public unsafe static void glTexParameterxvOES(int target, int pname, IntPtr* _params) {
            Pointers.glTexParameterxvOES(target, pname, _params);
        }
        
        public unsafe static void glTexParameterxvOES(int target, int pname, IntPtr[] _params) {
            fixed(IntPtr* _params_ = &_params[0])
                Pointers.glTexParameterxvOES(target, pname, _params_);
        }
        
        public unsafe static void glTexRenderbufferNV(int target, uint renderbuffer) {
            Pointers.glTexRenderbufferNV(target, renderbuffer);
        }
        
        public unsafe static void glTexStorage1D(int target, int levels, int internalformat, int width) {
            Pointers.glTexStorage1D(target, levels, internalformat, width);
        }
        
        public unsafe static void glTexStorage1DEXT(int target, int levels, int internalformat, int width) {
            Pointers.glTexStorage1DEXT(target, levels, internalformat, width);
        }
        
        public unsafe static void glTexStorage2D(int target, int levels, int internalformat, int width, int height) {
            Pointers.glTexStorage2D(target, levels, internalformat, width, height);
        }
        
        public unsafe static void glTexStorage2DEXT(int target, int levels, int internalformat, int width, int height) {
            Pointers.glTexStorage2DEXT(target, levels, internalformat, width, height);
        }
        
        public unsafe static void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations) {
            Pointers.glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public unsafe static void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth) {
            Pointers.glTexStorage3D(target, levels, internalformat, width, height, depth);
        }
        
        public unsafe static void glTexStorage3DEXT(int target, int levels, int internalformat, int width, int height, int depth) {
            Pointers.glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
        }
        
        public unsafe static void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            Pointers.glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public unsafe static void glTexStorage3DMultisampleOES(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            Pointers.glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public unsafe static void glTexStorageMem1DEXT(int target, int levels, int internalFormat, int width, uint memory, ulong offset) {
            Pointers.glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
        }
        
        public unsafe static void glTexStorageMem2DEXT(int target, int levels, int internalFormat, int width, int height, uint memory, ulong offset) {
            Pointers.glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
        }
        
        public unsafe static void glTexStorageMem2DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset) {
            Pointers.glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        public unsafe static void glTexStorageMem3DEXT(int target, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset) {
            Pointers.glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        public unsafe static void glTexStorageMem3DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset) {
            Pointers.glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        public unsafe static void glTexStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, uint flags) {
            Pointers.glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
        }
        
        public unsafe static void glTexStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, Enums.TextureStorageMaskAMD flags) {
            Pointers.glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, (uint)flags);
        }
        
        public unsafe static void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public unsafe static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, IntPtr pixels) {
            Pointers.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }
        
        public unsafe static void glTextureBarrier() {
            Pointers.glTextureBarrier();
        }
        
        public unsafe static void glTextureBarrierNV() {
            Pointers.glTextureBarrierNV();
        }
        
        public unsafe static void glTextureBuffer(uint texture, int internalformat, uint buffer) {
            Pointers.glTextureBuffer(texture, internalformat, buffer);
        }
        
        public unsafe static void glTextureBufferEXT(uint texture, int target, int internalformat, uint buffer) {
            Pointers.glTextureBufferEXT(texture, target, internalformat, buffer);
        }
        
        public unsafe static void glTextureBufferRange(uint texture, int internalformat, uint buffer, uint offset, uint size) {
            Pointers.glTextureBufferRange(texture, internalformat, buffer, offset, size);
        }
        
        public unsafe static void glTextureBufferRangeEXT(uint texture, int target, int internalformat, uint buffer, uint offset, uint size) {
            Pointers.glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
        }
        
        public unsafe static void glTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha) {
            Pointers.glTextureColorMaskSGIS(red, green, blue, alpha);
        }
        
        public unsafe static void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) {
            Pointers.glTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        public unsafe static void glTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels) {
            Pointers.glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
        }
        
        public unsafe static void glTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels) {
            Pointers.glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        public unsafe static void glTextureImage2DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations) {
            Pointers.glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        public unsafe static void glTextureImage2DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations) {
            Pointers.glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        }
        
        public unsafe static void glTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
            Pointers.glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        public unsafe static void glTextureImage3DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations) {
            Pointers.glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        public unsafe static void glTextureImage3DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations) {
            Pointers.glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        public unsafe static void glTextureLightEXT(int pname) {
            Pointers.glTextureLightEXT(pname);
        }
        
        public unsafe static void glTextureMaterialEXT(int face, int mode) {
            Pointers.glTextureMaterialEXT(face, mode);
        }
        
        public unsafe static void glTextureNormalEXT(int mode) {
            Pointers.glTextureNormalEXT(mode);
        }
        
        public unsafe static void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) {
            Pointers.glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        public unsafe static void glTextureParameterIiv(uint texture, int pname, int* _params) {
            Pointers.glTextureParameterIiv(texture, pname, _params);
        }
        
        public unsafe static void glTextureParameterIiv(uint texture, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTextureParameterIiv(texture, pname, _params_);
        }
        
        public unsafe static void glTextureParameterIivEXT(uint texture, int target, int pname, int* _params) {
            Pointers.glTextureParameterIivEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glTextureParameterIivEXT(uint texture, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTextureParameterIivEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glTextureParameterIuiv(uint texture, int pname, uint* _params) {
            Pointers.glTextureParameterIuiv(texture, pname, _params);
        }
        
        public unsafe static void glTextureParameterIuiv(uint texture, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glTextureParameterIuiv(texture, pname, _params_);
        }
        
        public unsafe static void glTextureParameterIuivEXT(uint texture, int target, int pname, uint* _params) {
            Pointers.glTextureParameterIuivEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glTextureParameterIuivEXT(uint texture, int target, int pname, uint[] _params) {
            fixed(uint* _params_ = &_params[0])
                Pointers.glTextureParameterIuivEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glTextureParameterf(uint texture, int pname, float param) {
            Pointers.glTextureParameterf(texture, pname, param);
        }
        
        public unsafe static void glTextureParameterfEXT(uint texture, int target, int pname, float param) {
            Pointers.glTextureParameterfEXT(texture, target, pname, param);
        }
        
        public unsafe static void glTextureParameterfv(uint texture, int pname, float* param) {
            Pointers.glTextureParameterfv(texture, pname, param);
        }
        
        public unsafe static void glTextureParameterfv(uint texture, int pname, float[] param) {
            fixed(float* param_ = &param[0])
                Pointers.glTextureParameterfv(texture, pname, param_);
        }
        
        public unsafe static void glTextureParameterfvEXT(uint texture, int target, int pname, float* _params) {
            Pointers.glTextureParameterfvEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glTextureParameterfvEXT(uint texture, int target, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glTextureParameterfvEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glTextureParameteri(uint texture, int pname, int param) {
            Pointers.glTextureParameteri(texture, pname, param);
        }
        
        public unsafe static void glTextureParameteriEXT(uint texture, int target, int pname, int param) {
            Pointers.glTextureParameteriEXT(texture, target, pname, param);
        }
        
        public unsafe static void glTextureParameteriv(uint texture, int pname, int* param) {
            Pointers.glTextureParameteriv(texture, pname, param);
        }
        
        public unsafe static void glTextureParameteriv(uint texture, int pname, int[] param) {
            fixed(int* param_ = &param[0])
                Pointers.glTextureParameteriv(texture, pname, param_);
        }
        
        public unsafe static void glTextureParameterivEXT(uint texture, int target, int pname, int* _params) {
            Pointers.glTextureParameterivEXT(texture, target, pname, _params);
        }
        
        public unsafe static void glTextureParameterivEXT(uint texture, int target, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glTextureParameterivEXT(texture, target, pname, _params_);
        }
        
        public unsafe static void glTextureRangeAPPLE(int target, int length, IntPtr pointer) {
            Pointers.glTextureRangeAPPLE(target, length, pointer);
        }
        
        public unsafe static void glTextureRenderbufferEXT(uint texture, int target, uint renderbuffer) {
            Pointers.glTextureRenderbufferEXT(texture, target, renderbuffer);
        }
        
        public unsafe static void glTextureStorage1D(uint texture, int levels, int internalformat, int width) {
            Pointers.glTextureStorage1D(texture, levels, internalformat, width);
        }
        
        public unsafe static void glTextureStorage1DEXT(uint texture, int target, int levels, int internalformat, int width) {
            Pointers.glTextureStorage1DEXT(texture, target, levels, internalformat, width);
        }
        
        public unsafe static void glTextureStorage2D(uint texture, int levels, int internalformat, int width, int height) {
            Pointers.glTextureStorage2D(texture, levels, internalformat, width, height);
        }
        
        public unsafe static void glTextureStorage2DEXT(uint texture, int target, int levels, int internalformat, int width, int height) {
            Pointers.glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
        }
        
        public unsafe static void glTextureStorage2DMultisample(uint texture, int samples, int internalformat, int width, int height, bool fixedsamplelocations) {
            Pointers.glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public unsafe static void glTextureStorage2DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations) {
            Pointers.glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public unsafe static void glTextureStorage3D(uint texture, int levels, int internalformat, int width, int height, int depth) {
            Pointers.glTextureStorage3D(texture, levels, internalformat, width, height, depth);
        }
        
        public unsafe static void glTextureStorage3DEXT(uint texture, int target, int levels, int internalformat, int width, int height, int depth) {
            Pointers.glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
        }
        
        public unsafe static void glTextureStorage3DMultisample(uint texture, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            Pointers.glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public unsafe static void glTextureStorage3DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            Pointers.glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public unsafe static void glTextureStorageMem1DEXT(uint texture, int levels, int internalFormat, int width, uint memory, ulong offset) {
            Pointers.glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
        }
        
        public unsafe static void glTextureStorageMem2DEXT(uint texture, int levels, int internalFormat, int width, int height, uint memory, ulong offset) {
            Pointers.glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
        }
        
        public unsafe static void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset) {
            Pointers.glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        public unsafe static void glTextureStorageMem3DEXT(uint texture, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset) {
            Pointers.glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        public unsafe static void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset) {
            Pointers.glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        public unsafe static void glTextureStorageSparseAMD(uint texture, int target, int internalFormat, int width, int height, int depth, int layers, uint flags) {
            Pointers.glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
        }
        
        public unsafe static void glTextureStorageSparseAMD(uint texture, int target, int internalFormat, int width, int height, int depth, int layers, Enums.TextureStorageMaskAMD flags) {
            Pointers.glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, (uint)flags);
        }
        
        public unsafe static void glTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int type, IntPtr pixels) {
            Pointers.glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
        }
        
        public unsafe static void glTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels) {
            Pointers.glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
        }
        
        public unsafe static void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        public unsafe static void glTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) {
            Pointers.glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        public unsafe static void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
            Pointers.glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public unsafe static void glTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
            Pointers.glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public unsafe static void glTextureView(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) {
            Pointers.glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public unsafe static void glTextureViewEXT(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) {
            Pointers.glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public unsafe static void glTextureViewOES(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) {
            Pointers.glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public unsafe static void glTrackMatrixNV(int target, uint address, int matrix, int transform) {
            Pointers.glTrackMatrixNV(target, address, matrix, transform);
        }
        
        public unsafe static void glTransformFeedbackAttribsNV(int count, int* attribs, int bufferMode) {
            Pointers.glTransformFeedbackAttribsNV(count, attribs, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackAttribsNV(int count, int[] attribs, int bufferMode) {
            fixed(int* attribs_ = &attribs[0])
                Pointers.glTransformFeedbackAttribsNV(count, attribs_, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer) {
            Pointers.glTransformFeedbackBufferBase(xfb, index, buffer);
        }
        
        public unsafe static void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, uint offset, uint size) {
            Pointers.glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
        }
        
        public unsafe static void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, int bufferMode) {
            Pointers.glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int[] bufstreams, int bufferMode) {
            fixed(int* bufstreams_ = &bufstreams[0])
                Pointers.glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams_, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackStreamAttribsNV(int count, int[] attribs, int nbuffers, int* bufstreams, int bufferMode) {
            fixed(int* attribs_ = &attribs[0])
                Pointers.glTransformFeedbackStreamAttribsNV(count, attribs_, nbuffers, bufstreams, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackStreamAttribsNV(int count, int[] attribs, int nbuffers, int[] bufstreams, int bufferMode) {
            fixed(int* attribs_ = &attribs[0])
            fixed(int* bufstreams_ = &bufstreams[0])
                Pointers.glTransformFeedbackStreamAttribsNV(count, attribs_, nbuffers, bufstreams_, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackVaryings(uint program, int count, string[] varyings, int bufferMode) {
            Pointers.glTransformFeedbackVaryings(program, count, varyings, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackVaryingsEXT(uint program, int count, string[] varyings, int bufferMode) {
            Pointers.glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackVaryingsNV(uint program, int count, int* locations, int bufferMode) {
            Pointers.glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
        }
        
        public unsafe static void glTransformFeedbackVaryingsNV(uint program, int count, int[] locations, int bufferMode) {
            fixed(int* locations_ = &locations[0])
                Pointers.glTransformFeedbackVaryingsNV(program, count, locations_, bufferMode);
        }
        
        public unsafe static void glTransformPathNV(uint resultPath, uint srcPath, int transformType, float* transformValues) {
            Pointers.glTransformPathNV(resultPath, srcPath, transformType, transformValues);
        }
        
        public unsafe static void glTransformPathNV(uint resultPath, uint srcPath, int transformType, float[] transformValues) {
            fixed(float* transformValues_ = &transformValues[0])
                Pointers.glTransformPathNV(resultPath, srcPath, transformType, transformValues_);
        }
        
        public unsafe static void glTranslated(double x, double y, double z) {
            Pointers.glTranslated(x, y, z);
        }
        
        public unsafe static void glTranslatef(float x, float y, float z) {
            Pointers.glTranslatef(x, y, z);
        }
        
        public unsafe static void glTranslatex(IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glTranslatex(x, y, z);
        }
        
        public unsafe static void glTranslatexOES(IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glTranslatexOES(x, y, z);
        }
        
        public unsafe static void glUniform1d(int location, double x) {
            Pointers.glUniform1d(location, x);
        }
        
        public unsafe static void glUniform1dv(int location, int count, double* value) {
            Pointers.glUniform1dv(location, count, value);
        }
        
        public unsafe static void glUniform1dv(int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniform1dv(location, count, value_);
        }
        
        public unsafe static void glUniform1f(int location, float v0) {
            Pointers.glUniform1f(location, v0);
        }
        
        public unsafe static void glUniform1fARB(int location, float v0) {
            Pointers.glUniform1fARB(location, v0);
        }
        
        public unsafe static void glUniform1fv(int location, int count, float* value) {
            Pointers.glUniform1fv(location, count, value);
        }
        
        public unsafe static void glUniform1fv(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform1fv(location, count, value_);
        }
        
        public unsafe static void glUniform1fvARB(int location, int count, float* value) {
            Pointers.glUniform1fvARB(location, count, value);
        }
        
        public unsafe static void glUniform1fvARB(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform1fvARB(location, count, value_);
        }
        
        public unsafe static void glUniform1i(int location, int v0) {
            Pointers.glUniform1i(location, v0);
        }
        
        public unsafe static void glUniform1i64ARB(int location, long x) {
            Pointers.glUniform1i64ARB(location, x);
        }
        
        public unsafe static void glUniform1i64NV(int location, long x) {
            Pointers.glUniform1i64NV(location, x);
        }
        
        public unsafe static void glUniform1i64vARB(int location, int count, long* value) {
            Pointers.glUniform1i64vARB(location, count, value);
        }
        
        public unsafe static void glUniform1i64vARB(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform1i64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform1i64vNV(int location, int count, long* value) {
            Pointers.glUniform1i64vNV(location, count, value);
        }
        
        public unsafe static void glUniform1i64vNV(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform1i64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform1iARB(int location, int v0) {
            Pointers.glUniform1iARB(location, v0);
        }
        
        public unsafe static void glUniform1iv(int location, int count, int* value) {
            Pointers.glUniform1iv(location, count, value);
        }
        
        public unsafe static void glUniform1iv(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform1iv(location, count, value_);
        }
        
        public unsafe static void glUniform1ivARB(int location, int count, int* value) {
            Pointers.glUniform1ivARB(location, count, value);
        }
        
        public unsafe static void glUniform1ivARB(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform1ivARB(location, count, value_);
        }
        
        public unsafe static void glUniform1ui(int location, uint v0) {
            Pointers.glUniform1ui(location, v0);
        }
        
        public unsafe static void glUniform1ui64ARB(int location, ulong x) {
            Pointers.glUniform1ui64ARB(location, x);
        }
        
        public unsafe static void glUniform1ui64NV(int location, ulong x) {
            Pointers.glUniform1ui64NV(location, x);
        }
        
        public unsafe static void glUniform1ui64vARB(int location, int count, ulong* value) {
            Pointers.glUniform1ui64vARB(location, count, value);
        }
        
        public unsafe static void glUniform1ui64vARB(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform1ui64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform1ui64vNV(int location, int count, ulong* value) {
            Pointers.glUniform1ui64vNV(location, count, value);
        }
        
        public unsafe static void glUniform1ui64vNV(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform1ui64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform1uiEXT(int location, uint v0) {
            Pointers.glUniform1uiEXT(location, v0);
        }
        
        public unsafe static void glUniform1uiv(int location, int count, uint* value) {
            Pointers.glUniform1uiv(location, count, value);
        }
        
        public unsafe static void glUniform1uiv(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform1uiv(location, count, value_);
        }
        
        public unsafe static void glUniform1uivEXT(int location, int count, uint* value) {
            Pointers.glUniform1uivEXT(location, count, value);
        }
        
        public unsafe static void glUniform1uivEXT(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform1uivEXT(location, count, value_);
        }
        
        public unsafe static void glUniform2d(int location, double x, double y) {
            Pointers.glUniform2d(location, x, y);
        }
        
        public unsafe static void glUniform2dv(int location, int count, double* value) {
            Pointers.glUniform2dv(location, count, value);
        }
        
        public unsafe static void glUniform2dv(int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniform2dv(location, count, value_);
        }
        
        public unsafe static void glUniform2f(int location, float v0, float v1) {
            Pointers.glUniform2f(location, v0, v1);
        }
        
        public unsafe static void glUniform2fARB(int location, float v0, float v1) {
            Pointers.glUniform2fARB(location, v0, v1);
        }
        
        public unsafe static void glUniform2fv(int location, int count, float* value) {
            Pointers.glUniform2fv(location, count, value);
        }
        
        public unsafe static void glUniform2fv(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform2fv(location, count, value_);
        }
        
        public unsafe static void glUniform2fvARB(int location, int count, float* value) {
            Pointers.glUniform2fvARB(location, count, value);
        }
        
        public unsafe static void glUniform2fvARB(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform2fvARB(location, count, value_);
        }
        
        public unsafe static void glUniform2i(int location, int v0, int v1) {
            Pointers.glUniform2i(location, v0, v1);
        }
        
        public unsafe static void glUniform2i64ARB(int location, long x, long y) {
            Pointers.glUniform2i64ARB(location, x, y);
        }
        
        public unsafe static void glUniform2i64NV(int location, long x, long y) {
            Pointers.glUniform2i64NV(location, x, y);
        }
        
        public unsafe static void glUniform2i64vARB(int location, int count, long* value) {
            Pointers.glUniform2i64vARB(location, count, value);
        }
        
        public unsafe static void glUniform2i64vARB(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform2i64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform2i64vNV(int location, int count, long* value) {
            Pointers.glUniform2i64vNV(location, count, value);
        }
        
        public unsafe static void glUniform2i64vNV(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform2i64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform2iARB(int location, int v0, int v1) {
            Pointers.glUniform2iARB(location, v0, v1);
        }
        
        public unsafe static void glUniform2iv(int location, int count, int* value) {
            Pointers.glUniform2iv(location, count, value);
        }
        
        public unsafe static void glUniform2iv(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform2iv(location, count, value_);
        }
        
        public unsafe static void glUniform2ivARB(int location, int count, int* value) {
            Pointers.glUniform2ivARB(location, count, value);
        }
        
        public unsafe static void glUniform2ivARB(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform2ivARB(location, count, value_);
        }
        
        public unsafe static void glUniform2ui(int location, uint v0, uint v1) {
            Pointers.glUniform2ui(location, v0, v1);
        }
        
        public unsafe static void glUniform2ui64ARB(int location, ulong x, ulong y) {
            Pointers.glUniform2ui64ARB(location, x, y);
        }
        
        public unsafe static void glUniform2ui64NV(int location, ulong x, ulong y) {
            Pointers.glUniform2ui64NV(location, x, y);
        }
        
        public unsafe static void glUniform2ui64vARB(int location, int count, ulong* value) {
            Pointers.glUniform2ui64vARB(location, count, value);
        }
        
        public unsafe static void glUniform2ui64vARB(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform2ui64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform2ui64vNV(int location, int count, ulong* value) {
            Pointers.glUniform2ui64vNV(location, count, value);
        }
        
        public unsafe static void glUniform2ui64vNV(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform2ui64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform2uiEXT(int location, uint v0, uint v1) {
            Pointers.glUniform2uiEXT(location, v0, v1);
        }
        
        public unsafe static void glUniform2uiv(int location, int count, uint* value) {
            Pointers.glUniform2uiv(location, count, value);
        }
        
        public unsafe static void glUniform2uiv(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform2uiv(location, count, value_);
        }
        
        public unsafe static void glUniform2uivEXT(int location, int count, uint* value) {
            Pointers.glUniform2uivEXT(location, count, value);
        }
        
        public unsafe static void glUniform2uivEXT(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform2uivEXT(location, count, value_);
        }
        
        public unsafe static void glUniform3d(int location, double x, double y, double z) {
            Pointers.glUniform3d(location, x, y, z);
        }
        
        public unsafe static void glUniform3dv(int location, int count, double* value) {
            Pointers.glUniform3dv(location, count, value);
        }
        
        public unsafe static void glUniform3dv(int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniform3dv(location, count, value_);
        }
        
        public unsafe static void glUniform3f(int location, float v0, float v1, float v2) {
            Pointers.glUniform3f(location, v0, v1, v2);
        }
        
        public unsafe static void glUniform3fARB(int location, float v0, float v1, float v2) {
            Pointers.glUniform3fARB(location, v0, v1, v2);
        }
        
        public unsafe static void glUniform3fv(int location, int count, float* value) {
            Pointers.glUniform3fv(location, count, value);
        }
        
        public unsafe static void glUniform3fv(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform3fv(location, count, value_);
        }
        
        public unsafe static void glUniform3fvARB(int location, int count, float* value) {
            Pointers.glUniform3fvARB(location, count, value);
        }
        
        public unsafe static void glUniform3fvARB(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform3fvARB(location, count, value_);
        }
        
        public unsafe static void glUniform3i(int location, int v0, int v1, int v2) {
            Pointers.glUniform3i(location, v0, v1, v2);
        }
        
        public unsafe static void glUniform3i64ARB(int location, long x, long y, long z) {
            Pointers.glUniform3i64ARB(location, x, y, z);
        }
        
        public unsafe static void glUniform3i64NV(int location, long x, long y, long z) {
            Pointers.glUniform3i64NV(location, x, y, z);
        }
        
        public unsafe static void glUniform3i64vARB(int location, int count, long* value) {
            Pointers.glUniform3i64vARB(location, count, value);
        }
        
        public unsafe static void glUniform3i64vARB(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform3i64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform3i64vNV(int location, int count, long* value) {
            Pointers.glUniform3i64vNV(location, count, value);
        }
        
        public unsafe static void glUniform3i64vNV(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform3i64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform3iARB(int location, int v0, int v1, int v2) {
            Pointers.glUniform3iARB(location, v0, v1, v2);
        }
        
        public unsafe static void glUniform3iv(int location, int count, int* value) {
            Pointers.glUniform3iv(location, count, value);
        }
        
        public unsafe static void glUniform3iv(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform3iv(location, count, value_);
        }
        
        public unsafe static void glUniform3ivARB(int location, int count, int* value) {
            Pointers.glUniform3ivARB(location, count, value);
        }
        
        public unsafe static void glUniform3ivARB(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform3ivARB(location, count, value_);
        }
        
        public unsafe static void glUniform3ui(int location, uint v0, uint v1, uint v2) {
            Pointers.glUniform3ui(location, v0, v1, v2);
        }
        
        public unsafe static void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z) {
            Pointers.glUniform3ui64ARB(location, x, y, z);
        }
        
        public unsafe static void glUniform3ui64NV(int location, ulong x, ulong y, ulong z) {
            Pointers.glUniform3ui64NV(location, x, y, z);
        }
        
        public unsafe static void glUniform3ui64vARB(int location, int count, ulong* value) {
            Pointers.glUniform3ui64vARB(location, count, value);
        }
        
        public unsafe static void glUniform3ui64vARB(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform3ui64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform3ui64vNV(int location, int count, ulong* value) {
            Pointers.glUniform3ui64vNV(location, count, value);
        }
        
        public unsafe static void glUniform3ui64vNV(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform3ui64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform3uiEXT(int location, uint v0, uint v1, uint v2) {
            Pointers.glUniform3uiEXT(location, v0, v1, v2);
        }
        
        public unsafe static void glUniform3uiv(int location, int count, uint* value) {
            Pointers.glUniform3uiv(location, count, value);
        }
        
        public unsafe static void glUniform3uiv(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform3uiv(location, count, value_);
        }
        
        public unsafe static void glUniform3uivEXT(int location, int count, uint* value) {
            Pointers.glUniform3uivEXT(location, count, value);
        }
        
        public unsafe static void glUniform3uivEXT(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform3uivEXT(location, count, value_);
        }
        
        public unsafe static void glUniform4d(int location, double x, double y, double z, double w) {
            Pointers.glUniform4d(location, x, y, z, w);
        }
        
        public unsafe static void glUniform4dv(int location, int count, double* value) {
            Pointers.glUniform4dv(location, count, value);
        }
        
        public unsafe static void glUniform4dv(int location, int count, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniform4dv(location, count, value_);
        }
        
        public unsafe static void glUniform4f(int location, float v0, float v1, float v2, float v3) {
            Pointers.glUniform4f(location, v0, v1, v2, v3);
        }
        
        public unsafe static void glUniform4fARB(int location, float v0, float v1, float v2, float v3) {
            Pointers.glUniform4fARB(location, v0, v1, v2, v3);
        }
        
        public unsafe static void glUniform4fv(int location, int count, float* value) {
            Pointers.glUniform4fv(location, count, value);
        }
        
        public unsafe static void glUniform4fv(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform4fv(location, count, value_);
        }
        
        public unsafe static void glUniform4fvARB(int location, int count, float* value) {
            Pointers.glUniform4fvARB(location, count, value);
        }
        
        public unsafe static void glUniform4fvARB(int location, int count, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniform4fvARB(location, count, value_);
        }
        
        public unsafe static void glUniform4i(int location, int v0, int v1, int v2, int v3) {
            Pointers.glUniform4i(location, v0, v1, v2, v3);
        }
        
        public unsafe static void glUniform4i64ARB(int location, long x, long y, long z, long w) {
            Pointers.glUniform4i64ARB(location, x, y, z, w);
        }
        
        public unsafe static void glUniform4i64NV(int location, long x, long y, long z, long w) {
            Pointers.glUniform4i64NV(location, x, y, z, w);
        }
        
        public unsafe static void glUniform4i64vARB(int location, int count, long* value) {
            Pointers.glUniform4i64vARB(location, count, value);
        }
        
        public unsafe static void glUniform4i64vARB(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform4i64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform4i64vNV(int location, int count, long* value) {
            Pointers.glUniform4i64vNV(location, count, value);
        }
        
        public unsafe static void glUniform4i64vNV(int location, int count, long[] value) {
            fixed(long* value_ = &value[0])
                Pointers.glUniform4i64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform4iARB(int location, int v0, int v1, int v2, int v3) {
            Pointers.glUniform4iARB(location, v0, v1, v2, v3);
        }
        
        public unsafe static void glUniform4iv(int location, int count, int* value) {
            Pointers.glUniform4iv(location, count, value);
        }
        
        public unsafe static void glUniform4iv(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform4iv(location, count, value_);
        }
        
        public unsafe static void glUniform4ivARB(int location, int count, int* value) {
            Pointers.glUniform4ivARB(location, count, value);
        }
        
        public unsafe static void glUniform4ivARB(int location, int count, int[] value) {
            fixed(int* value_ = &value[0])
                Pointers.glUniform4ivARB(location, count, value_);
        }
        
        public unsafe static void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3) {
            Pointers.glUniform4ui(location, v0, v1, v2, v3);
        }
        
        public unsafe static void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w) {
            Pointers.glUniform4ui64ARB(location, x, y, z, w);
        }
        
        public unsafe static void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w) {
            Pointers.glUniform4ui64NV(location, x, y, z, w);
        }
        
        public unsafe static void glUniform4ui64vARB(int location, int count, ulong* value) {
            Pointers.glUniform4ui64vARB(location, count, value);
        }
        
        public unsafe static void glUniform4ui64vARB(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform4ui64vARB(location, count, value_);
        }
        
        public unsafe static void glUniform4ui64vNV(int location, int count, ulong* value) {
            Pointers.glUniform4ui64vNV(location, count, value);
        }
        
        public unsafe static void glUniform4ui64vNV(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniform4ui64vNV(location, count, value_);
        }
        
        public unsafe static void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3) {
            Pointers.glUniform4uiEXT(location, v0, v1, v2, v3);
        }
        
        public unsafe static void glUniform4uiv(int location, int count, uint* value) {
            Pointers.glUniform4uiv(location, count, value);
        }
        
        public unsafe static void glUniform4uiv(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform4uiv(location, count, value_);
        }
        
        public unsafe static void glUniform4uivEXT(int location, int count, uint* value) {
            Pointers.glUniform4uivEXT(location, count, value);
        }
        
        public unsafe static void glUniform4uivEXT(int location, int count, uint[] value) {
            fixed(uint* value_ = &value[0])
                Pointers.glUniform4uivEXT(location, count, value_);
        }
        
        public unsafe static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) {
            Pointers.glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
        }
        
        public unsafe static void glUniformBufferEXT(uint program, int location, uint buffer) {
            Pointers.glUniformBufferEXT(program, location, buffer);
        }
        
        public unsafe static void glUniformHandleui64ARB(int location, ulong value) {
            Pointers.glUniformHandleui64ARB(location, value);
        }
        
        public unsafe static void glUniformHandleui64IMG(int location, ulong value) {
            Pointers.glUniformHandleui64IMG(location, value);
        }
        
        public unsafe static void glUniformHandleui64NV(int location, ulong value) {
            Pointers.glUniformHandleui64NV(location, value);
        }
        
        public unsafe static void glUniformHandleui64vARB(int location, int count, ulong* value) {
            Pointers.glUniformHandleui64vARB(location, count, value);
        }
        
        public unsafe static void glUniformHandleui64vARB(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniformHandleui64vARB(location, count, value_);
        }
        
        public unsafe static void glUniformHandleui64vIMG(int location, int count, ulong* value) {
            Pointers.glUniformHandleui64vIMG(location, count, value);
        }
        
        public unsafe static void glUniformHandleui64vIMG(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniformHandleui64vIMG(location, count, value_);
        }
        
        public unsafe static void glUniformHandleui64vNV(int location, int count, ulong* value) {
            Pointers.glUniformHandleui64vNV(location, count, value);
        }
        
        public unsafe static void glUniformHandleui64vNV(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniformHandleui64vNV(location, count, value_);
        }
        
        public unsafe static void glUniformMatrix2dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix2dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix2dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix2fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix2fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2fvARB(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix2fvARB(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2fvARB(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix2fvARB(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2x3dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix2x3dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2x3dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix2x3dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2x3fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix2x3fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2x3fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix2x3fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2x3fvNV(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix2x3fvNV(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2x3fvNV(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix2x3fvNV(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2x4dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix2x4dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2x4dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix2x4dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2x4fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix2x4fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2x4fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix2x4fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix2x4fvNV(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix2x4fvNV(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix2x4fvNV(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix2x4fvNV(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix3dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix3dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix3fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix3fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3fvARB(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix3fvARB(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3fvARB(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix3fvARB(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3x2dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix3x2dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3x2dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix3x2dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3x2fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix3x2fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3x2fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix3x2fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3x2fvNV(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix3x2fvNV(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3x2fvNV(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix3x2fvNV(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3x4dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix3x4dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3x4dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix3x4dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3x4fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix3x4fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3x4fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix3x4fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix3x4fvNV(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix3x4fvNV(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix3x4fvNV(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix3x4fvNV(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix4dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix4dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix4fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix4fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4fvARB(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix4fvARB(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4fvARB(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix4fvARB(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4x2dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix4x2dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4x2dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix4x2dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4x2fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix4x2fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4x2fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix4x2fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4x2fvNV(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix4x2fvNV(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4x2fvNV(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix4x2fvNV(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4x3dv(int location, int count, bool transpose, double* value) {
            Pointers.glUniformMatrix4x3dv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4x3dv(int location, int count, bool transpose, double[] value) {
            fixed(double* value_ = &value[0])
                Pointers.glUniformMatrix4x3dv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4x3fv(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix4x3fv(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4x3fv(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix4x3fv(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformMatrix4x3fvNV(int location, int count, bool transpose, float* value) {
            Pointers.glUniformMatrix4x3fvNV(location, count, transpose, value);
        }
        
        public unsafe static void glUniformMatrix4x3fvNV(int location, int count, bool transpose, float[] value) {
            fixed(float* value_ = &value[0])
                Pointers.glUniformMatrix4x3fvNV(location, count, transpose, value_);
        }
        
        public unsafe static void glUniformSubroutinesuiv(int shadertype, int count, uint* indices) {
            Pointers.glUniformSubroutinesuiv(shadertype, count, indices);
        }
        
        public unsafe static void glUniformSubroutinesuiv(int shadertype, int count, uint[] indices) {
            fixed(uint* indices_ = &indices[0])
                Pointers.glUniformSubroutinesuiv(shadertype, count, indices_);
        }
        
        public unsafe static void glUniformSubroutinesuiv(Enums.ShaderType shadertype, int count, uint* indices) {
            Pointers.glUniformSubroutinesuiv((int)shadertype, count, indices);
        }
        
        public unsafe static void glUniformSubroutinesuiv(Enums.ShaderType shadertype, int count, uint[] indices) {
            fixed(uint* indices_ = &indices[0])
                Pointers.glUniformSubroutinesuiv((int)shadertype, count, indices_);
        }
        
        public unsafe static void glUniformui64NV(int location, ulong value) {
            Pointers.glUniformui64NV(location, value);
        }
        
        public unsafe static void glUniformui64vNV(int location, int count, ulong* value) {
            Pointers.glUniformui64vNV(location, count, value);
        }
        
        public unsafe static void glUniformui64vNV(int location, int count, ulong[] value) {
            fixed(ulong* value_ = &value[0])
                Pointers.glUniformui64vNV(location, count, value_);
        }
        
        public unsafe static void glUnlockArraysEXT() {
            Pointers.glUnlockArraysEXT();
        }
        
        public unsafe static bool glUnmapBuffer(int target) {
            return Pointers.glUnmapBuffer(target);
        }
        
        public unsafe static bool glUnmapBufferARB(int target) {
            return Pointers.glUnmapBufferARB(target);
        }
        
        public unsafe static bool glUnmapBufferOES(int target) {
            return Pointers.glUnmapBufferOES(target);
        }
        
        public unsafe static bool glUnmapNamedBuffer(uint buffer) {
            return Pointers.glUnmapNamedBuffer(buffer);
        }
        
        public unsafe static bool glUnmapNamedBufferEXT(uint buffer) {
            return Pointers.glUnmapNamedBufferEXT(buffer);
        }
        
        public unsafe static void glUnmapObjectBufferATI(uint buffer) {
            Pointers.glUnmapObjectBufferATI(buffer);
        }
        
        public unsafe static void glUnmapTexture2DINTEL(uint texture, int level) {
            Pointers.glUnmapTexture2DINTEL(texture, level);
        }
        
        public unsafe static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, int preserve) {
            Pointers.glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
        }
        
        public unsafe static void glUseProgram(uint program) {
            Pointers.glUseProgram(program);
        }
        
        public unsafe static void glUseProgramObjectARB(uint programObj) {
            Pointers.glUseProgramObjectARB(programObj);
        }
        
        public unsafe static void glUseProgramStages(uint pipeline, uint stages, uint program) {
            Pointers.glUseProgramStages(pipeline, stages, program);
        }
        
        public unsafe static void glUseProgramStages(uint pipeline, Enums.UseProgramStageMask stages, uint program) {
            Pointers.glUseProgramStages(pipeline, (uint)stages, program);
        }
        
        public unsafe static void glUseProgramStagesEXT(uint pipeline, uint stages, uint program) {
            Pointers.glUseProgramStagesEXT(pipeline, stages, program);
        }
        
        public unsafe static void glUseProgramStagesEXT(uint pipeline, Enums.UseProgramStageMask stages, uint program) {
            Pointers.glUseProgramStagesEXT(pipeline, (uint)stages, program);
        }
        
        public unsafe static void glUseShaderProgramEXT(int type, uint program) {
            Pointers.glUseShaderProgramEXT(type, program);
        }
        
        public unsafe static void glVDPAUFiniNV() {
            Pointers.glVDPAUFiniNV();
        }
        
        public unsafe static void glVDPAUGetSurfaceivNV(IntPtr surface, int pname, int bufSize, int* length, int* values) {
            Pointers.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
        }
        
        public unsafe static void glVDPAUGetSurfaceivNV(IntPtr surface, int pname, int bufSize, int* length, int[] values) {
            fixed(int* values_ = &values[0])
                Pointers.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values_);
        }
        
        public unsafe static void glVDPAUGetSurfaceivNV(IntPtr surface, int pname, int bufSize, int[] length, int* values) {
            fixed(int* length_ = &length[0])
                Pointers.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length_, values);
        }
        
        public unsafe static void glVDPAUGetSurfaceivNV(IntPtr surface, int pname, int bufSize, int[] length, int[] values) {
            fixed(int* length_ = &length[0])
            fixed(int* values_ = &values[0])
                Pointers.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length_, values_);
        }
        
        public unsafe static void glVDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress) {
            Pointers.glVDPAUInitNV(vdpDevice, getProcAddress);
        }
        
        public unsafe static bool glVDPAUIsSurfaceNV(IntPtr surface) {
            return Pointers.glVDPAUIsSurfaceNV(surface);
        }
        
        public unsafe static void glVDPAUMapSurfacesNV(int numSurfaces, IntPtr* surfaces) {
            Pointers.glVDPAUMapSurfacesNV(numSurfaces, surfaces);
        }
        
        public unsafe static void glVDPAUMapSurfacesNV(int numSurfaces, IntPtr[] surfaces) {
            fixed(IntPtr* surfaces_ = &surfaces[0])
                Pointers.glVDPAUMapSurfacesNV(numSurfaces, surfaces_);
        }
        
        public unsafe static IntPtr glVDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames) {
            return Pointers.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
        }
        
        public unsafe static IntPtr glVDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint[] textureNames) {
            fixed(uint* textureNames_ = &textureNames[0])
                return Pointers.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames_);
        }
        
        public unsafe static IntPtr glVDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames) {
            return Pointers.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
        }
        
        public unsafe static IntPtr glVDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint[] textureNames) {
            fixed(uint* textureNames_ = &textureNames[0])
                return Pointers.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames_);
        }
        
        public unsafe static void glVDPAUSurfaceAccessNV(IntPtr surface, int access) {
            Pointers.glVDPAUSurfaceAccessNV(surface, access);
        }
        
        public unsafe static void glVDPAUUnmapSurfacesNV(int numSurface, IntPtr* surfaces) {
            Pointers.glVDPAUUnmapSurfacesNV(numSurface, surfaces);
        }
        
        public unsafe static void glVDPAUUnmapSurfacesNV(int numSurface, IntPtr[] surfaces) {
            fixed(IntPtr* surfaces_ = &surfaces[0])
                Pointers.glVDPAUUnmapSurfacesNV(numSurface, surfaces_);
        }
        
        public unsafe static void glVDPAUUnregisterSurfaceNV(IntPtr surface) {
            Pointers.glVDPAUUnregisterSurfaceNV(surface);
        }
        
        public unsafe static void glValidateProgram(uint program) {
            Pointers.glValidateProgram(program);
        }
        
        public unsafe static void glValidateProgramARB(uint programObj) {
            Pointers.glValidateProgramARB(programObj);
        }
        
        public unsafe static void glValidateProgramPipeline(uint pipeline) {
            Pointers.glValidateProgramPipeline(pipeline);
        }
        
        public unsafe static void glValidateProgramPipelineEXT(uint pipeline) {
            Pointers.glValidateProgramPipelineEXT(pipeline);
        }
        
        public unsafe static void glVariantArrayObjectATI(uint id, int type, int stride, uint buffer, uint offset) {
            Pointers.glVariantArrayObjectATI(id, type, stride, buffer, offset);
        }
        
        public unsafe static void glVariantPointerEXT(uint id, int type, uint stride, IntPtr addr) {
            Pointers.glVariantPointerEXT(id, type, stride, addr);
        }
        
        public unsafe static void glVariantbvEXT(uint id, sbyte* addr) {
            Pointers.glVariantbvEXT(id, addr);
        }
        
        public unsafe static void glVariantbvEXT(uint id, sbyte[] addr) {
            fixed(sbyte* addr_ = &addr[0])
                Pointers.glVariantbvEXT(id, addr_);
        }
        
        public unsafe static void glVariantdvEXT(uint id, double* addr) {
            Pointers.glVariantdvEXT(id, addr);
        }
        
        public unsafe static void glVariantdvEXT(uint id, double[] addr) {
            fixed(double* addr_ = &addr[0])
                Pointers.glVariantdvEXT(id, addr_);
        }
        
        public unsafe static void glVariantfvEXT(uint id, float* addr) {
            Pointers.glVariantfvEXT(id, addr);
        }
        
        public unsafe static void glVariantfvEXT(uint id, float[] addr) {
            fixed(float* addr_ = &addr[0])
                Pointers.glVariantfvEXT(id, addr_);
        }
        
        public unsafe static void glVariantivEXT(uint id, int* addr) {
            Pointers.glVariantivEXT(id, addr);
        }
        
        public unsafe static void glVariantivEXT(uint id, int[] addr) {
            fixed(int* addr_ = &addr[0])
                Pointers.glVariantivEXT(id, addr_);
        }
        
        public unsafe static void glVariantsvEXT(uint id, short* addr) {
            Pointers.glVariantsvEXT(id, addr);
        }
        
        public unsafe static void glVariantsvEXT(uint id, short[] addr) {
            fixed(short* addr_ = &addr[0])
                Pointers.glVariantsvEXT(id, addr_);
        }
        
        public unsafe static void glVariantubvEXT(uint id, byte* addr) {
            Pointers.glVariantubvEXT(id, addr);
        }
        
        public unsafe static void glVariantubvEXT(uint id, byte[] addr) {
            fixed(byte* addr_ = &addr[0])
                Pointers.glVariantubvEXT(id, addr_);
        }
        
        public unsafe static void glVariantuivEXT(uint id, uint* addr) {
            Pointers.glVariantuivEXT(id, addr);
        }
        
        public unsafe static void glVariantuivEXT(uint id, uint[] addr) {
            fixed(uint* addr_ = &addr[0])
                Pointers.glVariantuivEXT(id, addr_);
        }
        
        public unsafe static void glVariantusvEXT(uint id, ushort* addr) {
            Pointers.glVariantusvEXT(id, addr);
        }
        
        public unsafe static void glVariantusvEXT(uint id, ushort[] addr) {
            fixed(ushort* addr_ = &addr[0])
                Pointers.glVariantusvEXT(id, addr_);
        }
        
        public unsafe static void glVertex2bOES(sbyte x, sbyte y) {
            Pointers.glVertex2bOES(x, y);
        }
        
        public unsafe static void glVertex2bvOES(sbyte* coords) {
            Pointers.glVertex2bvOES(coords);
        }
        
        public unsafe static void glVertex2bvOES(sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glVertex2bvOES(coords_);
        }
        
        public unsafe static void glVertex2d(double x, double y) {
            Pointers.glVertex2d(x, y);
        }
        
        public unsafe static void glVertex2dv(double* v) {
            Pointers.glVertex2dv(v);
        }
        
        public unsafe static void glVertex2dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertex2dv(v_);
        }
        
        public unsafe static void glVertex2f(float x, float y) {
            Pointers.glVertex2f(x, y);
        }
        
        public unsafe static void glVertex2fv(float* v) {
            Pointers.glVertex2fv(v);
        }
        
        public unsafe static void glVertex2fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertex2fv(v_);
        }
        
        public unsafe static void glVertex2hNV(short x, short y) {
            Pointers.glVertex2hNV(x, y);
        }
        
        public unsafe static void glVertex2hvNV(short* v) {
            Pointers.glVertex2hvNV(v);
        }
        
        public unsafe static void glVertex2hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertex2hvNV(v_);
        }
        
        public unsafe static void glVertex2i(int x, int y) {
            Pointers.glVertex2i(x, y);
        }
        
        public unsafe static void glVertex2iv(int* v) {
            Pointers.glVertex2iv(v);
        }
        
        public unsafe static void glVertex2iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertex2iv(v_);
        }
        
        public unsafe static void glVertex2s(short x, short y) {
            Pointers.glVertex2s(x, y);
        }
        
        public unsafe static void glVertex2sv(short* v) {
            Pointers.glVertex2sv(v);
        }
        
        public unsafe static void glVertex2sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertex2sv(v_);
        }
        
        public unsafe static void glVertex2xOES(IntPtr x) {
            Pointers.glVertex2xOES(x);
        }
        
        public unsafe static void glVertex2xvOES(IntPtr* coords) {
            Pointers.glVertex2xvOES(coords);
        }
        
        public unsafe static void glVertex2xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glVertex2xvOES(coords_);
        }
        
        public unsafe static void glVertex3bOES(sbyte x, sbyte y, sbyte z) {
            Pointers.glVertex3bOES(x, y, z);
        }
        
        public unsafe static void glVertex3bvOES(sbyte* coords) {
            Pointers.glVertex3bvOES(coords);
        }
        
        public unsafe static void glVertex3bvOES(sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glVertex3bvOES(coords_);
        }
        
        public unsafe static void glVertex3d(double x, double y, double z) {
            Pointers.glVertex3d(x, y, z);
        }
        
        public unsafe static void glVertex3dv(double* v) {
            Pointers.glVertex3dv(v);
        }
        
        public unsafe static void glVertex3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertex3dv(v_);
        }
        
        public unsafe static void glVertex3f(float x, float y, float z) {
            Pointers.glVertex3f(x, y, z);
        }
        
        public unsafe static void glVertex3fv(float* v) {
            Pointers.glVertex3fv(v);
        }
        
        public unsafe static void glVertex3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertex3fv(v_);
        }
        
        public unsafe static void glVertex3hNV(short x, short y, short z) {
            Pointers.glVertex3hNV(x, y, z);
        }
        
        public unsafe static void glVertex3hvNV(short* v) {
            Pointers.glVertex3hvNV(v);
        }
        
        public unsafe static void glVertex3hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertex3hvNV(v_);
        }
        
        public unsafe static void glVertex3i(int x, int y, int z) {
            Pointers.glVertex3i(x, y, z);
        }
        
        public unsafe static void glVertex3iv(int* v) {
            Pointers.glVertex3iv(v);
        }
        
        public unsafe static void glVertex3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertex3iv(v_);
        }
        
        public unsafe static void glVertex3s(short x, short y, short z) {
            Pointers.glVertex3s(x, y, z);
        }
        
        public unsafe static void glVertex3sv(short* v) {
            Pointers.glVertex3sv(v);
        }
        
        public unsafe static void glVertex3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertex3sv(v_);
        }
        
        public unsafe static void glVertex3xOES(IntPtr x, IntPtr y) {
            Pointers.glVertex3xOES(x, y);
        }
        
        public unsafe static void glVertex3xvOES(IntPtr* coords) {
            Pointers.glVertex3xvOES(coords);
        }
        
        public unsafe static void glVertex3xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glVertex3xvOES(coords_);
        }
        
        public unsafe static void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w) {
            Pointers.glVertex4bOES(x, y, z, w);
        }
        
        public unsafe static void glVertex4bvOES(sbyte* coords) {
            Pointers.glVertex4bvOES(coords);
        }
        
        public unsafe static void glVertex4bvOES(sbyte[] coords) {
            fixed(sbyte* coords_ = &coords[0])
                Pointers.glVertex4bvOES(coords_);
        }
        
        public unsafe static void glVertex4d(double x, double y, double z, double w) {
            Pointers.glVertex4d(x, y, z, w);
        }
        
        public unsafe static void glVertex4dv(double* v) {
            Pointers.glVertex4dv(v);
        }
        
        public unsafe static void glVertex4dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertex4dv(v_);
        }
        
        public unsafe static void glVertex4f(float x, float y, float z, float w) {
            Pointers.glVertex4f(x, y, z, w);
        }
        
        public unsafe static void glVertex4fv(float* v) {
            Pointers.glVertex4fv(v);
        }
        
        public unsafe static void glVertex4fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertex4fv(v_);
        }
        
        public unsafe static void glVertex4hNV(short x, short y, short z, short w) {
            Pointers.glVertex4hNV(x, y, z, w);
        }
        
        public unsafe static void glVertex4hvNV(short* v) {
            Pointers.glVertex4hvNV(v);
        }
        
        public unsafe static void glVertex4hvNV(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertex4hvNV(v_);
        }
        
        public unsafe static void glVertex4i(int x, int y, int z, int w) {
            Pointers.glVertex4i(x, y, z, w);
        }
        
        public unsafe static void glVertex4iv(int* v) {
            Pointers.glVertex4iv(v);
        }
        
        public unsafe static void glVertex4iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertex4iv(v_);
        }
        
        public unsafe static void glVertex4s(short x, short y, short z, short w) {
            Pointers.glVertex4s(x, y, z, w);
        }
        
        public unsafe static void glVertex4sv(short* v) {
            Pointers.glVertex4sv(v);
        }
        
        public unsafe static void glVertex4sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertex4sv(v_);
        }
        
        public unsafe static void glVertex4xOES(IntPtr x, IntPtr y, IntPtr z) {
            Pointers.glVertex4xOES(x, y, z);
        }
        
        public unsafe static void glVertex4xvOES(IntPtr* coords) {
            Pointers.glVertex4xvOES(coords);
        }
        
        public unsafe static void glVertex4xvOES(IntPtr[] coords) {
            fixed(IntPtr* coords_ = &coords[0])
                Pointers.glVertex4xvOES(coords_);
        }
        
        public unsafe static void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex) {
            Pointers.glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
        }
        
        public unsafe static void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset) {
            Pointers.glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        public unsafe static void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset) {
            Pointers.glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public unsafe static void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset) {
            Pointers.glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public unsafe static void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, uint offset, int stride) {
            Pointers.glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
        }
        
        public unsafe static void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor) {
            Pointers.glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
        }
        
        public unsafe static void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset) {
            Pointers.glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, uint offset) {
            Pointers.glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
        }
        
        public unsafe static void glVertexArrayElementBuffer(uint vaobj, uint buffer) {
            Pointers.glVertexArrayElementBuffer(vaobj, buffer);
        }
        
        public unsafe static void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset) {
            Pointers.glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset) {
            Pointers.glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, int type, int stride, uint offset) {
            Pointers.glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset) {
            Pointers.glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayParameteriAPPLE(int pname, int param) {
            Pointers.glVertexArrayParameteriAPPLE(pname, param);
        }
        
        public unsafe static void glVertexArrayRangeAPPLE(int length, IntPtr pointer) {
            Pointers.glVertexArrayRangeAPPLE(length, pointer);
        }
        
        public unsafe static void glVertexArrayRangeNV(int length, IntPtr pointer) {
            Pointers.glVertexArrayRangeNV(length, pointer);
        }
        
        public unsafe static void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset) {
            Pointers.glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset) {
            Pointers.glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex) {
            Pointers.glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
        }
        
        public unsafe static void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor) {
            Pointers.glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
        }
        
        public unsafe static void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset) {
            Pointers.glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        public unsafe static void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset) {
            Pointers.glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public unsafe static void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, uint offset) {
            Pointers.glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset) {
            Pointers.glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public unsafe static void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, uint offset) {
            Pointers.glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
        }
        
        public unsafe static void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, bool normalized, int stride, uint offset) {
            Pointers.glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
        }
        
        public unsafe static void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor) {
            Pointers.glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
        }
        
        public unsafe static void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, uint offset, int stride) {
            Pointers.glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, uint* offsets, int* strides) {
            Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, uint* offsets, int[] strides) {
            fixed(int* strides_ = &strides[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides_);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, uint[] offsets, int* strides) {
            fixed(uint* offsets_ = &offsets[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets_, strides);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, uint[] offsets, int[] strides) {
            fixed(uint* offsets_ = &offsets[0])
            fixed(int* strides_ = &strides[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets_, strides_);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, uint* offsets, int* strides) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers_, offsets, strides);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, uint* offsets, int[] strides) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(int* strides_ = &strides[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers_, offsets, strides_);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, uint[] offsets, int* strides) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* offsets_ = &offsets[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers_, offsets_, strides);
        }
        
        public unsafe static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, uint[] offsets, int[] strides) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* offsets_ = &offsets[0])
            fixed(int* strides_ = &strides[0])
                Pointers.glVertexArrayVertexBuffers(vaobj, first, count, buffers_, offsets_, strides_);
        }
        
        public unsafe static void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset) {
            Pointers.glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public unsafe static void glVertexAttrib1d(uint index, double x) {
            Pointers.glVertexAttrib1d(index, x);
        }
        
        public unsafe static void glVertexAttrib1dARB(uint index, double x) {
            Pointers.glVertexAttrib1dARB(index, x);
        }
        
        public unsafe static void glVertexAttrib1dNV(uint index, double x) {
            Pointers.glVertexAttrib1dNV(index, x);
        }
        
        public unsafe static void glVertexAttrib1dv(uint index, double* v) {
            Pointers.glVertexAttrib1dv(index, v);
        }
        
        public unsafe static void glVertexAttrib1dv(uint index, out double v) {
            fixed(double* v_ = &v)
                Pointers.glVertexAttrib1dv(index, v_);
        }
        
        public unsafe static void glVertexAttrib1dvARB(uint index, double* v) {
            Pointers.glVertexAttrib1dvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib1dvARB(uint index, out double v) {
            fixed(double* v_ = &v)
                Pointers.glVertexAttrib1dvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib1dvNV(uint index, double* v) {
            Pointers.glVertexAttrib1dvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib1dvNV(uint index, out double v) {
            fixed(double* v_ = &v)
                Pointers.glVertexAttrib1dvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib1f(uint index, float x) {
            Pointers.glVertexAttrib1f(index, x);
        }
        
        public unsafe static void glVertexAttrib1fARB(uint index, float x) {
            Pointers.glVertexAttrib1fARB(index, x);
        }
        
        public unsafe static void glVertexAttrib1fNV(uint index, float x) {
            Pointers.glVertexAttrib1fNV(index, x);
        }
        
        public unsafe static void glVertexAttrib1fv(uint index, float* v) {
            Pointers.glVertexAttrib1fv(index, v);
        }
        
        public unsafe static void glVertexAttrib1fv(uint index, out float v) {
            fixed(float* v_ = &v)
                Pointers.glVertexAttrib1fv(index, v_);
        }
        
        public unsafe static void glVertexAttrib1fvARB(uint index, float* v) {
            Pointers.glVertexAttrib1fvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib1fvARB(uint index, out float v) {
            fixed(float* v_ = &v)
                Pointers.glVertexAttrib1fvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib1fvNV(uint index, float* v) {
            Pointers.glVertexAttrib1fvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib1fvNV(uint index, out float v) {
            fixed(float* v_ = &v)
                Pointers.glVertexAttrib1fvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib1hNV(uint index, short x) {
            Pointers.glVertexAttrib1hNV(index, x);
        }
        
        public unsafe static void glVertexAttrib1hvNV(uint index, short* v) {
            Pointers.glVertexAttrib1hvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib1hvNV(uint index, out short v) {
            fixed(short* v_ = &v)
                Pointers.glVertexAttrib1hvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib1s(uint index, short x) {
            Pointers.glVertexAttrib1s(index, x);
        }
        
        public unsafe static void glVertexAttrib1sARB(uint index, short x) {
            Pointers.glVertexAttrib1sARB(index, x);
        }
        
        public unsafe static void glVertexAttrib1sNV(uint index, short x) {
            Pointers.glVertexAttrib1sNV(index, x);
        }
        
        public unsafe static void glVertexAttrib1sv(uint index, short* v) {
            Pointers.glVertexAttrib1sv(index, v);
        }
        
        public unsafe static void glVertexAttrib1sv(uint index, out short v) {
            fixed(short* v_ = &v)
                Pointers.glVertexAttrib1sv(index, v_);
        }
        
        public unsafe static void glVertexAttrib1svARB(uint index, short* v) {
            Pointers.glVertexAttrib1svARB(index, v);
        }
        
        public unsafe static void glVertexAttrib1svARB(uint index, out short v) {
            fixed(short* v_ = &v)
                Pointers.glVertexAttrib1svARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib1svNV(uint index, short* v) {
            Pointers.glVertexAttrib1svNV(index, v);
        }
        
        public unsafe static void glVertexAttrib1svNV(uint index, out short v) {
            fixed(short* v_ = &v)
                Pointers.glVertexAttrib1svNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib2d(uint index, double x, double y) {
            Pointers.glVertexAttrib2d(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2dARB(uint index, double x, double y) {
            Pointers.glVertexAttrib2dARB(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2dNV(uint index, double x, double y) {
            Pointers.glVertexAttrib2dNV(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2dv(uint index, double* v) {
            Pointers.glVertexAttrib2dv(index, v);
        }
        
        public unsafe static void glVertexAttrib2dv(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib2dv(index, v_);
        }
        
        public unsafe static void glVertexAttrib2dvARB(uint index, double* v) {
            Pointers.glVertexAttrib2dvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib2dvARB(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib2dvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib2dvNV(uint index, double* v) {
            Pointers.glVertexAttrib2dvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib2dvNV(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib2dvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib2f(uint index, float x, float y) {
            Pointers.glVertexAttrib2f(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2fARB(uint index, float x, float y) {
            Pointers.glVertexAttrib2fARB(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2fNV(uint index, float x, float y) {
            Pointers.glVertexAttrib2fNV(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2fv(uint index, float* v) {
            Pointers.glVertexAttrib2fv(index, v);
        }
        
        public unsafe static void glVertexAttrib2fv(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib2fv(index, v_);
        }
        
        public unsafe static void glVertexAttrib2fvARB(uint index, float* v) {
            Pointers.glVertexAttrib2fvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib2fvARB(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib2fvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib2fvNV(uint index, float* v) {
            Pointers.glVertexAttrib2fvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib2fvNV(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib2fvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib2hNV(uint index, short x, short y) {
            Pointers.glVertexAttrib2hNV(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2hvNV(uint index, short* v) {
            Pointers.glVertexAttrib2hvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib2hvNV(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib2hvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib2s(uint index, short x, short y) {
            Pointers.glVertexAttrib2s(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2sARB(uint index, short x, short y) {
            Pointers.glVertexAttrib2sARB(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2sNV(uint index, short x, short y) {
            Pointers.glVertexAttrib2sNV(index, x, y);
        }
        
        public unsafe static void glVertexAttrib2sv(uint index, short* v) {
            Pointers.glVertexAttrib2sv(index, v);
        }
        
        public unsafe static void glVertexAttrib2sv(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib2sv(index, v_);
        }
        
        public unsafe static void glVertexAttrib2svARB(uint index, short* v) {
            Pointers.glVertexAttrib2svARB(index, v);
        }
        
        public unsafe static void glVertexAttrib2svARB(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib2svARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib2svNV(uint index, short* v) {
            Pointers.glVertexAttrib2svNV(index, v);
        }
        
        public unsafe static void glVertexAttrib2svNV(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib2svNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib3d(uint index, double x, double y, double z) {
            Pointers.glVertexAttrib3d(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3dARB(uint index, double x, double y, double z) {
            Pointers.glVertexAttrib3dARB(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3dNV(uint index, double x, double y, double z) {
            Pointers.glVertexAttrib3dNV(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3dv(uint index, double* v) {
            Pointers.glVertexAttrib3dv(index, v);
        }
        
        public unsafe static void glVertexAttrib3dv(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib3dv(index, v_);
        }
        
        public unsafe static void glVertexAttrib3dvARB(uint index, double* v) {
            Pointers.glVertexAttrib3dvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib3dvARB(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib3dvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib3dvNV(uint index, double* v) {
            Pointers.glVertexAttrib3dvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib3dvNV(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib3dvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib3f(uint index, float x, float y, float z) {
            Pointers.glVertexAttrib3f(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3fARB(uint index, float x, float y, float z) {
            Pointers.glVertexAttrib3fARB(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3fNV(uint index, float x, float y, float z) {
            Pointers.glVertexAttrib3fNV(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3fv(uint index, float* v) {
            Pointers.glVertexAttrib3fv(index, v);
        }
        
        public unsafe static void glVertexAttrib3fv(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib3fv(index, v_);
        }
        
        public unsafe static void glVertexAttrib3fvARB(uint index, float* v) {
            Pointers.glVertexAttrib3fvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib3fvARB(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib3fvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib3fvNV(uint index, float* v) {
            Pointers.glVertexAttrib3fvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib3fvNV(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib3fvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib3hNV(uint index, short x, short y, short z) {
            Pointers.glVertexAttrib3hNV(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3hvNV(uint index, short* v) {
            Pointers.glVertexAttrib3hvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib3hvNV(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib3hvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib3s(uint index, short x, short y, short z) {
            Pointers.glVertexAttrib3s(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3sARB(uint index, short x, short y, short z) {
            Pointers.glVertexAttrib3sARB(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3sNV(uint index, short x, short y, short z) {
            Pointers.glVertexAttrib3sNV(index, x, y, z);
        }
        
        public unsafe static void glVertexAttrib3sv(uint index, short* v) {
            Pointers.glVertexAttrib3sv(index, v);
        }
        
        public unsafe static void glVertexAttrib3sv(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib3sv(index, v_);
        }
        
        public unsafe static void glVertexAttrib3svARB(uint index, short* v) {
            Pointers.glVertexAttrib3svARB(index, v);
        }
        
        public unsafe static void glVertexAttrib3svARB(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib3svARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib3svNV(uint index, short* v) {
            Pointers.glVertexAttrib3svNV(index, v);
        }
        
        public unsafe static void glVertexAttrib3svNV(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib3svNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib4Nbv(uint index, sbyte* v) {
            Pointers.glVertexAttrib4Nbv(index, v);
        }
        
        public unsafe static void glVertexAttrib4Nbv(uint index, sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glVertexAttrib4Nbv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4NbvARB(uint index, sbyte* v) {
            Pointers.glVertexAttrib4NbvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4NbvARB(uint index, sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glVertexAttrib4NbvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4Niv(uint index, int* v) {
            Pointers.glVertexAttrib4Niv(index, v);
        }
        
        public unsafe static void glVertexAttrib4Niv(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttrib4Niv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4NivARB(uint index, int* v) {
            Pointers.glVertexAttrib4NivARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4NivARB(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttrib4NivARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4Nsv(uint index, short* v) {
            Pointers.glVertexAttrib4Nsv(index, v);
        }
        
        public unsafe static void glVertexAttrib4Nsv(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib4Nsv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4NsvARB(uint index, short* v) {
            Pointers.glVertexAttrib4NsvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4NsvARB(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib4NsvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w) {
            Pointers.glVertexAttrib4Nub(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w) {
            Pointers.glVertexAttrib4NubARB(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4Nubv(uint index, byte* v) {
            Pointers.glVertexAttrib4Nubv(index, v);
        }
        
        public unsafe static void glVertexAttrib4Nubv(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttrib4Nubv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4NubvARB(uint index, byte* v) {
            Pointers.glVertexAttrib4NubvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4NubvARB(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttrib4NubvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4Nuiv(uint index, uint* v) {
            Pointers.glVertexAttrib4Nuiv(index, v);
        }
        
        public unsafe static void glVertexAttrib4Nuiv(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttrib4Nuiv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4NuivARB(uint index, uint* v) {
            Pointers.glVertexAttrib4NuivARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4NuivARB(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttrib4NuivARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4Nusv(uint index, ushort* v) {
            Pointers.glVertexAttrib4Nusv(index, v);
        }
        
        public unsafe static void glVertexAttrib4Nusv(uint index, ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glVertexAttrib4Nusv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4NusvARB(uint index, ushort* v) {
            Pointers.glVertexAttrib4NusvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4NusvARB(uint index, ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glVertexAttrib4NusvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4bv(uint index, sbyte* v) {
            Pointers.glVertexAttrib4bv(index, v);
        }
        
        public unsafe static void glVertexAttrib4bv(uint index, sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glVertexAttrib4bv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4bvARB(uint index, sbyte* v) {
            Pointers.glVertexAttrib4bvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4bvARB(uint index, sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glVertexAttrib4bvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4d(uint index, double x, double y, double z, double w) {
            Pointers.glVertexAttrib4d(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4dARB(uint index, double x, double y, double z, double w) {
            Pointers.glVertexAttrib4dARB(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4dNV(uint index, double x, double y, double z, double w) {
            Pointers.glVertexAttrib4dNV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4dv(uint index, double* v) {
            Pointers.glVertexAttrib4dv(index, v);
        }
        
        public unsafe static void glVertexAttrib4dv(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib4dv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4dvARB(uint index, double* v) {
            Pointers.glVertexAttrib4dvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4dvARB(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib4dvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4dvNV(uint index, double* v) {
            Pointers.glVertexAttrib4dvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib4dvNV(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttrib4dvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib4f(uint index, float x, float y, float z, float w) {
            Pointers.glVertexAttrib4f(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4fARB(uint index, float x, float y, float z, float w) {
            Pointers.glVertexAttrib4fARB(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4fNV(uint index, float x, float y, float z, float w) {
            Pointers.glVertexAttrib4fNV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4fv(uint index, float* v) {
            Pointers.glVertexAttrib4fv(index, v);
        }
        
        public unsafe static void glVertexAttrib4fv(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib4fv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4fvARB(uint index, float* v) {
            Pointers.glVertexAttrib4fvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4fvARB(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib4fvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4fvNV(uint index, float* v) {
            Pointers.glVertexAttrib4fvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib4fvNV(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttrib4fvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib4hNV(uint index, short x, short y, short z, short w) {
            Pointers.glVertexAttrib4hNV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4hvNV(uint index, short* v) {
            Pointers.glVertexAttrib4hvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib4hvNV(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib4hvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib4iv(uint index, int* v) {
            Pointers.glVertexAttrib4iv(index, v);
        }
        
        public unsafe static void glVertexAttrib4iv(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttrib4iv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4ivARB(uint index, int* v) {
            Pointers.glVertexAttrib4ivARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4ivARB(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttrib4ivARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4s(uint index, short x, short y, short z, short w) {
            Pointers.glVertexAttrib4s(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4sARB(uint index, short x, short y, short z, short w) {
            Pointers.glVertexAttrib4sARB(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4sNV(uint index, short x, short y, short z, short w) {
            Pointers.glVertexAttrib4sNV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4sv(uint index, short* v) {
            Pointers.glVertexAttrib4sv(index, v);
        }
        
        public unsafe static void glVertexAttrib4sv(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib4sv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4svARB(uint index, short* v) {
            Pointers.glVertexAttrib4svARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4svARB(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib4svARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4svNV(uint index, short* v) {
            Pointers.glVertexAttrib4svNV(index, v);
        }
        
        public unsafe static void glVertexAttrib4svNV(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttrib4svNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w) {
            Pointers.glVertexAttrib4ubNV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttrib4ubv(uint index, byte* v) {
            Pointers.glVertexAttrib4ubv(index, v);
        }
        
        public unsafe static void glVertexAttrib4ubv(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttrib4ubv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4ubvARB(uint index, byte* v) {
            Pointers.glVertexAttrib4ubvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4ubvARB(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttrib4ubvARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4ubvNV(uint index, byte* v) {
            Pointers.glVertexAttrib4ubvNV(index, v);
        }
        
        public unsafe static void glVertexAttrib4ubvNV(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttrib4ubvNV(index, v_);
        }
        
        public unsafe static void glVertexAttrib4uiv(uint index, uint* v) {
            Pointers.glVertexAttrib4uiv(index, v);
        }
        
        public unsafe static void glVertexAttrib4uiv(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttrib4uiv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4uivARB(uint index, uint* v) {
            Pointers.glVertexAttrib4uivARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4uivARB(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttrib4uivARB(index, v_);
        }
        
        public unsafe static void glVertexAttrib4usv(uint index, ushort* v) {
            Pointers.glVertexAttrib4usv(index, v);
        }
        
        public unsafe static void glVertexAttrib4usv(uint index, ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glVertexAttrib4usv(index, v_);
        }
        
        public unsafe static void glVertexAttrib4usvARB(uint index, ushort* v) {
            Pointers.glVertexAttrib4usvARB(index, v);
        }
        
        public unsafe static void glVertexAttrib4usvARB(uint index, ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glVertexAttrib4usvARB(index, v_);
        }
        
        public unsafe static void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, uint buffer, uint offset) {
            Pointers.glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
        }
        
        public unsafe static void glVertexAttribBinding(uint attribindex, uint bindingindex) {
            Pointers.glVertexAttribBinding(attribindex, bindingindex);
        }
        
        public unsafe static void glVertexAttribDivisor(uint index, uint divisor) {
            Pointers.glVertexAttribDivisor(index, divisor);
        }
        
        public unsafe static void glVertexAttribDivisorANGLE(uint index, uint divisor) {
            Pointers.glVertexAttribDivisorANGLE(index, divisor);
        }
        
        public unsafe static void glVertexAttribDivisorARB(uint index, uint divisor) {
            Pointers.glVertexAttribDivisorARB(index, divisor);
        }
        
        public unsafe static void glVertexAttribDivisorEXT(uint index, uint divisor) {
            Pointers.glVertexAttribDivisorEXT(index, divisor);
        }
        
        public unsafe static void glVertexAttribDivisorNV(uint index, uint divisor) {
            Pointers.glVertexAttribDivisorNV(index, divisor);
        }
        
        public unsafe static void glVertexAttribFormat(uint attribindex, int size, int type, bool normalized, uint relativeoffset) {
            Pointers.glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
        }
        
        public unsafe static void glVertexAttribFormatNV(uint index, int size, int type, bool normalized, int stride) {
            Pointers.glVertexAttribFormatNV(index, size, type, normalized, stride);
        }
        
        public unsafe static void glVertexAttribI1i(uint index, int x) {
            Pointers.glVertexAttribI1i(index, x);
        }
        
        public unsafe static void glVertexAttribI1iEXT(uint index, int x) {
            Pointers.glVertexAttribI1iEXT(index, x);
        }
        
        public unsafe static void glVertexAttribI1iv(uint index, int* v) {
            Pointers.glVertexAttribI1iv(index, v);
        }
        
        public unsafe static void glVertexAttribI1iv(uint index, out int v) {
            fixed(int* v_ = &v)
                Pointers.glVertexAttribI1iv(index, v_);
        }
        
        public unsafe static void glVertexAttribI1ivEXT(uint index, int* v) {
            Pointers.glVertexAttribI1ivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI1ivEXT(uint index, out int v) {
            fixed(int* v_ = &v)
                Pointers.glVertexAttribI1ivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI1ui(uint index, uint x) {
            Pointers.glVertexAttribI1ui(index, x);
        }
        
        public unsafe static void glVertexAttribI1uiEXT(uint index, uint x) {
            Pointers.glVertexAttribI1uiEXT(index, x);
        }
        
        public unsafe static void glVertexAttribI1uiv(uint index, uint* v) {
            Pointers.glVertexAttribI1uiv(index, v);
        }
        
        public unsafe static void glVertexAttribI1uiv(uint index, out uint v) {
            fixed(uint* v_ = &v)
                Pointers.glVertexAttribI1uiv(index, v_);
        }
        
        public unsafe static void glVertexAttribI1uivEXT(uint index, uint* v) {
            Pointers.glVertexAttribI1uivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI1uivEXT(uint index, out uint v) {
            fixed(uint* v_ = &v)
                Pointers.glVertexAttribI1uivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI2i(uint index, int x, int y) {
            Pointers.glVertexAttribI2i(index, x, y);
        }
        
        public unsafe static void glVertexAttribI2iEXT(uint index, int x, int y) {
            Pointers.glVertexAttribI2iEXT(index, x, y);
        }
        
        public unsafe static void glVertexAttribI2iv(uint index, int* v) {
            Pointers.glVertexAttribI2iv(index, v);
        }
        
        public unsafe static void glVertexAttribI2iv(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttribI2iv(index, v_);
        }
        
        public unsafe static void glVertexAttribI2ivEXT(uint index, int* v) {
            Pointers.glVertexAttribI2ivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI2ivEXT(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttribI2ivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI2ui(uint index, uint x, uint y) {
            Pointers.glVertexAttribI2ui(index, x, y);
        }
        
        public unsafe static void glVertexAttribI2uiEXT(uint index, uint x, uint y) {
            Pointers.glVertexAttribI2uiEXT(index, x, y);
        }
        
        public unsafe static void glVertexAttribI2uiv(uint index, uint* v) {
            Pointers.glVertexAttribI2uiv(index, v);
        }
        
        public unsafe static void glVertexAttribI2uiv(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttribI2uiv(index, v_);
        }
        
        public unsafe static void glVertexAttribI2uivEXT(uint index, uint* v) {
            Pointers.glVertexAttribI2uivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI2uivEXT(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttribI2uivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI3i(uint index, int x, int y, int z) {
            Pointers.glVertexAttribI3i(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribI3iEXT(uint index, int x, int y, int z) {
            Pointers.glVertexAttribI3iEXT(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribI3iv(uint index, int* v) {
            Pointers.glVertexAttribI3iv(index, v);
        }
        
        public unsafe static void glVertexAttribI3iv(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttribI3iv(index, v_);
        }
        
        public unsafe static void glVertexAttribI3ivEXT(uint index, int* v) {
            Pointers.glVertexAttribI3ivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI3ivEXT(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttribI3ivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI3ui(uint index, uint x, uint y, uint z) {
            Pointers.glVertexAttribI3ui(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribI3uiEXT(uint index, uint x, uint y, uint z) {
            Pointers.glVertexAttribI3uiEXT(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribI3uiv(uint index, uint* v) {
            Pointers.glVertexAttribI3uiv(index, v);
        }
        
        public unsafe static void glVertexAttribI3uiv(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttribI3uiv(index, v_);
        }
        
        public unsafe static void glVertexAttribI3uivEXT(uint index, uint* v) {
            Pointers.glVertexAttribI3uivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI3uivEXT(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttribI3uivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI4bv(uint index, sbyte* v) {
            Pointers.glVertexAttribI4bv(index, v);
        }
        
        public unsafe static void glVertexAttribI4bv(uint index, sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glVertexAttribI4bv(index, v_);
        }
        
        public unsafe static void glVertexAttribI4bvEXT(uint index, sbyte* v) {
            Pointers.glVertexAttribI4bvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI4bvEXT(uint index, sbyte[] v) {
            fixed(sbyte* v_ = &v[0])
                Pointers.glVertexAttribI4bvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI4i(uint index, int x, int y, int z, int w) {
            Pointers.glVertexAttribI4i(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribI4iEXT(uint index, int x, int y, int z, int w) {
            Pointers.glVertexAttribI4iEXT(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribI4iv(uint index, int* v) {
            Pointers.glVertexAttribI4iv(index, v);
        }
        
        public unsafe static void glVertexAttribI4iv(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttribI4iv(index, v_);
        }
        
        public unsafe static void glVertexAttribI4ivEXT(uint index, int* v) {
            Pointers.glVertexAttribI4ivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI4ivEXT(uint index, int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glVertexAttribI4ivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI4sv(uint index, short* v) {
            Pointers.glVertexAttribI4sv(index, v);
        }
        
        public unsafe static void glVertexAttribI4sv(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribI4sv(index, v_);
        }
        
        public unsafe static void glVertexAttribI4svEXT(uint index, short* v) {
            Pointers.glVertexAttribI4svEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI4svEXT(uint index, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribI4svEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI4ubv(uint index, byte* v) {
            Pointers.glVertexAttribI4ubv(index, v);
        }
        
        public unsafe static void glVertexAttribI4ubv(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttribI4ubv(index, v_);
        }
        
        public unsafe static void glVertexAttribI4ubvEXT(uint index, byte* v) {
            Pointers.glVertexAttribI4ubvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI4ubvEXT(uint index, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttribI4ubvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w) {
            Pointers.glVertexAttribI4ui(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w) {
            Pointers.glVertexAttribI4uiEXT(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribI4uiv(uint index, uint* v) {
            Pointers.glVertexAttribI4uiv(index, v);
        }
        
        public unsafe static void glVertexAttribI4uiv(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttribI4uiv(index, v_);
        }
        
        public unsafe static void glVertexAttribI4uivEXT(uint index, uint* v) {
            Pointers.glVertexAttribI4uivEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI4uivEXT(uint index, uint[] v) {
            fixed(uint* v_ = &v[0])
                Pointers.glVertexAttribI4uivEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribI4usv(uint index, ushort* v) {
            Pointers.glVertexAttribI4usv(index, v);
        }
        
        public unsafe static void glVertexAttribI4usv(uint index, ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glVertexAttribI4usv(index, v_);
        }
        
        public unsafe static void glVertexAttribI4usvEXT(uint index, ushort* v) {
            Pointers.glVertexAttribI4usvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribI4usvEXT(uint index, ushort[] v) {
            fixed(ushort* v_ = &v[0])
                Pointers.glVertexAttribI4usvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribIFormat(uint attribindex, int size, int type, uint relativeoffset) {
            Pointers.glVertexAttribIFormat(attribindex, size, type, relativeoffset);
        }
        
        public unsafe static void glVertexAttribIFormatNV(uint index, int size, int type, int stride) {
            Pointers.glVertexAttribIFormatNV(index, size, type, stride);
        }
        
        public unsafe static void glVertexAttribIPointer(uint index, int size, int type, int stride, IntPtr pointer) {
            Pointers.glVertexAttribIPointer(index, size, type, stride, pointer);
        }
        
        public unsafe static void glVertexAttribIPointerEXT(uint index, int size, int type, int stride, IntPtr pointer) {
            Pointers.glVertexAttribIPointerEXT(index, size, type, stride, pointer);
        }
        
        public unsafe static void glVertexAttribL1d(uint index, double x) {
            Pointers.glVertexAttribL1d(index, x);
        }
        
        public unsafe static void glVertexAttribL1dEXT(uint index, double x) {
            Pointers.glVertexAttribL1dEXT(index, x);
        }
        
        public unsafe static void glVertexAttribL1dv(uint index, double* v) {
            Pointers.glVertexAttribL1dv(index, v);
        }
        
        public unsafe static void glVertexAttribL1dv(uint index, out double v) {
            fixed(double* v_ = &v)
                Pointers.glVertexAttribL1dv(index, v_);
        }
        
        public unsafe static void glVertexAttribL1dvEXT(uint index, double* v) {
            Pointers.glVertexAttribL1dvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribL1dvEXT(uint index, out double v) {
            fixed(double* v_ = &v)
                Pointers.glVertexAttribL1dvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribL1i64NV(uint index, long x) {
            Pointers.glVertexAttribL1i64NV(index, x);
        }
        
        public unsafe static void glVertexAttribL1i64vNV(uint index, long* v) {
            Pointers.glVertexAttribL1i64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL1i64vNV(uint index, out long v) {
            fixed(long* v_ = &v)
                Pointers.glVertexAttribL1i64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL1ui64ARB(uint index, ulong x) {
            Pointers.glVertexAttribL1ui64ARB(index, x);
        }
        
        public unsafe static void glVertexAttribL1ui64NV(uint index, ulong x) {
            Pointers.glVertexAttribL1ui64NV(index, x);
        }
        
        public unsafe static void glVertexAttribL1ui64vARB(uint index, ulong* v) {
            Pointers.glVertexAttribL1ui64vARB(index, v);
        }
        
        public unsafe static void glVertexAttribL1ui64vARB(uint index, ulong[] v) {
            fixed(ulong* v_ = &v[0])
                Pointers.glVertexAttribL1ui64vARB(index, v_);
        }
        
        public unsafe static void glVertexAttribL1ui64vNV(uint index, ulong* v) {
            Pointers.glVertexAttribL1ui64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL1ui64vNV(uint index, out ulong v) {
            fixed(ulong* v_ = &v)
                Pointers.glVertexAttribL1ui64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL2d(uint index, double x, double y) {
            Pointers.glVertexAttribL2d(index, x, y);
        }
        
        public unsafe static void glVertexAttribL2dEXT(uint index, double x, double y) {
            Pointers.glVertexAttribL2dEXT(index, x, y);
        }
        
        public unsafe static void glVertexAttribL2dv(uint index, double* v) {
            Pointers.glVertexAttribL2dv(index, v);
        }
        
        public unsafe static void glVertexAttribL2dv(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribL2dv(index, v_);
        }
        
        public unsafe static void glVertexAttribL2dvEXT(uint index, double* v) {
            Pointers.glVertexAttribL2dvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribL2dvEXT(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribL2dvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribL2i64NV(uint index, long x, long y) {
            Pointers.glVertexAttribL2i64NV(index, x, y);
        }
        
        public unsafe static void glVertexAttribL2i64vNV(uint index, long* v) {
            Pointers.glVertexAttribL2i64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL2i64vNV(uint index, long[] v) {
            fixed(long* v_ = &v[0])
                Pointers.glVertexAttribL2i64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL2ui64NV(uint index, ulong x, ulong y) {
            Pointers.glVertexAttribL2ui64NV(index, x, y);
        }
        
        public unsafe static void glVertexAttribL2ui64vNV(uint index, ulong* v) {
            Pointers.glVertexAttribL2ui64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL2ui64vNV(uint index, ulong[] v) {
            fixed(ulong* v_ = &v[0])
                Pointers.glVertexAttribL2ui64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL3d(uint index, double x, double y, double z) {
            Pointers.glVertexAttribL3d(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribL3dEXT(uint index, double x, double y, double z) {
            Pointers.glVertexAttribL3dEXT(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribL3dv(uint index, double* v) {
            Pointers.glVertexAttribL3dv(index, v);
        }
        
        public unsafe static void glVertexAttribL3dv(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribL3dv(index, v_);
        }
        
        public unsafe static void glVertexAttribL3dvEXT(uint index, double* v) {
            Pointers.glVertexAttribL3dvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribL3dvEXT(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribL3dvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribL3i64NV(uint index, long x, long y, long z) {
            Pointers.glVertexAttribL3i64NV(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribL3i64vNV(uint index, long* v) {
            Pointers.glVertexAttribL3i64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL3i64vNV(uint index, long[] v) {
            fixed(long* v_ = &v[0])
                Pointers.glVertexAttribL3i64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z) {
            Pointers.glVertexAttribL3ui64NV(index, x, y, z);
        }
        
        public unsafe static void glVertexAttribL3ui64vNV(uint index, ulong* v) {
            Pointers.glVertexAttribL3ui64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL3ui64vNV(uint index, ulong[] v) {
            fixed(ulong* v_ = &v[0])
                Pointers.glVertexAttribL3ui64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL4d(uint index, double x, double y, double z, double w) {
            Pointers.glVertexAttribL4d(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribL4dEXT(uint index, double x, double y, double z, double w) {
            Pointers.glVertexAttribL4dEXT(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribL4dv(uint index, double* v) {
            Pointers.glVertexAttribL4dv(index, v);
        }
        
        public unsafe static void glVertexAttribL4dv(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribL4dv(index, v_);
        }
        
        public unsafe static void glVertexAttribL4dvEXT(uint index, double* v) {
            Pointers.glVertexAttribL4dvEXT(index, v);
        }
        
        public unsafe static void glVertexAttribL4dvEXT(uint index, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribL4dvEXT(index, v_);
        }
        
        public unsafe static void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w) {
            Pointers.glVertexAttribL4i64NV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribL4i64vNV(uint index, long* v) {
            Pointers.glVertexAttribL4i64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL4i64vNV(uint index, long[] v) {
            fixed(long* v_ = &v[0])
                Pointers.glVertexAttribL4i64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w) {
            Pointers.glVertexAttribL4ui64NV(index, x, y, z, w);
        }
        
        public unsafe static void glVertexAttribL4ui64vNV(uint index, ulong* v) {
            Pointers.glVertexAttribL4ui64vNV(index, v);
        }
        
        public unsafe static void glVertexAttribL4ui64vNV(uint index, ulong[] v) {
            fixed(ulong* v_ = &v[0])
                Pointers.glVertexAttribL4ui64vNV(index, v_);
        }
        
        public unsafe static void glVertexAttribLFormat(uint attribindex, int size, int type, uint relativeoffset) {
            Pointers.glVertexAttribLFormat(attribindex, size, type, relativeoffset);
        }
        
        public unsafe static void glVertexAttribLFormatNV(uint index, int size, int type, int stride) {
            Pointers.glVertexAttribLFormatNV(index, size, type, stride);
        }
        
        public unsafe static void glVertexAttribLPointer(uint index, int size, int type, int stride, IntPtr pointer) {
            Pointers.glVertexAttribLPointer(index, size, type, stride, pointer);
        }
        
        public unsafe static void glVertexAttribLPointerEXT(uint index, int size, int type, int stride, IntPtr pointer) {
            Pointers.glVertexAttribLPointerEXT(index, size, type, stride, pointer);
        }
        
        public unsafe static void glVertexAttribP1ui(uint index, int type, bool normalized, uint value) {
            Pointers.glVertexAttribP1ui(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP1uiv(uint index, int type, bool normalized, uint* value) {
            Pointers.glVertexAttribP1uiv(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP1uiv(uint index, int type, bool normalized, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexAttribP1uiv(index, type, normalized, value_);
        }
        
        public unsafe static void glVertexAttribP2ui(uint index, int type, bool normalized, uint value) {
            Pointers.glVertexAttribP2ui(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP2uiv(uint index, int type, bool normalized, uint* value) {
            Pointers.glVertexAttribP2uiv(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP2uiv(uint index, int type, bool normalized, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexAttribP2uiv(index, type, normalized, value_);
        }
        
        public unsafe static void glVertexAttribP3ui(uint index, int type, bool normalized, uint value) {
            Pointers.glVertexAttribP3ui(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP3uiv(uint index, int type, bool normalized, uint* value) {
            Pointers.glVertexAttribP3uiv(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP3uiv(uint index, int type, bool normalized, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexAttribP3uiv(index, type, normalized, value_);
        }
        
        public unsafe static void glVertexAttribP4ui(uint index, int type, bool normalized, uint value) {
            Pointers.glVertexAttribP4ui(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP4uiv(uint index, int type, bool normalized, uint* value) {
            Pointers.glVertexAttribP4uiv(index, type, normalized, value);
        }
        
        public unsafe static void glVertexAttribP4uiv(uint index, int type, bool normalized, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexAttribP4uiv(index, type, normalized, value_);
        }
        
        public unsafe static void glVertexAttribParameteriAMD(uint index, int pname, int param) {
            Pointers.glVertexAttribParameteriAMD(index, pname, param);
        }
        
        public unsafe static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, IntPtr pointer) {
            Pointers.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        
        public unsafe static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, IntPtr pointer) {
            Pointers.glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
        }
        
        public unsafe static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, IntPtr pointer) {
            Pointers.glVertexAttribPointerNV(index, fsize, type, stride, pointer);
        }
        
        public unsafe static void glVertexAttribs1dvNV(uint index, int count, double* v) {
            Pointers.glVertexAttribs1dvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs1dvNV(uint index, int count, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribs1dvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs1fvNV(uint index, int count, float* v) {
            Pointers.glVertexAttribs1fvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs1fvNV(uint index, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttribs1fvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs1hvNV(uint index, int n, short* v) {
            Pointers.glVertexAttribs1hvNV(index, n, v);
        }
        
        public unsafe static void glVertexAttribs1hvNV(uint index, int n, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs1hvNV(index, n, v_);
        }
        
        public unsafe static void glVertexAttribs1svNV(uint index, int count, short* v) {
            Pointers.glVertexAttribs1svNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs1svNV(uint index, int count, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs1svNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs2dvNV(uint index, int count, double* v) {
            Pointers.glVertexAttribs2dvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs2dvNV(uint index, int count, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribs2dvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs2fvNV(uint index, int count, float* v) {
            Pointers.glVertexAttribs2fvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs2fvNV(uint index, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttribs2fvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs2hvNV(uint index, int n, short* v) {
            Pointers.glVertexAttribs2hvNV(index, n, v);
        }
        
        public unsafe static void glVertexAttribs2hvNV(uint index, int n, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs2hvNV(index, n, v_);
        }
        
        public unsafe static void glVertexAttribs2svNV(uint index, int count, short* v) {
            Pointers.glVertexAttribs2svNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs2svNV(uint index, int count, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs2svNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs3dvNV(uint index, int count, double* v) {
            Pointers.glVertexAttribs3dvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs3dvNV(uint index, int count, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribs3dvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs3fvNV(uint index, int count, float* v) {
            Pointers.glVertexAttribs3fvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs3fvNV(uint index, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttribs3fvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs3hvNV(uint index, int n, short* v) {
            Pointers.glVertexAttribs3hvNV(index, n, v);
        }
        
        public unsafe static void glVertexAttribs3hvNV(uint index, int n, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs3hvNV(index, n, v_);
        }
        
        public unsafe static void glVertexAttribs3svNV(uint index, int count, short* v) {
            Pointers.glVertexAttribs3svNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs3svNV(uint index, int count, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs3svNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs4dvNV(uint index, int count, double* v) {
            Pointers.glVertexAttribs4dvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs4dvNV(uint index, int count, double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glVertexAttribs4dvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs4fvNV(uint index, int count, float* v) {
            Pointers.glVertexAttribs4fvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs4fvNV(uint index, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glVertexAttribs4fvNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs4hvNV(uint index, int n, short* v) {
            Pointers.glVertexAttribs4hvNV(index, n, v);
        }
        
        public unsafe static void glVertexAttribs4hvNV(uint index, int n, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs4hvNV(index, n, v_);
        }
        
        public unsafe static void glVertexAttribs4svNV(uint index, int count, short* v) {
            Pointers.glVertexAttribs4svNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs4svNV(uint index, int count, short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glVertexAttribs4svNV(index, count, v_);
        }
        
        public unsafe static void glVertexAttribs4ubvNV(uint index, int count, byte* v) {
            Pointers.glVertexAttribs4ubvNV(index, count, v);
        }
        
        public unsafe static void glVertexAttribs4ubvNV(uint index, int count, byte[] v) {
            fixed(byte* v_ = &v[0])
                Pointers.glVertexAttribs4ubvNV(index, count, v_);
        }
        
        public unsafe static void glVertexBindingDivisor(uint bindingindex, uint divisor) {
            Pointers.glVertexBindingDivisor(bindingindex, divisor);
        }
        
        public unsafe static void glVertexBlendARB(int count) {
            Pointers.glVertexBlendARB(count);
        }
        
        public unsafe static void glVertexBlendEnvfATI(int pname, float param) {
            Pointers.glVertexBlendEnvfATI(pname, param);
        }
        
        public unsafe static void glVertexBlendEnviATI(int pname, int param) {
            Pointers.glVertexBlendEnviATI(pname, param);
        }
        
        public unsafe static void glVertexFormatNV(int size, int type, int stride) {
            Pointers.glVertexFormatNV(size, type, stride);
        }
        
        public unsafe static void glVertexP2ui(int type, uint value) {
            Pointers.glVertexP2ui(type, value);
        }
        
        public unsafe static void glVertexP2uiv(int type, uint* value) {
            Pointers.glVertexP2uiv(type, value);
        }
        
        public unsafe static void glVertexP2uiv(int type, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexP2uiv(type, value_);
        }
        
        public unsafe static void glVertexP3ui(int type, uint value) {
            Pointers.glVertexP3ui(type, value);
        }
        
        public unsafe static void glVertexP3uiv(int type, uint* value) {
            Pointers.glVertexP3uiv(type, value);
        }
        
        public unsafe static void glVertexP3uiv(int type, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexP3uiv(type, value_);
        }
        
        public unsafe static void glVertexP4ui(int type, uint value) {
            Pointers.glVertexP4ui(type, value);
        }
        
        public unsafe static void glVertexP4uiv(int type, uint* value) {
            Pointers.glVertexP4uiv(type, value);
        }
        
        public unsafe static void glVertexP4uiv(int type, out uint value) {
            fixed(uint* value_ = &value)
                Pointers.glVertexP4uiv(type, value_);
        }
        
        public unsafe static void glVertexPointer(int size, int type, int stride, IntPtr pointer) {
            Pointers.glVertexPointer(size, type, stride, pointer);
        }
        
        public unsafe static void glVertexPointerEXT(int size, int type, int stride, int count, IntPtr pointer) {
            Pointers.glVertexPointerEXT(size, type, stride, count, pointer);
        }
        
        public unsafe static void glVertexPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride) {
            Pointers.glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        
        public unsafe static void glVertexPointerListIBM(int size, int type, int stride, IntPtr[] pointer, int ptrstride) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glVertexPointerListIBM(size, type, stride, pointer_, ptrstride);
        }
        
        public unsafe static void glVertexPointervINTEL(int size, int type, IntPtr* pointer) {
            Pointers.glVertexPointervINTEL(size, type, pointer);
        }
        
        public unsafe static void glVertexPointervINTEL(int size, int type, IntPtr[] pointer) {
            fixed(IntPtr* pointer_ = &pointer[0])
                Pointers.glVertexPointervINTEL(size, type, pointer_);
        }
        
        public unsafe static void glVertexStream1dATI(int stream, double x) {
            Pointers.glVertexStream1dATI(stream, x);
        }
        
        public unsafe static void glVertexStream1dvATI(int stream, double* coords) {
            Pointers.glVertexStream1dvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream1dvATI(int stream, out double coords) {
            fixed(double* coords_ = &coords)
                Pointers.glVertexStream1dvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream1fATI(int stream, float x) {
            Pointers.glVertexStream1fATI(stream, x);
        }
        
        public unsafe static void glVertexStream1fvATI(int stream, float* coords) {
            Pointers.glVertexStream1fvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream1fvATI(int stream, out float coords) {
            fixed(float* coords_ = &coords)
                Pointers.glVertexStream1fvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream1iATI(int stream, int x) {
            Pointers.glVertexStream1iATI(stream, x);
        }
        
        public unsafe static void glVertexStream1ivATI(int stream, int* coords) {
            Pointers.glVertexStream1ivATI(stream, coords);
        }
        
        public unsafe static void glVertexStream1ivATI(int stream, out int coords) {
            fixed(int* coords_ = &coords)
                Pointers.glVertexStream1ivATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream1sATI(int stream, short x) {
            Pointers.glVertexStream1sATI(stream, x);
        }
        
        public unsafe static void glVertexStream1svATI(int stream, short* coords) {
            Pointers.glVertexStream1svATI(stream, coords);
        }
        
        public unsafe static void glVertexStream1svATI(int stream, out short coords) {
            fixed(short* coords_ = &coords)
                Pointers.glVertexStream1svATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream2dATI(int stream, double x, double y) {
            Pointers.glVertexStream2dATI(stream, x, y);
        }
        
        public unsafe static void glVertexStream2dvATI(int stream, double* coords) {
            Pointers.glVertexStream2dvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream2dvATI(int stream, double[] coords) {
            fixed(double* coords_ = &coords[0])
                Pointers.glVertexStream2dvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream2fATI(int stream, float x, float y) {
            Pointers.glVertexStream2fATI(stream, x, y);
        }
        
        public unsafe static void glVertexStream2fvATI(int stream, float* coords) {
            Pointers.glVertexStream2fvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream2fvATI(int stream, float[] coords) {
            fixed(float* coords_ = &coords[0])
                Pointers.glVertexStream2fvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream2iATI(int stream, int x, int y) {
            Pointers.glVertexStream2iATI(stream, x, y);
        }
        
        public unsafe static void glVertexStream2ivATI(int stream, int* coords) {
            Pointers.glVertexStream2ivATI(stream, coords);
        }
        
        public unsafe static void glVertexStream2ivATI(int stream, int[] coords) {
            fixed(int* coords_ = &coords[0])
                Pointers.glVertexStream2ivATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream2sATI(int stream, short x, short y) {
            Pointers.glVertexStream2sATI(stream, x, y);
        }
        
        public unsafe static void glVertexStream2svATI(int stream, short* coords) {
            Pointers.glVertexStream2svATI(stream, coords);
        }
        
        public unsafe static void glVertexStream2svATI(int stream, short[] coords) {
            fixed(short* coords_ = &coords[0])
                Pointers.glVertexStream2svATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream3dATI(int stream, double x, double y, double z) {
            Pointers.glVertexStream3dATI(stream, x, y, z);
        }
        
        public unsafe static void glVertexStream3dvATI(int stream, double* coords) {
            Pointers.glVertexStream3dvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream3dvATI(int stream, double[] coords) {
            fixed(double* coords_ = &coords[0])
                Pointers.glVertexStream3dvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream3fATI(int stream, float x, float y, float z) {
            Pointers.glVertexStream3fATI(stream, x, y, z);
        }
        
        public unsafe static void glVertexStream3fvATI(int stream, float* coords) {
            Pointers.glVertexStream3fvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream3fvATI(int stream, float[] coords) {
            fixed(float* coords_ = &coords[0])
                Pointers.glVertexStream3fvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream3iATI(int stream, int x, int y, int z) {
            Pointers.glVertexStream3iATI(stream, x, y, z);
        }
        
        public unsafe static void glVertexStream3ivATI(int stream, int* coords) {
            Pointers.glVertexStream3ivATI(stream, coords);
        }
        
        public unsafe static void glVertexStream3ivATI(int stream, int[] coords) {
            fixed(int* coords_ = &coords[0])
                Pointers.glVertexStream3ivATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream3sATI(int stream, short x, short y, short z) {
            Pointers.glVertexStream3sATI(stream, x, y, z);
        }
        
        public unsafe static void glVertexStream3svATI(int stream, short* coords) {
            Pointers.glVertexStream3svATI(stream, coords);
        }
        
        public unsafe static void glVertexStream3svATI(int stream, short[] coords) {
            fixed(short* coords_ = &coords[0])
                Pointers.glVertexStream3svATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream4dATI(int stream, double x, double y, double z, double w) {
            Pointers.glVertexStream4dATI(stream, x, y, z, w);
        }
        
        public unsafe static void glVertexStream4dvATI(int stream, double* coords) {
            Pointers.glVertexStream4dvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream4dvATI(int stream, double[] coords) {
            fixed(double* coords_ = &coords[0])
                Pointers.glVertexStream4dvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream4fATI(int stream, float x, float y, float z, float w) {
            Pointers.glVertexStream4fATI(stream, x, y, z, w);
        }
        
        public unsafe static void glVertexStream4fvATI(int stream, float* coords) {
            Pointers.glVertexStream4fvATI(stream, coords);
        }
        
        public unsafe static void glVertexStream4fvATI(int stream, float[] coords) {
            fixed(float* coords_ = &coords[0])
                Pointers.glVertexStream4fvATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream4iATI(int stream, int x, int y, int z, int w) {
            Pointers.glVertexStream4iATI(stream, x, y, z, w);
        }
        
        public unsafe static void glVertexStream4ivATI(int stream, int* coords) {
            Pointers.glVertexStream4ivATI(stream, coords);
        }
        
        public unsafe static void glVertexStream4ivATI(int stream, int[] coords) {
            fixed(int* coords_ = &coords[0])
                Pointers.glVertexStream4ivATI(stream, coords_);
        }
        
        public unsafe static void glVertexStream4sATI(int stream, short x, short y, short z, short w) {
            Pointers.glVertexStream4sATI(stream, x, y, z, w);
        }
        
        public unsafe static void glVertexStream4svATI(int stream, short* coords) {
            Pointers.glVertexStream4svATI(stream, coords);
        }
        
        public unsafe static void glVertexStream4svATI(int stream, short[] coords) {
            fixed(short* coords_ = &coords[0])
                Pointers.glVertexStream4svATI(stream, coords_);
        }
        
        public unsafe static void glVertexWeightPointerEXT(int size, int type, int stride, IntPtr pointer) {
            Pointers.glVertexWeightPointerEXT(size, type, stride, pointer);
        }
        
        public unsafe static void glVertexWeightfEXT(float weight) {
            Pointers.glVertexWeightfEXT(weight);
        }
        
        public unsafe static void glVertexWeightfvEXT(float* weight) {
            Pointers.glVertexWeightfvEXT(weight);
        }
        
        public unsafe static void glVertexWeightfvEXT(out float weight) {
            fixed(float* weight_ = &weight)
                Pointers.glVertexWeightfvEXT(weight_);
        }
        
        public unsafe static void glVertexWeighthNV(short weight) {
            Pointers.glVertexWeighthNV(weight);
        }
        
        public unsafe static void glVertexWeighthvNV(short* weight) {
            Pointers.glVertexWeighthvNV(weight);
        }
        
        public unsafe static void glVertexWeighthvNV(out short weight) {
            fixed(short* weight_ = &weight)
                Pointers.glVertexWeighthvNV(weight_);
        }
        
        public unsafe static int glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong* capture_time) {
            return Pointers.glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
        }
        
        public unsafe static int glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong[] capture_time) {
            fixed(ulong* capture_time_ = &capture_time[0])
                return Pointers.glVideoCaptureNV(video_capture_slot, sequence_num, capture_time_);
        }
        
        public unsafe static int glVideoCaptureNV(uint video_capture_slot, uint[] sequence_num, ulong* capture_time) {
            fixed(uint* sequence_num_ = &sequence_num[0])
                return Pointers.glVideoCaptureNV(video_capture_slot, sequence_num_, capture_time);
        }
        
        public unsafe static int glVideoCaptureNV(uint video_capture_slot, uint[] sequence_num, ulong[] capture_time) {
            fixed(uint* sequence_num_ = &sequence_num[0])
            fixed(ulong* capture_time_ = &capture_time[0])
                return Pointers.glVideoCaptureNV(video_capture_slot, sequence_num_, capture_time_);
        }
        
        public unsafe static void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double* _params) {
            Pointers.glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, _params);
        }
        
        public unsafe static void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double[] _params) {
            fixed(double* _params_ = &_params[0])
                Pointers.glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, _params_);
        }
        
        public unsafe static void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float* _params) {
            Pointers.glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, _params);
        }
        
        public unsafe static void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float[] _params) {
            fixed(float* _params_ = &_params[0])
                Pointers.glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, _params_);
        }
        
        public unsafe static void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int* _params) {
            Pointers.glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, _params);
        }
        
        public unsafe static void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int[] _params) {
            fixed(int* _params_ = &_params[0])
                Pointers.glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, _params_);
        }
        
        public unsafe static void glViewport(int x, int y, int width, int height) {
            Pointers.glViewport(x, y, width, height);
        }
        
        public unsafe static void glViewportArrayv(uint first, int count, float* v) {
            Pointers.glViewportArrayv(first, count, v);
        }
        
        public unsafe static void glViewportArrayv(uint first, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glViewportArrayv(first, count, v_);
        }
        
        public unsafe static void glViewportArrayvNV(uint first, int count, float* v) {
            Pointers.glViewportArrayvNV(first, count, v);
        }
        
        public unsafe static void glViewportArrayvNV(uint first, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glViewportArrayvNV(first, count, v_);
        }
        
        public unsafe static void glViewportArrayvOES(uint first, int count, float* v) {
            Pointers.glViewportArrayvOES(first, count, v);
        }
        
        public unsafe static void glViewportArrayvOES(uint first, int count, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glViewportArrayvOES(first, count, v_);
        }
        
        public unsafe static void glViewportIndexedf(uint index, float x, float y, float w, float h) {
            Pointers.glViewportIndexedf(index, x, y, w, h);
        }
        
        public unsafe static void glViewportIndexedfOES(uint index, float x, float y, float w, float h) {
            Pointers.glViewportIndexedfOES(index, x, y, w, h);
        }
        
        public unsafe static void glViewportIndexedfNV(uint index, float x, float y, float w, float h) {
            Pointers.glViewportIndexedfNV(index, x, y, w, h);
        }
        
        public unsafe static void glViewportIndexedfv(uint index, float* v) {
            Pointers.glViewportIndexedfv(index, v);
        }
        
        public unsafe static void glViewportIndexedfv(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glViewportIndexedfv(index, v_);
        }
        
        public unsafe static void glViewportIndexedfvOES(uint index, float* v) {
            Pointers.glViewportIndexedfvOES(index, v);
        }
        
        public unsafe static void glViewportIndexedfvOES(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glViewportIndexedfvOES(index, v_);
        }
        
        public unsafe static void glViewportIndexedfvNV(uint index, float* v) {
            Pointers.glViewportIndexedfvNV(index, v);
        }
        
        public unsafe static void glViewportIndexedfvNV(uint index, float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glViewportIndexedfvNV(index, v_);
        }
        
        public unsafe static void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff) {
            Pointers.glViewportPositionWScaleNV(index, xcoeff, ycoeff);
        }
        
        public unsafe static void glViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew) {
            Pointers.glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* srcLayouts) {
            Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint[] srcLayouts) {
            fixed(uint* srcLayouts_ = &srcLayouts[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts_);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint[] textures, uint* srcLayouts) {
            fixed(uint* textures_ = &textures[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures_, srcLayouts);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint[] textures, uint[] srcLayouts) {
            fixed(uint* textures_ = &textures[0])
            fixed(uint* srcLayouts_ = &srcLayouts[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures_, srcLayouts_);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint* textures, uint* srcLayouts) {
            fixed(uint* buffers_ = &buffers[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures, srcLayouts);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint* textures, uint[] srcLayouts) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* srcLayouts_ = &srcLayouts[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures, srcLayouts_);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, uint* srcLayouts) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* textures_ = &textures[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures_, srcLayouts);
        }
        
        public unsafe static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, uint[] srcLayouts) {
            fixed(uint* buffers_ = &buffers[0])
            fixed(uint* textures_ = &textures[0])
            fixed(uint* srcLayouts_ = &srcLayouts[0])
                Pointers.glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_, numTextureBarriers, textures_, srcLayouts_);
        }
        
        public unsafe static void glWaitSync(IntPtr sync, uint flags, ulong timeout) {
            Pointers.glWaitSync(sync, flags, timeout);
        }
        
        public unsafe static void glWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout) {
            Pointers.glWaitSyncAPPLE(sync, flags, timeout);
        }
        
        public unsafe static void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights) {
            Pointers.glWeightPathsNV(resultPath, numPaths, paths, weights);
        }
        
        public unsafe static void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float[] weights) {
            fixed(float* weights_ = &weights[0])
                Pointers.glWeightPathsNV(resultPath, numPaths, paths, weights_);
        }
        
        public unsafe static void glWeightPathsNV(uint resultPath, int numPaths, uint[] paths, float* weights) {
            fixed(uint* paths_ = &paths[0])
                Pointers.glWeightPathsNV(resultPath, numPaths, paths_, weights);
        }
        
        public unsafe static void glWeightPathsNV(uint resultPath, int numPaths, uint[] paths, float[] weights) {
            fixed(uint* paths_ = &paths[0])
            fixed(float* weights_ = &weights[0])
                Pointers.glWeightPathsNV(resultPath, numPaths, paths_, weights_);
        }
        
        public unsafe static void glWeightPointerARB(int size, int type, int stride, IntPtr pointer) {
            Pointers.glWeightPointerARB(size, type, stride, pointer);
        }
        
        public unsafe static void glWeightPointerOES(int size, int type, int stride, IntPtr pointer) {
            Pointers.glWeightPointerOES(size, type, stride, pointer);
        }
        
        public unsafe static void glWeightbvARB(int size, sbyte* weights) {
            Pointers.glWeightbvARB(size, weights);
        }
        
        public unsafe static void glWeightbvARB(int size, sbyte[] weights) {
            fixed(sbyte* weights_ = &weights[0])
                Pointers.glWeightbvARB(size, weights_);
        }
        
        public unsafe static void glWeightdvARB(int size, double* weights) {
            Pointers.glWeightdvARB(size, weights);
        }
        
        public unsafe static void glWeightdvARB(int size, double[] weights) {
            fixed(double* weights_ = &weights[0])
                Pointers.glWeightdvARB(size, weights_);
        }
        
        public unsafe static void glWeightfvARB(int size, float* weights) {
            Pointers.glWeightfvARB(size, weights);
        }
        
        public unsafe static void glWeightfvARB(int size, float[] weights) {
            fixed(float* weights_ = &weights[0])
                Pointers.glWeightfvARB(size, weights_);
        }
        
        public unsafe static void glWeightivARB(int size, int* weights) {
            Pointers.glWeightivARB(size, weights);
        }
        
        public unsafe static void glWeightivARB(int size, int[] weights) {
            fixed(int* weights_ = &weights[0])
                Pointers.glWeightivARB(size, weights_);
        }
        
        public unsafe static void glWeightsvARB(int size, short* weights) {
            Pointers.glWeightsvARB(size, weights);
        }
        
        public unsafe static void glWeightsvARB(int size, short[] weights) {
            fixed(short* weights_ = &weights[0])
                Pointers.glWeightsvARB(size, weights_);
        }
        
        public unsafe static void glWeightubvARB(int size, byte* weights) {
            Pointers.glWeightubvARB(size, weights);
        }
        
        public unsafe static void glWeightubvARB(int size, byte[] weights) {
            fixed(byte* weights_ = &weights[0])
                Pointers.glWeightubvARB(size, weights_);
        }
        
        public unsafe static void glWeightuivARB(int size, uint* weights) {
            Pointers.glWeightuivARB(size, weights);
        }
        
        public unsafe static void glWeightuivARB(int size, uint[] weights) {
            fixed(uint* weights_ = &weights[0])
                Pointers.glWeightuivARB(size, weights_);
        }
        
        public unsafe static void glWeightusvARB(int size, ushort* weights) {
            Pointers.glWeightusvARB(size, weights);
        }
        
        public unsafe static void glWeightusvARB(int size, ushort[] weights) {
            fixed(ushort* weights_ = &weights[0])
                Pointers.glWeightusvARB(size, weights_);
        }
        
        public unsafe static void glWindowPos2d(double x, double y) {
            Pointers.glWindowPos2d(x, y);
        }
        
        public unsafe static void glWindowPos2dARB(double x, double y) {
            Pointers.glWindowPos2dARB(x, y);
        }
        
        public unsafe static void glWindowPos2dMESA(double x, double y) {
            Pointers.glWindowPos2dMESA(x, y);
        }
        
        public unsafe static void glWindowPos2dv(double* v) {
            Pointers.glWindowPos2dv(v);
        }
        
        public unsafe static void glWindowPos2dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos2dv(v_);
        }
        
        public unsafe static void glWindowPos2dvARB(double* v) {
            Pointers.glWindowPos2dvARB(v);
        }
        
        public unsafe static void glWindowPos2dvARB(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos2dvARB(v_);
        }
        
        public unsafe static void glWindowPos2dvMESA(double* v) {
            Pointers.glWindowPos2dvMESA(v);
        }
        
        public unsafe static void glWindowPos2dvMESA(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos2dvMESA(v_);
        }
        
        public unsafe static void glWindowPos2f(float x, float y) {
            Pointers.glWindowPos2f(x, y);
        }
        
        public unsafe static void glWindowPos2fARB(float x, float y) {
            Pointers.glWindowPos2fARB(x, y);
        }
        
        public unsafe static void glWindowPos2fMESA(float x, float y) {
            Pointers.glWindowPos2fMESA(x, y);
        }
        
        public unsafe static void glWindowPos2fv(float* v) {
            Pointers.glWindowPos2fv(v);
        }
        
        public unsafe static void glWindowPos2fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos2fv(v_);
        }
        
        public unsafe static void glWindowPos2fvARB(float* v) {
            Pointers.glWindowPos2fvARB(v);
        }
        
        public unsafe static void glWindowPos2fvARB(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos2fvARB(v_);
        }
        
        public unsafe static void glWindowPos2fvMESA(float* v) {
            Pointers.glWindowPos2fvMESA(v);
        }
        
        public unsafe static void glWindowPos2fvMESA(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos2fvMESA(v_);
        }
        
        public unsafe static void glWindowPos2i(int x, int y) {
            Pointers.glWindowPos2i(x, y);
        }
        
        public unsafe static void glWindowPos2iARB(int x, int y) {
            Pointers.glWindowPos2iARB(x, y);
        }
        
        public unsafe static void glWindowPos2iMESA(int x, int y) {
            Pointers.glWindowPos2iMESA(x, y);
        }
        
        public unsafe static void glWindowPos2iv(int* v) {
            Pointers.glWindowPos2iv(v);
        }
        
        public unsafe static void glWindowPos2iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos2iv(v_);
        }
        
        public unsafe static void glWindowPos2ivARB(int* v) {
            Pointers.glWindowPos2ivARB(v);
        }
        
        public unsafe static void glWindowPos2ivARB(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos2ivARB(v_);
        }
        
        public unsafe static void glWindowPos2ivMESA(int* v) {
            Pointers.glWindowPos2ivMESA(v);
        }
        
        public unsafe static void glWindowPos2ivMESA(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos2ivMESA(v_);
        }
        
        public unsafe static void glWindowPos2s(short x, short y) {
            Pointers.glWindowPos2s(x, y);
        }
        
        public unsafe static void glWindowPos2sARB(short x, short y) {
            Pointers.glWindowPos2sARB(x, y);
        }
        
        public unsafe static void glWindowPos2sMESA(short x, short y) {
            Pointers.glWindowPos2sMESA(x, y);
        }
        
        public unsafe static void glWindowPos2sv(short* v) {
            Pointers.glWindowPos2sv(v);
        }
        
        public unsafe static void glWindowPos2sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos2sv(v_);
        }
        
        public unsafe static void glWindowPos2svARB(short* v) {
            Pointers.glWindowPos2svARB(v);
        }
        
        public unsafe static void glWindowPos2svARB(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos2svARB(v_);
        }
        
        public unsafe static void glWindowPos2svMESA(short* v) {
            Pointers.glWindowPos2svMESA(v);
        }
        
        public unsafe static void glWindowPos2svMESA(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos2svMESA(v_);
        }
        
        public unsafe static void glWindowPos3d(double x, double y, double z) {
            Pointers.glWindowPos3d(x, y, z);
        }
        
        public unsafe static void glWindowPos3dARB(double x, double y, double z) {
            Pointers.glWindowPos3dARB(x, y, z);
        }
        
        public unsafe static void glWindowPos3dMESA(double x, double y, double z) {
            Pointers.glWindowPos3dMESA(x, y, z);
        }
        
        public unsafe static void glWindowPos3dv(double* v) {
            Pointers.glWindowPos3dv(v);
        }
        
        public unsafe static void glWindowPos3dv(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos3dv(v_);
        }
        
        public unsafe static void glWindowPos3dvARB(double* v) {
            Pointers.glWindowPos3dvARB(v);
        }
        
        public unsafe static void glWindowPos3dvARB(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos3dvARB(v_);
        }
        
        public unsafe static void glWindowPos3dvMESA(double* v) {
            Pointers.glWindowPos3dvMESA(v);
        }
        
        public unsafe static void glWindowPos3dvMESA(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos3dvMESA(v_);
        }
        
        public unsafe static void glWindowPos3f(float x, float y, float z) {
            Pointers.glWindowPos3f(x, y, z);
        }
        
        public unsafe static void glWindowPos3fARB(float x, float y, float z) {
            Pointers.glWindowPos3fARB(x, y, z);
        }
        
        public unsafe static void glWindowPos3fMESA(float x, float y, float z) {
            Pointers.glWindowPos3fMESA(x, y, z);
        }
        
        public unsafe static void glWindowPos3fv(float* v) {
            Pointers.glWindowPos3fv(v);
        }
        
        public unsafe static void glWindowPos3fv(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos3fv(v_);
        }
        
        public unsafe static void glWindowPos3fvARB(float* v) {
            Pointers.glWindowPos3fvARB(v);
        }
        
        public unsafe static void glWindowPos3fvARB(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos3fvARB(v_);
        }
        
        public unsafe static void glWindowPos3fvMESA(float* v) {
            Pointers.glWindowPos3fvMESA(v);
        }
        
        public unsafe static void glWindowPos3fvMESA(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos3fvMESA(v_);
        }
        
        public unsafe static void glWindowPos3i(int x, int y, int z) {
            Pointers.glWindowPos3i(x, y, z);
        }
        
        public unsafe static void glWindowPos3iARB(int x, int y, int z) {
            Pointers.glWindowPos3iARB(x, y, z);
        }
        
        public unsafe static void glWindowPos3iMESA(int x, int y, int z) {
            Pointers.glWindowPos3iMESA(x, y, z);
        }
        
        public unsafe static void glWindowPos3iv(int* v) {
            Pointers.glWindowPos3iv(v);
        }
        
        public unsafe static void glWindowPos3iv(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos3iv(v_);
        }
        
        public unsafe static void glWindowPos3ivARB(int* v) {
            Pointers.glWindowPos3ivARB(v);
        }
        
        public unsafe static void glWindowPos3ivARB(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos3ivARB(v_);
        }
        
        public unsafe static void glWindowPos3ivMESA(int* v) {
            Pointers.glWindowPos3ivMESA(v);
        }
        
        public unsafe static void glWindowPos3ivMESA(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos3ivMESA(v_);
        }
        
        public unsafe static void glWindowPos3s(short x, short y, short z) {
            Pointers.glWindowPos3s(x, y, z);
        }
        
        public unsafe static void glWindowPos3sARB(short x, short y, short z) {
            Pointers.glWindowPos3sARB(x, y, z);
        }
        
        public unsafe static void glWindowPos3sMESA(short x, short y, short z) {
            Pointers.glWindowPos3sMESA(x, y, z);
        }
        
        public unsafe static void glWindowPos3sv(short* v) {
            Pointers.glWindowPos3sv(v);
        }
        
        public unsafe static void glWindowPos3sv(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos3sv(v_);
        }
        
        public unsafe static void glWindowPos3svARB(short* v) {
            Pointers.glWindowPos3svARB(v);
        }
        
        public unsafe static void glWindowPos3svARB(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos3svARB(v_);
        }
        
        public unsafe static void glWindowPos3svMESA(short* v) {
            Pointers.glWindowPos3svMESA(v);
        }
        
        public unsafe static void glWindowPos3svMESA(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos3svMESA(v_);
        }
        
        public unsafe static void glWindowPos4dMESA(double x, double y, double z, double w) {
            Pointers.glWindowPos4dMESA(x, y, z, w);
        }
        
        public unsafe static void glWindowPos4dvMESA(double* v) {
            Pointers.glWindowPos4dvMESA(v);
        }
        
        public unsafe static void glWindowPos4dvMESA(double[] v) {
            fixed(double* v_ = &v[0])
                Pointers.glWindowPos4dvMESA(v_);
        }
        
        public unsafe static void glWindowPos4fMESA(float x, float y, float z, float w) {
            Pointers.glWindowPos4fMESA(x, y, z, w);
        }
        
        public unsafe static void glWindowPos4fvMESA(float* v) {
            Pointers.glWindowPos4fvMESA(v);
        }
        
        public unsafe static void glWindowPos4fvMESA(float[] v) {
            fixed(float* v_ = &v[0])
                Pointers.glWindowPos4fvMESA(v_);
        }
        
        public unsafe static void glWindowPos4iMESA(int x, int y, int z, int w) {
            Pointers.glWindowPos4iMESA(x, y, z, w);
        }
        
        public unsafe static void glWindowPos4ivMESA(int* v) {
            Pointers.glWindowPos4ivMESA(v);
        }
        
        public unsafe static void glWindowPos4ivMESA(int[] v) {
            fixed(int* v_ = &v[0])
                Pointers.glWindowPos4ivMESA(v_);
        }
        
        public unsafe static void glWindowPos4sMESA(short x, short y, short z, short w) {
            Pointers.glWindowPos4sMESA(x, y, z, w);
        }
        
        public unsafe static void glWindowPos4svMESA(short* v) {
            Pointers.glWindowPos4svMESA(v);
        }
        
        public unsafe static void glWindowPos4svMESA(short[] v) {
            fixed(short* v_ = &v[0])
                Pointers.glWindowPos4svMESA(v_);
        }
        
        public unsafe static void glWindowRectanglesEXT(int mode, int count, int* box) {
            Pointers.glWindowRectanglesEXT(mode, count, box);
        }
        
        public unsafe static void glWindowRectanglesEXT(int mode, int count, int[] box) {
            fixed(int* box_ = &box[0])
                Pointers.glWindowRectanglesEXT(mode, count, box_);
        }
        
        public unsafe static void glWriteMaskEXT(uint res, uint _in, int outX, int outY, int outZ, int outW) {
            Pointers.glWriteMaskEXT(res, _in, outX, outY, outZ, outW);
        }
        
        public unsafe static void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) {
            Pointers.glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        public unsafe static IntPtr glGetVkProcAddrNV(string name) {
            return Pointers.glGetVkProcAddrNV(name);
        }
        
        public unsafe static void glWaitVkSemaphoreNV(ulong vkSemaphore) {
            Pointers.glWaitVkSemaphoreNV(vkSemaphore);
        }
        
        public unsafe static void glSignalVkSemaphoreNV(ulong vkSemaphore) {
            Pointers.glSignalVkSemaphoreNV(vkSemaphore);
        }
        
        public unsafe static void glSignalVkFenceNV(ulong vkFence) {
            Pointers.glSignalVkFenceNV(vkFence);
        }
    }
}
